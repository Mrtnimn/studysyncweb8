{"file_contents":{"design_guidelines.md":{"content":"# StudySyncWeb Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from Discord's server layout for collaborative features and Notion's clean workspace design for academic focus, creating a modern student-friendly interface that balances functionality with visual appeal.\n\n## Core Design Elements\n\n### A. Color Palette\n**Light Mode:**\n- Primary: #6366F1 (Indigo) - Navigation, CTAs, active states\n- Secondary: #10B981 (Emerald) - Success states, study streaks\n- Background: #F8FAFC (Light grey) - Main background\n- Text: #1E293B (Slate) - Primary text\n- Accent: #F59E0B (Amber) - Notifications, achievements\n- Success: #059669 (Green) - Completed tasks, positive feedback\n\n**Dark Mode:**\n- Primary: 239 84% 67% (Lighter indigo for contrast)\n- Secondary: 160 84% 39% (Adjusted emerald)\n- Background: 222 84% 5% (Dark slate)\n- Text: 210 40% 98% (Light text)\n- Cards: 220 13% 18% (Dark grey cards)\n\n### B. Typography\n- **Primary Font**: Inter (Google Fonts) - Clean, readable for UI elements\n- **Secondary Font**: Poppins (Google Fonts) - Headings and emphasis\n- **Scale**: 14px (body), 16px (default), 18px (large), 24px (h3), 32px (h2), 40px (h1)\n- **Weights**: 400 (regular), 500 (medium), 600 (semibold), 700 (bold)\n\n### C. Layout System\n**Tailwind Spacing Units**: Consistent use of 2, 4, 8, 12, 16 units\n- `p-2, m-4, gap-8, space-y-4` for tight spacing\n- `p-4, m-8, gap-12` for medium spacing  \n- `p-8, m-16` for generous spacing\n- 8px border radius for cards and buttons\n- 16px base spacing for component padding\n\n### D. Component Library\n\n**Navigation:**\n- Discord-inspired sidebar with collapsible sections\n- Clean top navigation with user profile and notifications\n- Breadcrumb navigation for deep pages\n\n**Cards:**\n- Notion-style clean cards with subtle shadows\n- Study room cards with preview thumbnails\n- Tutor profile cards with subject badges\n\n**Interactive Elements:**\n- Rounded buttons with hover states\n- Toggle switches for settings (Do Not Disturb)\n- Progress bars for gamification (animated)\n- Calendar grid with clickable date cells\n\n**Study Environment:**\n- Minimalist full-screen study room interface\n- Floating control panels with blur backgrounds\n- Document viewer with clean typography\n- Timer display with large, readable numbers\n\n**Forms:**\n- Clean input fields with floating labels\n- File upload areas with drag-and-drop styling\n- Form validation with inline error messages\n\n### E. Visual Hierarchy\n- **Headers**: Bold Poppins fonts with adequate spacing\n- **Content Sections**: Clear separation using cards and whitespace\n- **CTAs**: Primary buttons using brand indigo with high contrast\n- **Secondary Actions**: Outline buttons with hover effects\n\n### F. Gamification Elements\n- **Progress Bars**: Animated with emerald success color\n- **Badge System**: Colorful achievement badges with subtle animations\n- **Streak Counters**: Large, prominent numbers with supporting text\n- **XP Display**: Clean numerical displays with progress indicators\n\n### G. Study-Focused Design\n- **Distraction-Free**: Minimal UI in study mode, hidden navigation\n- **Focus Colors**: Calming background themes for study rooms\n- **Readability**: High contrast text, comfortable line spacing\n- **Clean Aesthetics**: Academic feel without being sterile\n\n### H. Responsive Design\n- **Mobile-First**: Optimized for smartphone studying\n- **Tablet**: Enhanced layout for group collaboration\n- **Desktop**: Full feature set with multi-panel layouts\n- **Breakpoints**: Standard Tailwind responsive utilities\n\nThis design system creates an engaging, academic-focused platform that feels welcoming to young students while maintaining the professional quality needed for effective learning environments.","size_bytes":3731},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\nimport nodemailer from \"nodemailer\";\nimport crypto from \"crypto\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertStudySessionSchema, insertCalendarEventSchema, insertAchievementSchema, insertTutorProfileSchema, insertTutorBookingSchema, insertTutorReviewSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\n// Session configuration\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\n// Create PostgreSQL session store for production persistence\nconst PgSession = connectPgSimple(session);\n\n// Enhanced session security configuration\nconst sessionSecret = process.env.SESSION_SECRET;\n\n// Enforce strong session secret in production\nif (process.env.NODE_ENV === 'production' && (!sessionSecret || sessionSecret.length < 32)) {\n  console.error('SECURITY ERROR: SESSION_SECRET must be set and at least 32 characters long in production');\n  process.exit(1);\n}\n\nconst sessionConfig = {\n  secret: sessionSecret || 'development-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  name: 'studysync.sid', // Custom session name for security\n  // Use PostgreSQL session store for production persistence in serverless environments\n  store: new PgSession({\n    pool: pool,\n    tableName: 'session',\n    createTableIfMissing: true,\n  }),\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'lax' as const, // CSRF protection\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n};\n\n// Email transporter for password reset\nconst emailTransporter = nodemailer.createTransport({\n  service: 'gmail', // or your preferred email service\n  auth: {\n    user: process.env.EMAIL_USER || 'noreply@studysync.com',\n    pass: process.env.EMAIL_PASSWORD || 'your-app-password'\n  }\n});\n\n// Passport configuration\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\n// Google OAuth Strategy\nif (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n  passport.use(new GoogleStrategy({\n    clientID: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    callbackURL: \"/api/auth/google/callback\"\n  }, async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      // Check if user already exists\n      let user = await storage.getUserByEmail(profile.emails?.[0]?.value || '');\n      \n      if (!user) {\n        // Create new user\n        const userData = {\n          username: profile.username || profile.displayName || `user_${profile.id}`,\n          password: await bcrypt.hash(crypto.randomBytes(32).toString('hex'), 10), // Random password for OAuth users\n          email: profile.emails?.[0]?.value || null,\n          display_name: profile.displayName,\n          avatar_url: profile.photos?.[0]?.value || null\n        };\n        user = await storage.createUser(userData);\n      }\n      \n      return done(null, user);\n    } catch (error) {\n      return done(error, undefined);\n    }\n  }));\n}\n\n// GitHub OAuth Strategy  \nif (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n  passport.use(new GitHubStrategy({\n    clientID: process.env.GITHUB_CLIENT_ID,\n    clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    callbackURL: \"/api/auth/github/callback\"\n  }, async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      // Check if user already exists\n      let user = await storage.getUserByEmail(profile.emails?.[0]?.value || '');\n      \n      if (!user) {\n        // Create new user\n        const userData = {\n          username: profile.username || profile.displayName || `user_${profile.id}`,\n          password: await bcrypt.hash(crypto.randomBytes(32).toString('hex'), 10), // Random password for OAuth users\n          email: profile.emails?.[0]?.value || null,\n          display_name: profile.displayName,\n          avatar_url: profile.photos?.[0]?.value || null\n        };\n        user = await storage.createUser(userData);\n      }\n      \n      return done(null, user);\n    } catch (error) {\n      return done(error, undefined);\n    }\n  }));\n}\n\n// Password reset token storage (in production, use Redis or database)\nconst passwordResetTokens = new Map<string, { userId: string, expires: Date }>();\n\n// File upload configuration\nconst uploadDir = path.join(process.cwd(), 'uploads');\nconst avatarDir = path.join(uploadDir, 'avatars');\nconst documentsDir = path.join(uploadDir, 'documents');\n\n// Ensure upload directories exist\n[uploadDir, avatarDir, documentsDir].forEach(dir => {\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n});\n\n// Multer configuration for avatars\nconst avatarStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, avatarDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, `avatar-${uniqueSuffix}${path.extname(file.originalname)}`);\n  }\n});\n\nconst avatarUpload = multer({\n  storage: avatarStorage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPEG, PNG, GIF and WebP are allowed.'));\n    }\n  }\n});\n\n// Multer configuration for documents\nconst documentStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, documentsDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, `doc-${uniqueSuffix}${path.extname(file.originalname)}`);\n  }\n});\n\nconst documentUpload = multer({\n  storage: documentStorage,\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit for documents\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain',\n      'image/jpeg',\n      'image/png'\n    ];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only PDF, DOC, DOCX, TXT, and images are allowed.'));\n    }\n  }\n});\n\n// Achievement checking and unlock system\nasync function checkAndUnlockAchievements(userId: string, actionType: string, actionData: any = {}) {\n  try {\n    const user = await storage.getUser(userId);\n    if (!user) return [];\n\n    const allAchievements = await storage.getAllAchievements();\n    const userAchievements = await storage.getUserAchievements(userId);\n    const unlockedAchievementIds = new Set(userAchievements.map(ua => ua.achievement_id));\n    \n    const newlyUnlocked = [];\n\n    for (const achievement of allAchievements) {\n      // Skip if already unlocked\n      if (unlockedAchievementIds.has(achievement.id)) continue;\n\n      const criteria = achievement.unlock_criteria as any;\n      let shouldUnlock = false;\n\n      switch (criteria.type) {\n        case 'sessions_completed':\n          if (actionType === 'session_completed') {\n            const sessions = await storage.getUserStudySessions(userId);\n            shouldUnlock = sessions.length >= criteria.target;\n          }\n          break;\n\n        case 'study_streak':\n          if (actionType === 'session_completed' || actionType === 'streak_updated') {\n            shouldUnlock = (user.study_streak || 0) >= criteria.target;\n          }\n          break;\n\n        case 'total_xp':\n          if (actionType === 'xp_gained') {\n            shouldUnlock = (user.total_xp || 0) >= criteria.target;\n          }\n          break;\n\n        case 'session_duration':\n          if (actionType === 'session_completed' && actionData.duration_minutes) {\n            shouldUnlock = actionData.duration_minutes >= criteria.target;\n          }\n          break;\n\n        case 'early_study':\n          if (actionType === 'session_completed' && actionData.start_time) {\n            const startHour = new Date(actionData.start_time).getHours();\n            shouldUnlock = startHour < 7;\n          }\n          break;\n\n        case 'group_sessions':\n          if (actionType === 'group_session_joined') {\n            // For this, we'd need to track group session participation\n            // For now, we'll implement a basic version\n            shouldUnlock = actionData.groupSessionCount >= criteria.target;\n          }\n          break;\n\n        case 'consecutive_days':\n          if (actionType === 'session_completed') {\n            // Check if user has studied for consecutive days\n            shouldUnlock = (user.study_streak || 0) >= criteria.target;\n          }\n          break;\n      }\n\n      if (shouldUnlock) {\n        try {\n          const unlockedAchievement = await storage.unlockAchievement(userId, achievement.id);\n          \n          // Award XP for achievement\n          if (achievement.xp_reward && achievement.xp_reward > 0) {\n            await storage.updateUserXP(userId, achievement.xp_reward);\n          }\n\n          newlyUnlocked.push({\n            achievement,\n            unlockedAt: unlockedAchievement.unlocked_at\n          });\n        } catch (error) {\n          console.log('Achievement already unlocked or error:', achievement.name);\n        }\n      }\n    }\n\n    return newlyUnlocked;\n  } catch (error) {\n    console.error('Error checking achievements:', error);\n    return [];\n  }\n}\n\n// Seed initial achievements\nasync function seedAchievements() {\n  const existingAchievements = await storage.getAllAchievements();\n  if (existingAchievements.length === 0) {\n    // Create initial achievements\n    const achievements = [\n      {\n        name: \"First Steps\",\n        description: \"Complete your first study session\",\n        icon: \"target\",\n        xp_reward: 50,\n        badge_color: \"blue\",\n        category: \"milestone\",\n        unlock_criteria: { type: \"sessions_completed\", target: 1 }\n      },\n      {\n        name: \"Week Warrior\",\n        description: \"Study for 7 days in a row\",\n        icon: \"flame\",\n        xp_reward: 200,\n        badge_color: \"orange\",\n        category: \"streak\",\n        unlock_criteria: { type: \"study_streak\", target: 7 }\n      },\n      {\n        name: \"Early Bird\",\n        description: \"Start a study session before 7 AM\",\n        icon: \"sunrise\",\n        xp_reward: 100,\n        badge_color: \"yellow\",\n        category: \"focus\",\n        unlock_criteria: { type: \"early_study\", target: 1 }\n      },\n      {\n        name: \"XP Master\",\n        description: \"Earn 1000 total XP points\",\n        icon: \"star\",\n        xp_reward: 300,\n        badge_color: \"purple\",\n        category: \"xp\",\n        unlock_criteria: { type: \"total_xp\", target: 1000 }\n      },\n      {\n        name: \"Study Marathon\",\n        description: \"Study for 2 hours in a single session\",\n        icon: \"clock\",\n        xp_reward: 150,\n        badge_color: \"green\",\n        category: \"focus\",\n        unlock_criteria: { type: \"session_duration\", target: 120 }\n      }\n    ];\n\n    for (const achievement of achievements) {\n      try {\n        const validatedAchievement = insertAchievementSchema.parse(achievement);\n        await storage.createAchievement(validatedAchievement);\n      } catch (error) {\n        console.log('Could not seed achievement:', achievement.name);\n      }\n    }\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Security settings for production\n  if (process.env.NODE_ENV === 'production') {\n    app.set('trust proxy', 1); // Trust first proxy (required for secure cookies behind proxies)\n  }\n\n  app.use(session(sessionConfig));\n  \n  // Security headers middleware\n  app.use((req, res, next) => {\n    // Content Security Policy for iframe security\n    res.setHeader('Content-Security-Policy', [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com\",\n      \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com\",\n      \"font-src 'self' https://fonts.gstatic.com\",\n      \"img-src 'self' data: blob:\",\n      \"media-src 'self' blob:\",\n      \"frame-src https://www.youtube-nocookie.com https://open.spotify.com\",\n      \"connect-src 'self' https://api.dictionaryapi.dev\",\n      \"upgrade-insecure-requests\"\n    ].join('; '));\n\n    // Additional security headers\n    res.setHeader('X-Frame-Options', 'DENY');\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n    \n    next();\n  });\n\n  // CSRF protection via custom header for state-changing routes\n  const requireCSRFProtection = (req: any, res: any, next: any) => {\n    if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(req.method)) {\n      const csrfHeader = req.get('X-Requested-With');\n      if (csrfHeader !== 'XMLHttpRequest') {\n        return res.status(403).json({ message: 'CSRF protection: missing required header' });\n      }\n    }\n    next();\n  };\n  \n  // Initialize passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n  \n  // Seed achievements on startup\n  await seedAchievements();\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Username already taken' });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword\n      });\n\n      // Set session\n      req.session.userId = user.id;\n      \n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        display_name: user.display_name,\n        avatar_url: user.avatar_url,\n        study_level: user.study_level,\n        total_xp: user.total_xp,\n        study_streak: user.study_streak,\n        longest_streak: user.longest_streak\n      });\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid input' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = z.object({\n        username: z.string(),\n        password: z.string()\n      }).parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      // Set session\n      req.session.userId = user.id;\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        display_name: user.display_name,\n        avatar_url: user.avatar_url,\n        study_level: user.study_level,\n        total_xp: user.total_xp,\n        study_streak: user.study_streak,\n        longest_streak: user.longest_streak\n      });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid input' });\n    }\n  });\n\n  app.get('/api/auth/me', requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        display_name: user.display_name,\n        avatar_url: user.avatar_url,\n        study_level: user.study_level,\n        total_xp: user.total_xp,\n        study_streak: user.study_streak,\n        longest_streak: user.longest_streak,\n        last_study_date: user.last_study_date\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Could not log out' });\n      }\n      res.json({ message: 'Logged out successfully' });\n    });\n  });\n\n  // OAuth Routes\n  \n  // Google OAuth\n  app.get('/api/auth/google', \n    passport.authenticate('google', { \n      scope: ['profile', 'email'],\n      state: crypto.randomBytes(32).toString('hex') // CSRF protection\n    })\n  );\n\n  app.get('/api/auth/google/callback', \n    passport.authenticate('google', { failureRedirect: '/login' }),\n    (req, res) => {\n      // Set session for our custom auth middleware\n      if (req.user && (req.user as any).id) {\n        req.session.userId = (req.user as any).id;\n      }\n      // Successful authentication, redirect to dashboard\n      res.redirect('/dashboard');\n    }\n  );\n\n  // GitHub OAuth\n  app.get('/api/auth/github',\n    passport.authenticate('github', { \n      scope: ['user:email'],\n      state: crypto.randomBytes(32).toString('hex') // CSRF protection\n    })\n  );\n\n  app.get('/api/auth/github/callback',\n    passport.authenticate('github', { failureRedirect: '/login' }),\n    (req, res) => {\n      // Set session for our custom auth middleware\n      if (req.user && (req.user as any).id) {\n        req.session.userId = (req.user as any).id;\n      }\n      // Successful authentication, redirect to dashboard\n      res.redirect('/dashboard');\n    }\n  );\n\n  // File Upload Routes\n  \n  // Serve uploaded files statically\n  app.use('/uploads', express.static(uploadDir));\n\n  // Avatar upload route\n  app.post('/api/upload/avatar', requireAuth, avatarUpload.single('avatar'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const avatarUrl = `/uploads/avatars/${req.file.filename}`;\n      \n      // Update user avatar in database\n      await storage.updateUserAvatar(req.session.userId!, avatarUrl);\n\n      res.json({\n        message: 'Avatar uploaded successfully',\n        avatarUrl: avatarUrl,\n        filename: req.file.filename\n      });\n    } catch (error) {\n      // Clean up uploaded file if database update fails\n      if (req.file && fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n      res.status(500).json({ message: 'Failed to upload avatar' });\n    }\n  });\n\n  // Document upload route\n  app.post('/api/upload/document', requireAuth, documentUpload.single('document'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const documentUrl = `/uploads/documents/${req.file.filename}`;\n\n      res.json({\n        message: 'Document uploaded successfully',\n        documentUrl: documentUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype\n      });\n    } catch (error) {\n      // Clean up uploaded file on error\n      if (req.file && fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n      res.status(500).json({ message: 'Failed to upload document' });\n    }\n  });\n\n  // Delete uploaded file route\n  app.delete('/api/upload/:type/:filename', requireAuth, async (req, res) => {\n    try {\n      const { type, filename } = req.params;\n      const allowedTypes = ['avatars', 'documents'];\n      \n      if (!allowedTypes.includes(type)) {\n        return res.status(400).json({ message: 'Invalid file type' });\n      }\n\n      const filePath = path.join(uploadDir, type, filename);\n      \n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n        res.json({ message: 'File deleted successfully' });\n      } else {\n        res.status(404).json({ message: 'File not found' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete file' });\n    }\n  });\n\n  // Password Reset Routes\n  app.post('/api/auth/forgot-password', async (req, res) => {\n    try {\n      const { email } = z.object({ email: z.string().email() }).parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return res.json({ message: 'If an account exists with that email, a reset link will be sent.' });\n      }\n\n      // Generate reset token\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      const expires = new Date(Date.now() + 3600000); // 1 hour from now\n      \n      // Store token (in production, use database or Redis)\n      passwordResetTokens.set(resetToken, { userId: user.id, expires });\n\n      // Send email (if configured)\n      if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {\n        try {\n          await emailTransporter.sendMail({\n            from: process.env.EMAIL_USER,\n            to: email,\n            subject: 'StudySync Password Reset',\n            html: `\n              <h2>Password Reset Request</h2>\n              <p>Click the link below to reset your password:</p>\n              <a href=\"${req.protocol}://${req.get('host')}/reset-password?token=${resetToken}\">Reset Password</a>\n              <p>This link expires in 1 hour.</p>\n              <p>If you didn't request this, please ignore this email.</p>\n            `\n          });\n        } catch (emailError) {\n          console.error('Email sending failed:', emailError);\n        }\n      }\n\n      res.json({ message: 'If an account exists with that email, a reset link will be sent.' });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid email address' });\n    }\n  });\n\n  app.post('/api/auth/reset-password', async (req, res) => {\n    try {\n      const { token, password } = z.object({\n        token: z.string(),\n        password: z.string().min(6)\n      }).parse(req.body);\n\n      const resetData = passwordResetTokens.get(token);\n      if (!resetData || resetData.expires < new Date()) {\n        return res.status(400).json({ message: 'Invalid or expired reset token' });\n      }\n\n      // Update password\n      const hashedPassword = await bcrypt.hash(password, 10);\n      await storage.updateUserPassword(resetData.userId, hashedPassword);\n\n      // Remove used token\n      passwordResetTokens.delete(token);\n\n      res.json({ message: 'Password reset successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request' });\n    }\n  });\n\n  // Study sessions routes\n  app.post('/api/sessions', requireAuth, async (req, res) => {\n    try {\n      const sessionData = insertStudySessionSchema.parse(req.body);\n      const session = await storage.createStudySession(req.session.userId!, sessionData);\n      \n      // Update user XP and streak\n      const xpGained = Math.floor(sessionData.duration_minutes * 2); // 2 XP per minute\n      await storage.updateUserXP(req.session.userId!, xpGained);\n      \n      // Simple streak logic - increment if studied today\n      const user = await storage.getUser(req.session.userId!);\n      if (user) {\n        const today = new Date();\n        const lastStudy = user.last_study_date ? new Date(user.last_study_date) : null;\n        const isToday = lastStudy && \n          today.toDateString() === lastStudy.toDateString();\n        \n        if (!isToday) {\n          await storage.updateUserStreak(req.session.userId!, (user.study_streak || 0) + 1);\n        }\n      }\n\n      // Check for achievements\n      const newAchievements = await checkAndUnlockAchievements(req.session.userId!, 'session_completed', {\n        duration_minutes: sessionData.duration_minutes,\n        start_time: new Date(),\n        session_type: sessionData.session_type\n      });\n\n      // Also check for XP-based achievements\n      const xpAchievements = await checkAndUnlockAchievements(req.session.userId!, 'xp_gained');\n\n      // Combine all new achievements\n      const allNewAchievements = [...newAchievements, ...xpAchievements];\n\n      res.json({\n        session,\n        newAchievements: allNewAchievements\n      });\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid input' });\n    }\n  });\n\n  app.get('/api/sessions/me', requireAuth, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const sessions = await storage.getUserStudySessions(req.session.userId!, limit);\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  // Calendar events routes\n  app.get('/api/events', requireAuth, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const events = await storage.getUserCalendarEvents(req.session.userId!, start, end);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.post('/api/events', requireAuth, async (req, res) => {\n    try {\n      const eventData = insertCalendarEventSchema.parse(req.body);\n      const event = await storage.createCalendarEvent(req.session.userId!, eventData);\n      res.json(event);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid input' });\n    }\n  });\n\n  app.patch('/api/events/:id', requireAuth, async (req, res) => {\n    try {\n      const eventId = req.params.id;\n      const updates = req.body;\n      await storage.updateCalendarEvent(eventId, updates);\n      res.json({ message: 'Event updated' });\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  // Achievements routes\n  app.get('/api/achievements', requireAuth, async (req, res) => {\n    try {\n      const achievements = await storage.getAllAchievements();\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.get('/api/achievements/me', requireAuth, async (req, res) => {\n    try {\n      const userAchievements = await storage.getUserAchievements(req.session.userId!);\n      res.json(userAchievements);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  // Trigger manual achievement check\n  app.post('/api/achievements/check', requireAuth, async (req, res) => {\n    try {\n      const { actionType, actionData } = req.body;\n      const newAchievements = await checkAndUnlockAchievements(\n        req.session.userId!, \n        actionType || 'manual_check', \n        actionData || {}\n      );\n      \n      res.json({\n        message: 'Achievement check completed',\n        newAchievements\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  // Group study rooms routes\n  app.get('/api/rooms', async (req, res) => {\n    try {\n      const rooms = await storage.getActiveGroupRooms();\n      res.json(rooms);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.post('/api/rooms', requireAuth, async (req, res) => {\n    try {\n      const roomData = req.body;\n      const room = await storage.createGroupRoom(req.session.userId!, roomData);\n      res.json(room);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid input' });\n    }\n  });\n\n  app.post('/api/rooms/:id/join', requireAuth, async (req, res) => {\n    try {\n      const roomId = req.params.id;\n      await storage.joinRoom(roomId, req.session.userId!);\n      res.json({ message: 'Joined room successfully' });\n    } catch (error) {\n      res.status(400).json({ message: 'Could not join room' });\n    }\n  });\n\n  // Tutor Profile routes\n  app.post('/api/tutors/profile', requireAuth, async (req, res) => {\n    try {\n      const profileData = insertTutorProfileSchema.parse(req.body);\n      const profile = await storage.createTutorProfile(req.session.userId!, profileData);\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid tutor profile data' });\n    }\n  });\n\n  app.get('/api/tutors/profile/me', requireAuth, async (req, res) => {\n    try {\n      const profile = await storage.getTutorProfile(req.session.userId!);\n      res.json(profile || null);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.get('/api/tutors/profile/:id', async (req, res) => {\n    try {\n      const profile = await storage.getTutorProfileById(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ message: 'Tutor profile not found' });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.patch('/api/tutors/profile', requireAuth, async (req, res) => {\n    try {\n      const profile = await storage.getTutorProfile(req.session.userId!);\n      if (!profile) {\n        return res.status(404).json({ message: 'Tutor profile not found' });\n      }\n      \n      await storage.updateTutorProfile(profile.id, req.body);\n      res.json({ message: 'Profile updated successfully' });\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid update data' });\n    }\n  });\n\n  // Tutor Search and Browse routes\n  app.get('/api/tutors/search', async (req, res) => {\n    try {\n      const { subject, minRating, maxRate } = req.query;\n      const filters = {\n        subject: subject as string,\n        minRating: minRating ? parseFloat(minRating as string) : undefined,\n        maxRate: maxRate ? parseFloat(maxRate as string) : undefined\n      };\n      \n      const tutors = await storage.searchTutors(filters);\n      res.json(tutors);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  // Tutor Booking routes\n  app.post('/api/tutors/bookings', requireAuth, async (req, res) => {\n    try {\n      const bookingData = insertTutorBookingSchema.parse(req.body);\n      const booking = await storage.createTutorBooking(req.session.userId!, bookingData);\n      res.json(booking);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid booking data' });\n    }\n  });\n\n  app.get('/api/tutors/bookings/student', requireAuth, async (req, res) => {\n    try {\n      const bookings = await storage.getStudentBookings(req.session.userId!);\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.get('/api/tutors/bookings/tutor', requireAuth, async (req, res) => {\n    try {\n      const profile = await storage.getTutorProfile(req.session.userId!);\n      if (!profile) {\n        return res.status(404).json({ message: 'Tutor profile not found' });\n      }\n      \n      const bookings = await storage.getTutorBookings(profile.id);\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  app.patch('/api/tutors/bookings/:id/status', requireAuth, async (req, res) => {\n    try {\n      const { status } = z.object({ status: z.string() }).parse(req.body);\n      await storage.updateBookingStatus(req.params.id, status);\n      res.json({ message: 'Booking status updated successfully' });\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid status update' });\n    }\n  });\n\n  // Tutor Review routes\n  app.post('/api/tutors/reviews', requireAuth, async (req, res) => {\n    try {\n      const reviewData = insertTutorReviewSchema.parse(req.body);\n      const review = await storage.createTutorReview(req.session.userId!, reviewData);\n      res.json(review);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Invalid review data' });\n    }\n  });\n\n  app.get('/api/tutors/:id/reviews', async (req, res) => {\n    try {\n      const reviews = await storage.getTutorReviews(req.params.id);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Initialize Socket.IO for real-time features\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: process.env.NODE_ENV === 'production' ? false : ['http://localhost:5000'],\n      credentials: true\n    }\n  });\n\n  // Socket.IO middleware for authentication\n  io.use(async (socket, next) => {\n    try {\n      const sessionId = socket.handshake.headers.sessionid;\n      if (!sessionId) {\n        return next(new Error('Authentication required'));\n      }\n      \n      // Here we would validate the session, for now we'll allow all\n      next();\n    } catch (error) {\n      next(new Error('Authentication failed'));\n    }\n  });\n\n  // Store active study room participants\n  const activeRooms = new Map<string, Set<string>>();\n  const userRoomMapping = new Map<string, string>();\n\n  // Handle WebSocket connections\n  io.on('connection', (socket) => {\n    console.log('User connected:', socket.id);\n\n    // Join study room\n    socket.on('join-room', async (data) => {\n      try {\n        const { roomId, userId, userName } = data;\n        \n        // Leave previous room if any\n        const previousRoom = userRoomMapping.get(socket.id);\n        if (previousRoom) {\n          socket.leave(previousRoom);\n          const roomParticipants = activeRooms.get(previousRoom);\n          if (roomParticipants) {\n            roomParticipants.delete(socket.id);\n            socket.to(previousRoom).emit('user-left', {\n              userId: socket.id,\n              participantCount: roomParticipants.size\n            });\n          }\n        }\n\n        // Join new room\n        socket.join(roomId);\n        userRoomMapping.set(socket.id, roomId);\n        \n        if (!activeRooms.has(roomId)) {\n          activeRooms.set(roomId, new Set());\n        }\n        activeRooms.get(roomId)!.add(socket.id);\n\n        // Notify room of new participant\n        socket.to(roomId).emit('user-joined', {\n          userId: socket.id,\n          userName: userName,\n          participantCount: activeRooms.get(roomId)!.size\n        });\n\n        // Send current participant list to new user\n        socket.emit('room-joined', {\n          roomId,\n          participantCount: activeRooms.get(roomId)!.size,\n          participants: Array.from(activeRooms.get(roomId)!)\n        });\n\n        console.log(`User ${userId} joined room ${roomId}`);\n      } catch (error) {\n        socket.emit('error', { message: 'Failed to join room' });\n      }\n    });\n\n    // Handle chat messages\n    socket.on('chat-message', (data) => {\n      const { roomId, message, userId, userName, timestamp } = data;\n      \n      // Broadcast message to room participants\n      socket.to(roomId).emit('chat-message', {\n        id: crypto.randomUUID(),\n        message,\n        userId,\n        userName,\n        timestamp: timestamp || new Date().toISOString()\n      });\n    });\n\n    // Handle WebRTC signaling for video/audio\n    socket.on('webrtc-offer', (data) => {\n      const { roomId, offer, targetUserId } = data;\n      socket.to(targetUserId).emit('webrtc-offer', {\n        offer,\n        fromUserId: socket.id\n      });\n    });\n\n    socket.on('webrtc-answer', (data) => {\n      const { answer, targetUserId } = data;\n      socket.to(targetUserId).emit('webrtc-answer', {\n        answer,\n        fromUserId: socket.id\n      });\n    });\n\n    socket.on('webrtc-ice-candidate', (data) => {\n      const { candidate, targetUserId } = data;\n      socket.to(targetUserId).emit('webrtc-ice-candidate', {\n        candidate,\n        fromUserId: socket.id\n      });\n    });\n\n    // Handle shared document updates\n    socket.on('document-update', (data) => {\n      const { roomId, documentId, content, userId } = data;\n      socket.to(roomId).emit('document-update', {\n        documentId,\n        content,\n        userId,\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Handle cursor/selection sharing\n    socket.on('cursor-update', (data) => {\n      const { roomId, position, selection, userId } = data;\n      socket.to(roomId).emit('cursor-update', {\n        position,\n        selection,\n        userId\n      });\n    });\n\n    // Handle screen sharing\n    socket.on('screen-share-start', (data) => {\n      const { roomId, userId } = data;\n      socket.to(roomId).emit('screen-share-start', {\n        userId,\n        socketId: socket.id\n      });\n    });\n\n    socket.on('screen-share-stop', (data) => {\n      const { roomId, userId } = data;\n      socket.to(roomId).emit('screen-share-stop', {\n        userId,\n        socketId: socket.id\n      });\n    });\n\n    // Handle drawing/whiteboard updates\n    socket.on('whiteboard-update', (data) => {\n      const { roomId, drawingData, userId } = data;\n      socket.to(roomId).emit('whiteboard-update', {\n        drawingData,\n        userId,\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Handle disconnect\n    socket.on('disconnect', () => {\n      console.log('User disconnected:', socket.id);\n      \n      const roomId = userRoomMapping.get(socket.id);\n      if (roomId) {\n        const roomParticipants = activeRooms.get(roomId);\n        if (roomParticipants) {\n          roomParticipants.delete(socket.id);\n          socket.to(roomId).emit('user-left', {\n            userId: socket.id,\n            participantCount: roomParticipants.size\n          });\n          \n          // Clean up empty rooms\n          if (roomParticipants.size === 0) {\n            activeRooms.delete(roomId);\n          }\n        }\n        userRoomMapping.delete(socket.id);\n      }\n    });\n\n    // Handle leaving room explicitly\n    socket.on('leave-room', () => {\n      const roomId = userRoomMapping.get(socket.id);\n      if (roomId) {\n        socket.leave(roomId);\n        const roomParticipants = activeRooms.get(roomId);\n        if (roomParticipants) {\n          roomParticipants.delete(socket.id);\n          socket.to(roomId).emit('user-left', {\n            userId: socket.id,\n            participantCount: roomParticipants.size\n          });\n        }\n        userRoomMapping.delete(socket.id);\n      }\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":39362},"server/storage.ts":{"content":"import { \n  users, \n  studySessions,\n  achievements,\n  userAchievements,\n  calendarEvents,\n  groupStudyRooms,\n  roomParticipants,\n  tutorProfiles,\n  tutorBookings,\n  tutorReviews,\n  type User, \n  type InsertUser,\n  type StudySession,\n  type InsertStudySession,\n  type Achievement,\n  type InsertAchievement,\n  type UserAchievement,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type GroupStudyRoom,\n  type TutorProfile,\n  type InsertTutorProfile,\n  type TutorBooking,\n  type InsertTutorBooking,\n  type TutorReview,\n  type InsertTutorReview\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, gte, lte, count } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\n// Extended interface with CRUD methods for all tables\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserXP(userId: string, xpGained: number): Promise<void>;\n  updateUserStreak(userId: string, streak: number): Promise<void>;\n  updateUserPassword(userId: string, hashedPassword: string): Promise<void>;\n  updateUserAvatar(userId: string, avatarUrl: string): Promise<void>;\n  \n  // Study Sessions\n  createStudySession(userId: string, session: InsertStudySession): Promise<StudySession>;\n  getUserStudySessions(userId: string, limit?: number): Promise<StudySession[]>;\n  \n  // Achievements\n  getAllAchievements(): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  getUserAchievements(userId: string): Promise<(UserAchievement & { achievement: Achievement })[]>;\n  unlockAchievement(userId: string, achievementId: string): Promise<UserAchievement>;\n  \n  // Calendar Events\n  createCalendarEvent(userId: string, event: InsertCalendarEvent): Promise<CalendarEvent>;\n  getUserCalendarEvents(userId: string, startDate?: Date, endDate?: Date): Promise<CalendarEvent[]>;\n  updateCalendarEvent(eventId: string, updates: Partial<CalendarEvent>): Promise<void>;\n  \n  // Group Study Rooms\n  getActiveGroupRooms(): Promise<GroupStudyRoom[]>;\n  createGroupRoom(hostUserId: string, roomData: Partial<GroupStudyRoom>): Promise<GroupStudyRoom>;\n  joinRoom(roomId: string, userId: string): Promise<void>;\n  \n  // Tutor Profiles\n  createTutorProfile(userId: string, profileData: InsertTutorProfile): Promise<TutorProfile>;\n  getTutorProfile(userId: string): Promise<TutorProfile | undefined>;\n  getTutorProfileById(tutorId: string): Promise<TutorProfile | undefined>;\n  updateTutorProfile(tutorId: string, updates: Partial<TutorProfile>): Promise<void>;\n  searchTutors(filters: { subject?: string, minRating?: number, maxRate?: number }): Promise<TutorProfile[]>;\n  \n  // Tutor Bookings\n  createTutorBooking(studentId: string, bookingData: InsertTutorBooking): Promise<TutorBooking>;\n  getTutorBookings(tutorId: string): Promise<TutorBooking[]>;\n  getStudentBookings(studentId: string): Promise<TutorBooking[]>;\n  updateBookingStatus(bookingId: string, status: string): Promise<void>;\n  \n  // Tutor Reviews\n  createTutorReview(studentId: string, reviewData: InsertTutorReview): Promise<TutorReview>;\n  getTutorReviews(tutorId: string): Promise<TutorReview[]>;\n  updateTutorRating(tutorId: string): Promise<void>;\n}\n\n// Database storage implementation following blueprint:javascript_database pattern\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserXP(userId: string, xpGained: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        total_xp: sql`${users.total_xp} + ${xpGained}`,\n        updated_at: new Date() \n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserStreak(userId: string, streak: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        study_streak: streak,\n        longest_streak: sql`GREATEST(${users.longest_streak}, ${streak})`,\n        last_study_date: new Date(),\n        updated_at: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserPassword(userId: string, hashedPassword: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        password: hashedPassword,\n        updated_at: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserAvatar(userId: string, avatarUrl: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        avatar_url: avatarUrl,\n        updated_at: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Study Sessions\n  async createStudySession(userId: string, session: InsertStudySession): Promise<StudySession> {\n    const [newSession] = await db\n      .insert(studySessions)\n      .values({ ...session, user_id: userId })\n      .returning();\n    return newSession;\n  }\n\n  async getUserStudySessions(userId: string, limit = 10): Promise<StudySession[]> {\n    return await db\n      .select()\n      .from(studySessions)\n      .where(eq(studySessions.user_id, userId))\n      .orderBy(desc(studySessions.completed_at))\n      .limit(limit);\n  }\n\n  // Achievements\n  async getAllAchievements(): Promise<Achievement[]> {\n    return await db.select().from(achievements);\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    const [newAchievement] = await db\n      .insert(achievements)\n      .values([achievement])\n      .returning();\n    return newAchievement;\n  }\n\n  async getUserAchievements(userId: string): Promise<(UserAchievement & { achievement: Achievement })[]> {\n    const result = await db\n      .select({\n        id: userAchievements.id,\n        user_id: userAchievements.user_id,\n        achievement_id: userAchievements.achievement_id,\n        unlocked_at: userAchievements.unlocked_at,\n        is_featured: userAchievements.is_featured,\n        achievement: achievements\n      })\n      .from(userAchievements)\n      .leftJoin(achievements, eq(userAchievements.achievement_id, achievements.id))\n      .where(eq(userAchievements.user_id, userId))\n      .orderBy(desc(userAchievements.unlocked_at));\n      \n    return result.map(row => ({\n      ...row,\n      achievement: row.achievement!\n    })) as (UserAchievement & { achievement: Achievement })[];\n  }\n\n  async unlockAchievement(userId: string, achievementId: string): Promise<UserAchievement> {\n    const [newAchievement] = await db\n      .insert(userAchievements)\n      .values({ user_id: userId, achievement_id: achievementId })\n      .returning();\n    return newAchievement;\n  }\n\n  // Calendar Events\n  async createCalendarEvent(userId: string, event: InsertCalendarEvent): Promise<CalendarEvent> {\n    const [newEvent] = await db\n      .insert(calendarEvents)\n      .values({ ...event, user_id: userId })\n      .returning();\n    return newEvent;\n  }\n\n  async getUserCalendarEvents(userId: string, startDate?: Date, endDate?: Date): Promise<CalendarEvent[]> {\n    let conditions = [eq(calendarEvents.user_id, userId)];\n    \n    if (startDate && endDate) {\n      conditions.push(\n        gte(calendarEvents.start_time, startDate),\n        lte(calendarEvents.end_time, endDate)\n      );\n    }\n    \n    return await db\n      .select()\n      .from(calendarEvents)\n      .where(and(...conditions))\n      .orderBy(calendarEvents.start_time);\n  }\n\n  async updateCalendarEvent(eventId: string, updates: Partial<CalendarEvent>): Promise<void> {\n    await db\n      .update(calendarEvents)\n      .set(updates)\n      .where(eq(calendarEvents.id, eventId));\n  }\n\n  // Group Study Rooms\n  async getActiveGroupRooms(): Promise<GroupStudyRoom[]> {\n    return await db\n      .select()\n      .from(groupStudyRooms)\n      .where(eq(groupStudyRooms.is_active, true))\n      .orderBy(desc(groupStudyRooms.created_at));\n  }\n\n  async createGroupRoom(hostUserId: string, roomData: Partial<GroupStudyRoom>): Promise<GroupStudyRoom> {\n    const [newRoom] = await db\n      .insert(groupStudyRooms)\n      .values({ \n        name: roomData.name || 'New Study Room',\n        subject: roomData.subject || 'General',\n        description: roomData.description,\n        host_user_id: hostUserId,\n        max_participants: roomData.max_participants || 8,\n        level_requirement: roomData.level_requirement || 'Beginner'\n      })\n      .returning();\n    return newRoom;\n  }\n\n  async joinRoom(roomId: string, userId: string): Promise<void> {\n    await db\n      .insert(roomParticipants)\n      .values({ room_id: roomId, user_id: userId });\n    \n    // Update participant count\n    const participantCount = await db\n      .select({ count: count() })\n      .from(roomParticipants)\n      .where(and(\n        eq(roomParticipants.room_id, roomId),\n        eq(roomParticipants.is_active, true)\n      ));\n      \n    await db\n      .update(groupStudyRooms)\n      .set({ current_participants: participantCount[0].count })\n      .where(eq(groupStudyRooms.id, roomId));\n  }\n\n  // Tutor Profiles\n  async createTutorProfile(userId: string, profileData: InsertTutorProfile): Promise<TutorProfile> {\n    const [profile] = await db\n      .insert(tutorProfiles)\n      .values({ ...profileData, user_id: userId })\n      .returning();\n    return profile;\n  }\n\n  async getTutorProfile(userId: string): Promise<TutorProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(tutorProfiles)\n      .where(eq(tutorProfiles.user_id, userId));\n    return profile || undefined;\n  }\n\n  async getTutorProfileById(tutorId: string): Promise<TutorProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(tutorProfiles)\n      .where(eq(tutorProfiles.id, tutorId));\n    return profile || undefined;\n  }\n\n  async updateTutorProfile(tutorId: string, updates: Partial<TutorProfile>): Promise<void> {\n    await db\n      .update(tutorProfiles)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(tutorProfiles.id, tutorId));\n  }\n\n  async searchTutors(filters: { subject?: string, minRating?: number, maxRate?: number }): Promise<TutorProfile[]> {\n    const conditions = [eq(tutorProfiles.is_active, true)];\n    \n    if (filters.subject) {\n      conditions.push(sql`${filters.subject} = ANY(${tutorProfiles.subjects})`);\n    }\n    \n    if (filters.minRating) {\n      conditions.push(gte(tutorProfiles.average_rating, filters.minRating * 100)); // Convert to out of 500\n    }\n    \n    if (filters.maxRate) {\n      conditions.push(lte(tutorProfiles.hourly_rate, filters.maxRate * 100)); // Convert to cents\n    }\n\n    return await db\n      .select()\n      .from(tutorProfiles)\n      .where(and(...conditions))\n      .orderBy(desc(tutorProfiles.average_rating));\n  }\n\n  // Tutor Bookings\n  async createTutorBooking(studentId: string, bookingData: InsertTutorBooking): Promise<TutorBooking> {\n    // Get tutor's current rate\n    const tutor = await this.getTutorProfileById(bookingData.tutor_id);\n    if (!tutor) {\n      throw new Error('Tutor not found');\n    }\n\n    const totalCost = Math.round((bookingData.duration_minutes / 60) * tutor.hourly_rate);\n\n    const [booking] = await db\n      .insert(tutorBookings)\n      .values({\n        ...bookingData,\n        student_id: studentId,\n        hourly_rate: tutor.hourly_rate,\n        total_cost: totalCost\n      })\n      .returning();\n    return booking;\n  }\n\n  async getTutorBookings(tutorId: string): Promise<TutorBooking[]> {\n    return await db\n      .select()\n      .from(tutorBookings)\n      .where(eq(tutorBookings.tutor_id, tutorId))\n      .orderBy(desc(tutorBookings.session_date));\n  }\n\n  async getStudentBookings(studentId: string): Promise<TutorBooking[]> {\n    return await db\n      .select()\n      .from(tutorBookings)\n      .where(eq(tutorBookings.student_id, studentId))\n      .orderBy(desc(tutorBookings.session_date));\n  }\n\n  async updateBookingStatus(bookingId: string, status: string): Promise<void> {\n    await db\n      .update(tutorBookings)\n      .set({ status, updated_at: new Date() })\n      .where(eq(tutorBookings.id, bookingId));\n  }\n\n  // Tutor Reviews\n  async createTutorReview(studentId: string, reviewData: InsertTutorReview): Promise<TutorReview> {\n    const [review] = await db\n      .insert(tutorReviews)\n      .values({\n        ...reviewData,\n        student_id: studentId,\n      })\n      .returning();\n\n    // Update tutor's average rating\n    await this.updateTutorRating(reviewData.tutor_id);\n    \n    return review;\n  }\n\n  async getTutorReviews(tutorId: string): Promise<TutorReview[]> {\n    return await db\n      .select()\n      .from(tutorReviews)\n      .where(eq(tutorReviews.tutor_id, tutorId))\n      .orderBy(desc(tutorReviews.created_at));\n  }\n\n  async updateTutorRating(tutorId: string): Promise<void> {\n    const reviews = await this.getTutorReviews(tutorId);\n    \n    if (reviews.length > 0) {\n      const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;\n      \n      await db\n        .update(tutorProfiles)\n        .set({\n          average_rating: Math.round(averageRating * 100), // Convert to out of 500 (5.0 = 500)\n          total_reviews: reviews.length,\n          updated_at: new Date()\n        })\n        .where(eq(tutorProfiles.id, tutorId));\n    }\n  }\n}\n\n// Keep MemStorage for backwards compatibility during transition\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser,\n      id,\n      email: insertUser.email || null,\n      avatar_url: null,\n      display_name: insertUser.display_name || null,\n      study_level: 1,\n      total_xp: 0,\n      study_streak: 0,\n      longest_streak: 0,\n      last_study_date: null,\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Placeholder implementations for extended interface\n  async updateUserXP(userId: string, xpGained: number): Promise<void> {}\n  async updateUserStreak(userId: string, streak: number): Promise<void> {}\n  async updateUserPassword(userId: string, hashedPassword: string): Promise<void> {}\n  async updateUserAvatar(userId: string, avatarUrl: string): Promise<void> {}\n  async createStudySession(userId: string, session: InsertStudySession): Promise<StudySession> {\n    throw new Error('Study sessions not supported in memory storage');\n  }\n  async getUserStudySessions(userId: string, limit?: number): Promise<StudySession[]> { return []; }\n  async getAllAchievements(): Promise<Achievement[]> { return []; }\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    throw new Error('Achievements not supported in memory storage');\n  }\n  async getUserAchievements(userId: string): Promise<(UserAchievement & { achievement: Achievement })[]> { return []; }\n  async unlockAchievement(userId: string, achievementId: string): Promise<UserAchievement> {\n    throw new Error('Achievements not supported in memory storage');\n  }\n  async createCalendarEvent(userId: string, event: InsertCalendarEvent): Promise<CalendarEvent> {\n    throw new Error('Calendar events not supported in memory storage');\n  }\n  async getUserCalendarEvents(userId: string, startDate?: Date, endDate?: Date): Promise<CalendarEvent[]> { return []; }\n  async updateCalendarEvent(eventId: string, updates: Partial<CalendarEvent>): Promise<void> {}\n  async getActiveGroupRooms(): Promise<GroupStudyRoom[]> { return []; }\n  async createGroupRoom(hostUserId: string, roomData: Partial<GroupStudyRoom>): Promise<GroupStudyRoom> {\n    throw new Error('Group rooms not supported in memory storage');\n  }\n  async joinRoom(roomId: string, userId: string): Promise<void> {}\n  \n  // Tutor Profiles - placeholder implementations\n  async createTutorProfile(userId: string, profileData: InsertTutorProfile): Promise<TutorProfile> {\n    throw new Error('Tutor profiles not supported in memory storage');\n  }\n  async getTutorProfile(userId: string): Promise<TutorProfile | undefined> { return undefined; }\n  async getTutorProfileById(tutorId: string): Promise<TutorProfile | undefined> { return undefined; }\n  async updateTutorProfile(tutorId: string, updates: Partial<TutorProfile>): Promise<void> {}\n  async searchTutors(filters: { subject?: string, minRating?: number, maxRate?: number }): Promise<TutorProfile[]> { return []; }\n  \n  // Tutor Bookings - placeholder implementations\n  async createTutorBooking(studentId: string, bookingData: InsertTutorBooking): Promise<TutorBooking> {\n    throw new Error('Tutor bookings not supported in memory storage');\n  }\n  async getTutorBookings(tutorId: string): Promise<TutorBooking[]> { return []; }\n  async getStudentBookings(studentId: string): Promise<TutorBooking[]> { return []; }\n  async updateBookingStatus(bookingId: string, status: string): Promise<void> {}\n  \n  // Tutor Reviews - placeholder implementations\n  async createTutorReview(studentId: string, reviewData: InsertTutorReview): Promise<TutorReview> {\n    throw new Error('Tutor reviews not supported in memory storage');\n  }\n  async getTutorReviews(tutorId: string): Promise<TutorReview[]> { return []; }\n  async updateTutorRating(tutorId: string): Promise<void> {}\n}\n\n// Use DatabaseStorage for production persistence - following blueprint:javascript_database\nexport const storage = new DatabaseStorage();\n","size_bytes":18550},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  avatar_url: text(\"avatar_url\"),\n  display_name: text(\"display_name\"),\n  study_level: integer(\"study_level\").default(1),\n  total_xp: integer(\"total_xp\").default(0),\n  study_streak: integer(\"study_streak\").default(0),\n  longest_streak: integer(\"longest_streak\").default(0),\n  last_study_date: timestamp(\"last_study_date\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const studySessions = pgTable(\"study_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  subject: text(\"subject\").notNull(),\n  duration_minutes: integer(\"duration_minutes\").notNull(),\n  xp_earned: integer(\"xp_earned\").default(0),\n  session_type: text(\"session_type\").notNull(), // 'solo' | 'group' | 'tutoring'\n  focus_score: integer(\"focus_score\"), // 1-100 rating\n  notes: text(\"notes\"),\n  completed_at: timestamp(\"completed_at\").defaultNow(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  xp_reward: integer(\"xp_reward\").default(0),\n  badge_color: text(\"badge_color\").default('blue'),\n  category: text(\"category\").notNull(), // 'streak' | 'xp' | 'social' | 'focus'\n  unlock_criteria: jsonb(\"unlock_criteria\").notNull(), // JSON criteria for unlocking\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  achievement_id: varchar(\"achievement_id\").notNull().references(() => achievements.id),\n  unlocked_at: timestamp(\"unlocked_at\").defaultNow(),\n  is_featured: boolean(\"is_featured\").default(false),\n});\n\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  subject: text(\"subject\").notNull(),\n  start_time: timestamp(\"start_time\").notNull(),\n  end_time: timestamp(\"end_time\").notNull(),\n  session_type: text(\"session_type\").notNull(),\n  status: text(\"status\").default('scheduled'), // 'scheduled' | 'completed' | 'cancelled'\n  reminder_minutes: integer(\"reminder_minutes\").default(15),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const groupStudyRooms = pgTable(\"group_study_rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  subject: text(\"subject\").notNull(),\n  description: text(\"description\"),\n  host_user_id: varchar(\"host_user_id\").notNull().references(() => users.id),\n  max_participants: integer(\"max_participants\").default(8),\n  current_participants: integer(\"current_participants\").default(0),\n  is_active: boolean(\"is_active\").default(true),\n  level_requirement: text(\"level_requirement\").default('Beginner'),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const roomParticipants = pgTable(\"room_participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  room_id: varchar(\"room_id\").notNull().references(() => groupStudyRooms.id),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  joined_at: timestamp(\"joined_at\").defaultNow(),\n  left_at: timestamp(\"left_at\"),\n  is_active: boolean(\"is_active\").default(true),\n});\n\nexport const tutorProfiles = pgTable(\"tutor_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  bio: text(\"bio\").notNull(),\n  hourly_rate: integer(\"hourly_rate\").notNull(), // in cents\n  subjects: text(\"subjects\").array().notNull(),\n  languages: text(\"languages\").array().default([]),\n  education: text(\"education\"),\n  experience_years: integer(\"experience_years\").default(0),\n  availability: jsonb(\"availability\").notNull(), // JSON object for availability schedule\n  timezone: text(\"timezone\").default('UTC'),\n  is_active: boolean(\"is_active\").default(true),\n  total_sessions: integer(\"total_sessions\").default(0),\n  average_rating: integer(\"average_rating\").default(0), // out of 100 (5.0 = 500)\n  total_reviews: integer(\"total_reviews\").default(0),\n  response_time_hours: integer(\"response_time_hours\").default(24),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const tutorBookings = pgTable(\"tutor_bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  student_id: varchar(\"student_id\").notNull().references(() => users.id),\n  tutor_id: varchar(\"tutor_id\").notNull().references(() => tutorProfiles.id),\n  subject: text(\"subject\").notNull(),\n  session_date: timestamp(\"session_date\").notNull(),\n  duration_minutes: integer(\"duration_minutes\").notNull(),\n  hourly_rate: integer(\"hourly_rate\").notNull(), // rate at time of booking\n  total_cost: integer(\"total_cost\").notNull(), // in cents\n  status: text(\"status\").default('pending'), // 'pending' | 'confirmed' | 'completed' | 'cancelled'\n  session_notes: text(\"session_notes\"),\n  meeting_link: text(\"meeting_link\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const tutorReviews = pgTable(\"tutor_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  booking_id: varchar(\"booking_id\").notNull().references(() => tutorBookings.id),\n  student_id: varchar(\"student_id\").notNull().references(() => users.id),\n  tutor_id: varchar(\"tutor_id\").notNull().references(() => tutorProfiles.id),\n  rating: integer(\"rating\").notNull(), // 1-5 scale\n  review_text: text(\"review_text\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  studySessions: many(studySessions),\n  userAchievements: many(userAchievements),\n  calendarEvents: many(calendarEvents),\n  hostedRooms: many(groupStudyRooms),\n  roomParticipations: many(roomParticipants),\n  tutorProfile: one(tutorProfiles),\n  tutorBookingsAsStudent: many(tutorBookings, { relationName: \"studentBookings\" }),\n  tutorReviewsAsStudent: many(tutorReviews, { relationName: \"studentReviews\" }),\n}));\n\nexport const studySessionsRelations = relations(studySessions, ({ one }) => ({\n  user: one(users, {\n    fields: [studySessions.user_id],\n    references: [users.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, {\n    fields: [userAchievements.user_id],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievement_id],\n    references: [achievements.id],\n  }),\n}));\n\nexport const calendarEventsRelations = relations(calendarEvents, ({ one }) => ({\n  user: one(users, {\n    fields: [calendarEvents.user_id],\n    references: [users.id],\n  }),\n}));\n\nexport const groupStudyRoomsRelations = relations(groupStudyRooms, ({ one, many }) => ({\n  host: one(users, {\n    fields: [groupStudyRooms.host_user_id],\n    references: [users.id],\n  }),\n  participants: many(roomParticipants),\n}));\n\nexport const roomParticipantsRelations = relations(roomParticipants, ({ one }) => ({\n  room: one(groupStudyRooms, {\n    fields: [roomParticipants.room_id],\n    references: [groupStudyRooms.id],\n  }),\n  user: one(users, {\n    fields: [roomParticipants.user_id],\n    references: [users.id],\n  }),\n}));\n\nexport const tutorProfilesRelations = relations(tutorProfiles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [tutorProfiles.user_id],\n    references: [users.id],\n  }),\n  bookings: many(tutorBookings),\n  reviews: many(tutorReviews),\n}));\n\nexport const tutorBookingsRelations = relations(tutorBookings, ({ one }) => ({\n  student: one(users, {\n    fields: [tutorBookings.student_id],\n    references: [users.id],\n    relationName: \"studentBookings\",\n  }),\n  tutor: one(tutorProfiles, {\n    fields: [tutorBookings.tutor_id],\n    references: [tutorProfiles.id],\n  }),\n  review: one(tutorReviews),\n}));\n\nexport const tutorReviewsRelations = relations(tutorReviews, ({ one }) => ({\n  booking: one(tutorBookings, {\n    fields: [tutorReviews.booking_id],\n    references: [tutorBookings.id],\n  }),\n  student: one(users, {\n    fields: [tutorReviews.student_id],\n    references: [users.id],\n    relationName: \"studentReviews\",\n  }),\n  tutor: one(tutorProfiles, {\n    fields: [tutorReviews.tutor_id],\n    references: [tutorProfiles.id],\n  }),\n}));\n\n// Zod Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  display_name: true,\n});\n\nexport const insertStudySessionSchema = createInsertSchema(studySessions).pick({\n  subject: true,\n  duration_minutes: true,\n  session_type: true,\n  focus_score: true,\n  notes: true,\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).pick({\n  title: true,\n  subject: true,\n  start_time: true,\n  end_time: true,\n  session_type: true,\n  reminder_minutes: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).pick({\n  name: true,\n  description: true,\n  icon: true,\n  xp_reward: true,\n  badge_color: true,\n  category: true,\n  unlock_criteria: true,\n});\n\nexport const insertTutorProfileSchema = createInsertSchema(tutorProfiles).pick({\n  bio: true,\n  hourly_rate: true,\n  subjects: true,\n  languages: true,\n  education: true,\n  experience_years: true,\n  availability: true,\n  timezone: true,\n  response_time_hours: true,\n});\n\nexport const insertTutorBookingSchema = createInsertSchema(tutorBookings).pick({\n  tutor_id: true,\n  subject: true,\n  session_date: true,\n  duration_minutes: true,\n  session_notes: true,\n});\n\nexport const insertTutorReviewSchema = createInsertSchema(tutorReviews).pick({\n  booking_id: true,\n  rating: true,\n  review_text: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type StudySession = typeof studySessions.$inferSelect;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type GroupStudyRoom = typeof groupStudyRooms.$inferSelect;\nexport type RoomParticipant = typeof roomParticipants.$inferSelect;\nexport type TutorProfile = typeof tutorProfiles.$inferSelect;\nexport type InsertTutorProfile = z.infer<typeof insertTutorProfileSchema>;\nexport type TutorBooking = typeof tutorBookings.$inferSelect;\nexport type InsertTutorBooking = z.infer<typeof insertTutorBookingSchema>;\nexport type TutorReview = typeof tutorReviews.$inferSelect;\nexport type InsertTutorReview = z.infer<typeof insertTutorReviewSchema>;\n","size_bytes":11845},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Header } from \"@/components/Header\";\nimport { AppSidebar } from \"@/components/Sidebar\";\nimport { Dashboard } from \"@/components/Dashboard\";\nimport { SoloStudyWizard } from \"@/components/SoloStudyWizard\";\nimport { StudyCalendar } from \"@/components/StudyCalendar\";\nimport { AuthWrapper } from \"@/components/AuthWrapper\";\nimport { AchievementSystem } from \"@/components/AchievementSystem\";\nimport { GroupStudyRoom } from \"@/components/GroupStudyRoom\";\nimport { TutorMarketplace } from \"@/components/TutorMarketplace\";\nimport { TutorProfileManager } from \"@/components/TutorProfileManager\";\n\nfunction App() {\n  const [currentPath, setCurrentPath] = useState(\"/dashboard\");\n  const [selectedRoom, setSelectedRoom] = useState<{id: string, name: string, subject: string} | null>(null);\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  const handleNavigation = (path: string) => {\n    setCurrentPath(path);\n    console.log(\"Navigating to:\", path);\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthWrapper onAuthStateChange={(user) => console.log('Auth state changed:', user)}>\n          {(user) => (\n            <SidebarProvider style={style as React.CSSProperties}>\n              <div className=\"flex h-screen w-full\">\n                <AppSidebar onNavigate={handleNavigation} />\n                <div className=\"flex flex-col flex-1\">\n                  <Header\n                    user={{\n                      name: user.name,\n                      email: user.email || 'user@studysync.com',\n                      avatar: user.avatar_url || 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n                      streak: user.study_streak || 0,\n                      xp: user.total_xp || 0\n                    }}\n                    onSearch={(query) => console.log('Searching for:', query)}\n                    onNotificationClick={() => console.log('Notifications opened')}\n                  />\n                  <main className=\"flex-1 overflow-auto p-6 bg-background\">\n                {/* Main Content Based on Current Path */}\n                {currentPath === \"/dashboard\" && (\n                  <Dashboard\n                    user={user}\n                    onCreateRoom={() => console.log(\"Creating new study room\")}\n                    onJoinRoom={(roomId) => console.log(\"Joining room:\", roomId)}\n                    onBookTutor={(tutorId) => console.log(\"Booking tutor:\", tutorId)}\n                  />\n                )}\n                \n                {currentPath === \"/calendar\" && (\n                  <StudyCalendar\n                    onEventCreate={(event) => console.log('Event created:', event)}\n                    onEventUpdate={(eventId, updates) => console.log('Event updated:', eventId, updates)}\n                  />\n                )}\n                \n                {currentPath === \"/study-rooms\" && (\n                  selectedRoom ? (\n                    <GroupStudyRoom\n                      roomId={selectedRoom.id}\n                      roomName={selectedRoom.name}\n                      subject={selectedRoom.subject}\n                      onLeaveRoom={() => setSelectedRoom(null)}\n                    />\n                  ) : (\n                    <div className=\"space-y-6\" data-testid=\"study-rooms-page\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h1 className=\"text-3xl font-bold font-['Poppins']\">Study Rooms</h1>\n                          <p className=\"text-gray-600 mt-2\">\n                            Join collaborative study sessions with peers around the world\n                          </p>\n                        </div>\n                        <button \n                          className=\"bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-xl font-medium hover:from-green-700 hover:to-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl\"\n                          onClick={() => console.log('Create room clicked')}\n                        >\n                          ➕ Create Room\n                        </button>\n                      </div>\n\n                      <div className=\"bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-2xl border border-green-200\">\n                        <div className=\"flex items-center gap-3 mb-3\">\n                          <div className=\"w-10 h-10 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center\">\n                            <span className=\"text-white text-xl\">🏠</span>\n                          </div>\n                          <div>\n                            <h3 className=\"font-bold text-lg\">Active Study Rooms</h3>\n                            <p className=\"text-gray-600 text-sm\">Choose a room to join or create your own</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <GroupStudyRoomsGrid \n                        onSelectRoom={(room) => setSelectedRoom({id: room.id, name: room.name, subject: room.subject})}\n                      />\n\n                      <div className=\"grid md:grid-cols-2 gap-6 mt-8\">\n                        <div className=\"bg-white p-6 rounded-2xl border border-gray-200 shadow-sm\">\n                          <h3 className=\"font-bold text-lg mb-3 flex items-center gap-2\">\n                            📚 Study Tips\n                          </h3>\n                          <ul className=\"space-y-2 text-sm text-gray-600\">\n                            <li>• Use headphones for better audio quality</li>\n                            <li>• Keep your camera on to stay engaged</li>\n                            <li>• Share your screen when explaining concepts</li>\n                            <li>• Take breaks every 25-30 minutes</li>\n                          </ul>\n                        </div>\n                        \n                        <div className=\"bg-white p-6 rounded-2xl border border-gray-200 shadow-sm\">\n                          <h3 className=\"font-bold text-lg mb-3 flex items-center gap-2\">\n                            🌟 Benefits\n                          </h3>\n                          <ul className=\"space-y-2 text-sm text-gray-600\">\n                            <li>• Learn from peers and different perspectives</li>\n                            <li>• Stay motivated through accountability</li>\n                            <li>• Improve communication skills</li>\n                            <li>• Build lasting study friendships</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                )}\n                \n                {currentPath === \"/tutors\" && (\n                  <TutorMarketplace \n                    onBookTutor={(tutorId) => console.log('Booking tutor:', tutorId)}\n                  />\n                )}\n                \n                {currentPath === \"/solo-study\" && (\n                  <SoloStudyWizard\n                    onSessionComplete={(duration) => console.log(`Solo study session completed: ${duration} minutes`)}\n                    onSessionStart={() => console.log('Solo study session started')}\n                    onSessionPause={() => console.log('Solo study session paused')}\n                    onExit={() => setCurrentPath(\"/dashboard\")}\n                  />\n                )}\n                \n                {currentPath === \"/group-sessions\" && (\n                  selectedRoom ? (\n                    <GroupStudyRoom\n                      roomId={selectedRoom.id}\n                      roomName={selectedRoom.name}\n                      subject={selectedRoom.subject}\n                      onLeaveRoom={() => setSelectedRoom(null)}\n                    />\n                  ) : (\n                    <div className=\"space-y-6\" data-testid=\"group-sessions-page\">\n                      <div className=\"text-center mb-8\">\n                        <h1 className=\"text-4xl font-bold font-['Poppins'] bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-4\">\n                          👥 Group Study Sessions\n                        </h1>\n                        <p className=\"text-gray-600 text-lg\">\n                          Join live study rooms with students from around the world!\n                        </p>\n                      </div>\n\n                      <GroupStudyRoomsGrid \n                        onSelectRoom={(room) => setSelectedRoom({id: room.id, name: room.name, subject: room.subject})}\n                      />\n                      \n                      <div className=\"text-center\">\n                        <p className=\"text-gray-500 mb-4\">\n                          Don't see a room for your subject? Create your own!\n                        </p>\n                        <button className=\"bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-xl font-medium hover:from-green-700 hover:to-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl\">\n                          ➕ Create New Room\n                        </button>\n                      </div>\n                    </div>\n                  )\n                )}\n                \n                {currentPath === \"/achievements\" && (\n                  <AchievementSystemWrapper\n                    user={user}\n                    onAchievementUnlocked={(achievement) => console.log('Achievement unlocked:', achievement)}\n                  />\n                )}\n                \n                {currentPath === \"/streak\" && (\n                  <div className=\"space-y-4\" data-testid=\"streak-page\">\n                    <h1 className=\"text-3xl font-bold font-['Poppins'] flex items-center gap-2\">\n                      🔥 Study Streak Dashboard\n                    </h1>\n                    <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      <div className=\"bg-gradient-to-br from-orange-50 to-red-50 p-6 rounded-2xl border border-orange-200\">\n                        <div className=\"text-center\">\n                          <div className=\"text-5xl mb-2\">🔥</div>\n                          <div className=\"text-3xl font-bold text-orange-600\">7</div>\n                          <div className=\"text-orange-700 font-medium\">Current Streak</div>\n                          <div className=\"text-sm text-orange-600 mt-1\">Keep it going!</div>\n                        </div>\n                      </div>\n                      <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 p-6 rounded-2xl border border-yellow-200\">\n                        <div className=\"text-center\">\n                          <div className=\"text-5xl mb-2\">⭐</div>\n                          <div className=\"text-3xl font-bold text-yellow-600\">15</div>\n                          <div className=\"text-yellow-700 font-medium\">Longest Streak</div>\n                          <div className=\"text-sm text-yellow-600 mt-1\">Personal best!</div>\n                        </div>\n                      </div>\n                      <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 p-6 rounded-2xl border border-purple-200\">\n                        <div className=\"text-center\">\n                          <div className=\"text-5xl mb-2\">🎯</div>\n                          <div className=\"text-3xl font-bold text-purple-600\">30</div>\n                          <div className=\"text-purple-700 font-medium\">Goal</div>\n                          <div className=\"text-sm text-purple-600 mt-1\">You can do it!</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {currentPath === \"/settings\" && (\n                  <SettingsPage \n                    user={user}\n                    onUpdateProfile={(updates) => console.log('Profile updated:', updates)}\n                    onUpdatePreferences={(prefs) => console.log('Preferences updated:', prefs)}\n                  />\n                )}\n                  </main>\n                </div>\n              </div>\n            </SidebarProvider>\n          )}\n        </AuthWrapper>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\n// Settings Page Component\nfunction SettingsPage({ user, onUpdateProfile, onUpdatePreferences }: { \n  user: any; \n  onUpdateProfile: (updates: any) => void;\n  onUpdatePreferences: (prefs: any) => void;\n}) {\n  const [activeTab, setActiveTab] = useState<string>('profile');\n  const [displayName, setDisplayName] = useState(user.display_name || user.username || '');\n  const [email, setEmail] = useState(user.email || '');\n  const [defaultStudyDuration, setDefaultStudyDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [notifications, setNotifications] = useState(true);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [theme, setTheme] = useState('light');\n\n  const tabs = [\n    { id: 'profile', label: 'Profile', icon: '👤' },\n    { id: 'study', label: 'Study Preferences', icon: '📚' },\n    { id: 'notifications', label: 'Notifications', icon: '🔔' },\n    { id: 'account', label: 'Account', icon: '⚙️' }\n  ];\n\n  const handleSaveProfile = () => {\n    onUpdateProfile({\n      display_name: displayName,\n      email: email\n    });\n  };\n\n  const handleSavePreferences = () => {\n    onUpdatePreferences({\n      defaultStudyDuration,\n      breakDuration,\n      notifications,\n      soundEnabled,\n      theme\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"settings-page\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold font-['Poppins']\">Settings</h1>\n        <p className=\"text-gray-600 mt-2\">Customize your StudySync experience</p>\n      </div>\n\n      {/* Settings Navigation */}\n      <div className=\"bg-white rounded-2xl border border-gray-200 shadow-sm overflow-hidden\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`\n                  py-4 px-2 border-b-2 font-medium text-sm transition-colors\n                  ${activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }\n                `}\n              >\n                <span className=\"mr-2\">{tab.icon}</span>\n                {tab.label}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Profile Tab */}\n          {activeTab === 'profile' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold\">Profile Information</h3>\n              \n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Display Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={displayName}\n                    onChange={(e) => setDisplayName(e.target.value)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Enter your display name\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email Address\n                  </label>\n                  <input\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Enter your email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Avatar</h4>\n                <div className=\"flex items-center gap-4\">\n                  <img \n                    src={user.avatar_url || 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'} \n                    alt=\"Profile\"\n                    className=\"w-16 h-16 rounded-full object-cover\"\n                  />\n                  <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n                    Change Avatar\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <button\n                  onClick={handleSaveProfile}\n                  className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium\"\n                >\n                  Save Profile Changes\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Study Preferences Tab */}\n          {activeTab === 'study' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold\">Study Preferences</h3>\n              \n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Default Study Session Duration (minutes)\n                  </label>\n                  <select\n                    value={defaultStudyDuration}\n                    onChange={(e) => setDefaultStudyDuration(Number(e.target.value))}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value={15}>15 minutes</option>\n                    <option value={25}>25 minutes (Pomodoro)</option>\n                    <option value={30}>30 minutes</option>\n                    <option value={45}>45 minutes</option>\n                    <option value={60}>60 minutes</option>\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Break Duration (minutes)\n                  </label>\n                  <select\n                    value={breakDuration}\n                    onChange={(e) => setBreakDuration(Number(e.target.value))}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value={5}>5 minutes</option>\n                    <option value={10}>10 minutes</option>\n                    <option value={15}>15 minutes</option>\n                    <option value={20}>20 minutes</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Sound Effects</h4>\n                    <p className=\"text-sm text-gray-600\">Play sound when timer starts/stops</p>\n                  </div>\n                  <button\n                    onClick={() => setSoundEnabled(!soundEnabled)}\n                    className={`\n                      relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n                      ${soundEnabled ? 'bg-blue-600' : 'bg-gray-200'}\n                    `}\n                  >\n                    <span\n                      className={`\n                        pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out\n                        ${soundEnabled ? 'translate-x-5' : 'translate-x-0'}\n                      `}\n                    />\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Theme</h4>\n                    <p className=\"text-sm text-gray-600\">Choose your preferred theme</p>\n                  </div>\n                  <select\n                    value={theme}\n                    onChange={(e) => setTheme(e.target.value)}\n                    className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"light\">Light</option>\n                    <option value=\"dark\">Dark</option>\n                    <option value=\"auto\">Auto</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <button\n                  onClick={handleSavePreferences}\n                  className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium\"\n                >\n                  Save Preferences\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Notifications Tab */}\n          {activeTab === 'notifications' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold\">Notification Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Study Reminders</h4>\n                    <p className=\"text-sm text-gray-600\">Get reminded when it's time to study</p>\n                  </div>\n                  <button\n                    onClick={() => setNotifications(!notifications)}\n                    className={`\n                      relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n                      ${notifications ? 'bg-blue-600' : 'bg-gray-200'}\n                    `}\n                  >\n                    <span\n                      className={`\n                        pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out\n                        ${notifications ? 'translate-x-5' : 'translate-x-0'}\n                      `}\n                    />\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Achievement Notifications</h4>\n                    <p className=\"text-sm text-gray-600\">Get notified when you unlock achievements</p>\n                  </div>\n                  <button\n                    className=\"relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 bg-blue-600\"\n                  >\n                    <span className=\"pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out translate-x-5\" />\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Group Study Invites</h4>\n                    <p className=\"text-sm text-gray-600\">Get notified when friends invite you to study sessions</p>\n                  </div>\n                  <button\n                    className=\"relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 bg-blue-600\"\n                  >\n                    <span className=\"pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out translate-x-5\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Account Tab */}\n          {activeTab === 'account' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold\">Account Management</h3>\n              \n              <div className=\"space-y-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Change Password</h4>\n                  <div className=\"space-y-3 max-w-md\">\n                    <input\n                      type=\"password\"\n                      placeholder=\"Current password\"\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                    <input\n                      type=\"password\"\n                      placeholder=\"New password\"\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                    <input\n                      type=\"password\"\n                      placeholder=\"Confirm new password\"\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                    <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n                      Update Password\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-6\">\n                  <h4 className=\"font-medium mb-3\">Account Statistics</h4>\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{user.total_xp || 0}</div>\n                      <div className=\"text-sm text-blue-700\">Total XP</div>\n                    </div>\n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{user.study_streak || 0}</div>\n                      <div className=\"text-sm text-green-700\">Current Streak</div>\n                    </div>\n                    <div className=\"bg-purple-50 p-4 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{user.study_level || 1}</div>\n                      <div className=\"text-sm text-purple-700\">Study Level</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-6\">\n                  <h4 className=\"font-medium mb-3 text-red-600\">Danger Zone</h4>\n                  <div className=\"space-y-3\">\n                    <button className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\">\n                      Log Out\n                    </button>\n                    <div>\n                      <button className=\"bg-red-100 text-red-600 px-4 py-2 rounded-lg hover:bg-red-200 transition-colors border border-red-300\">\n                        Delete Account\n                      </button>\n                      <p className=\"text-sm text-gray-500 mt-1\">This action cannot be undone</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Tutor Marketplace Component\nfunction TutorMarketplace({ onBookTutor }: { \n  onBookTutor: (tutorId: string) => void; \n}) {\n  const [selectedSubject, setSelectedSubject] = useState<string>('all');\n  const [priceRange, setPriceRange] = useState<string>('all');\n\n  // Demo tutors data - in real app this would come from API\n  const tutors = [\n    {\n      id: 'tutor-1',\n      name: 'Dr. Sarah Chen',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b9a1dd96?w=150&h=150&fit=crop&crop=face',\n      subjects: ['Mathematics', 'Physics'],\n      rating: 4.9,\n      reviewCount: 127,\n      hourlyRate: 25,\n      experience: '8 years',\n      description: 'PhD in Mathematics with specialization in calculus and linear algebra. Love making complex concepts simple!',\n      languages: ['English', 'Mandarin'],\n      availability: 'Available now',\n      badges: ['Top Rated', 'Mathematics Expert']\n    },\n    {\n      id: 'tutor-2',\n      name: 'James Wilson',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n      subjects: ['Physics', 'Chemistry'],\n      rating: 4.8,\n      reviewCount: 89,\n      hourlyRate: 22,\n      experience: '5 years',\n      description: 'Physics teacher with passion for lab experiments and real-world applications. Making science fun!',\n      languages: ['English', 'Spanish'],\n      availability: 'Available today',\n      badges: ['Science Expert', 'Lab Specialist']\n    },\n    {\n      id: 'tutor-3',\n      name: 'Maria Rodriguez',\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face',\n      subjects: ['Spanish', 'Literature'],\n      rating: 4.9,\n      reviewCount: 156,\n      hourlyRate: 18,\n      experience: '6 years',\n      description: 'Native Spanish speaker and literature enthusiast. Specializing in conversational practice and exam prep.',\n      languages: ['Spanish', 'English'],\n      availability: 'Available tomorrow',\n      badges: ['Native Speaker', 'Conversation Expert']\n    },\n    {\n      id: 'tutor-4',\n      name: 'Alex Thompson',\n      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\n      subjects: ['Computer Science', 'Mathematics'],\n      rating: 4.7,\n      reviewCount: 93,\n      hourlyRate: 30,\n      experience: '4 years',\n      description: 'Software engineer turned educator. Specializing in programming fundamentals and algorithms.',\n      languages: ['English'],\n      availability: 'Available now',\n      badges: ['Programming Expert', 'Industry Experience']\n    },\n    {\n      id: 'tutor-5',\n      name: 'Emily Davis',\n      avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150&h=150&fit=crop&crop=face',\n      subjects: ['English', 'History'],\n      rating: 4.8,\n      reviewCount: 112,\n      hourlyRate: 20,\n      experience: '7 years',\n      description: 'English literature professor with expertise in essay writing and historical analysis.',\n      languages: ['English', 'French'],\n      availability: 'Available this week',\n      badges: ['Writing Expert', 'Essay Specialist']\n    },\n    {\n      id: 'tutor-6',\n      name: 'Michael Kumar',\n      avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=150&h=150&fit=crop&crop=face',\n      subjects: ['Biology', 'Chemistry'],\n      rating: 4.9,\n      reviewCount: 78,\n      hourlyRate: 24,\n      experience: '3 years',\n      description: 'Medical student with strong foundation in life sciences. Patient and detail-oriented teaching style.',\n      languages: ['English', 'Hindi'],\n      availability: 'Available today',\n      badges: ['Medical Student', 'Life Sciences']\n    }\n  ];\n\n  const subjects = ['all', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Spanish', 'English', 'History', 'Computer Science'];\n  const priceRanges = [\n    { value: 'all', label: 'All Prices' },\n    { value: '0-20', label: '$0 - $20/hr' },\n    { value: '20-30', label: '$20 - $30/hr' },\n    { value: '30+', label: '$30+/hr' }\n  ];\n\n  const filteredTutors = tutors.filter(tutor => {\n    const subjectMatch = selectedSubject === 'all' || tutor.subjects.includes(selectedSubject);\n    \n    let priceMatch = true;\n    if (priceRange === '0-20') priceMatch = tutor.hourlyRate <= 20;\n    else if (priceRange === '20-30') priceMatch = tutor.hourlyRate > 20 && tutor.hourlyRate <= 30;\n    else if (priceRange === '30+') priceMatch = tutor.hourlyRate > 30;\n    \n    return subjectMatch && priceMatch;\n  });\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"tutors-page\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold font-['Poppins'] bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-4\">\n          👨‍🏫 Find Expert Tutors\n        </h1>\n        <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n          Connect with verified tutors from around the world. Get personalized 1-on-1 sessions starting from just $18/hour.\n        </p>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white p-6 rounded-2xl border border-gray-200 shadow-sm\">\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Subject</label>\n            <select \n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              value={selectedSubject}\n              onChange={(e) => setSelectedSubject(e.target.value)}\n            >\n              {subjects.map(subject => (\n                <option key={subject} value={subject}>\n                  {subject === 'all' ? 'All Subjects' : subject}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Price Range</label>\n            <select \n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              value={priceRange}\n              onChange={(e) => setPriceRange(e.target.value)}\n            >\n              {priceRanges.map(range => (\n                <option key={range.value} value={range.value}>\n                  {range.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Results count */}\n      <div className=\"text-gray-600\">\n        Showing {filteredTutors.length} of {tutors.length} tutors\n      </div>\n\n      {/* Tutors Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredTutors.map((tutor) => (\n          <div\n            key={tutor.id}\n            className=\"bg-white rounded-2xl shadow-lg border border-gray-100 hover:shadow-xl transition-all duration-300 overflow-hidden\"\n          >\n            <div className=\"p-6\">\n              {/* Tutor Header */}\n              <div className=\"flex items-start gap-4 mb-4\">\n                <img \n                  src={tutor.avatar} \n                  alt={tutor.name}\n                  className=\"w-16 h-16 rounded-full object-cover\"\n                />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-bold text-lg\">{tutor.name}</h3>\n                  <div className=\"flex items-center gap-1 mb-1\">\n                    <span className=\"text-yellow-500\">⭐</span>\n                    <span className=\"font-medium\">{tutor.rating}</span>\n                    <span className=\"text-gray-500 text-sm\">({tutor.reviewCount} reviews)</span>\n                  </div>\n                  <p className=\"text-gray-600 text-sm\">{tutor.experience} experience</p>\n                </div>\n              </div>\n\n              {/* Subjects */}\n              <div className=\"flex flex-wrap gap-1 mb-3\">\n                {tutor.subjects.map(subject => (\n                  <span \n                    key={subject}\n                    className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\"\n                  >\n                    {subject}\n                  </span>\n                ))}\n              </div>\n\n              {/* Badges */}\n              <div className=\"flex flex-wrap gap-1 mb-3\">\n                {tutor.badges.map(badge => (\n                  <span \n                    key={badge}\n                    className=\"bg-green-100 text-green-700 px-2 py-1 rounded-full text-xs font-medium\"\n                  >\n                    ✓ {badge}\n                  </span>\n                ))}\n              </div>\n\n              {/* Description */}\n              <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\n                {tutor.description}\n              </p>\n\n              {/* Languages */}\n              <div className=\"text-sm text-gray-500 mb-4\">\n                <span className=\"font-medium\">Languages:</span> {tutor.languages.join(', ')}\n              </div>\n\n              {/* Price and Availability */}\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  ${tutor.hourlyRate}<span className=\"text-sm text-gray-500\">/hour</span>\n                </div>\n                <div className=\"text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\n                  {tutor.availability}\n                </div>\n              </div>\n\n              {/* Book Button */}\n              <button\n                onClick={() => onBookTutor(tutor.id)}\n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-xl font-medium hover:from-purple-700 hover:to-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl\"\n              >\n                📅 Book Session\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* How it works */}\n      <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 p-8 rounded-2xl border border-purple-200 mt-12\">\n        <h3 className=\"text-2xl font-bold text-center mb-6\">How It Works</h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center text-white text-xl mx-auto mb-3\">1</div>\n            <h4 className=\"font-bold mb-2\">Choose Your Tutor</h4>\n            <p className=\"text-gray-600 text-sm\">Browse profiles and select the perfect tutor for your needs</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center text-white text-xl mx-auto mb-3\">2</div>\n            <h4 className=\"font-bold mb-2\">Schedule Session</h4>\n            <p className=\"text-gray-600 text-sm\">Pick a time that works for both you and your tutor</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center text-white text-xl mx-auto mb-3\">3</div>\n            <h4 className=\"font-bold mb-2\">Start Learning</h4>\n            <p className=\"text-gray-600 text-sm\">Join your private session and accelerate your learning</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Component to fetch and display real group study rooms\nfunction GroupStudyRoomsGrid({ onSelectRoom }: { \n  onSelectRoom: (room: any) => void; \n}) {\n  // Fetch active group rooms\n  const { data: rooms = [], isLoading } = useQuery({\n    queryKey: ['/api/rooms'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {[1, 2, 3].map(i => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-48 bg-gray-200 rounded-2xl\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const typedRooms = (rooms as any[]) || [];\n\n  // If no rooms exist, show placeholder rooms to demonstrate the UI\n  const displayRooms = typedRooms.length > 0 ? typedRooms : [\n    {\n      id: 'demo-calculus',\n      name: 'Advanced Calculus Study Group',\n      subject: 'Mathematics',\n      current_participants: 8,\n      max_participants: 12,\n      is_active: true,\n      level_requirement: 'Intermediate',\n      host_user_id: 'demo-host-1',\n      description: 'Working through derivatives and integrals together'\n    },\n    {\n      id: 'demo-spanish',\n      name: 'Spanish Conversation Practice',\n      subject: 'Spanish',\n      current_participants: 6,\n      max_participants: 10,\n      is_active: true,\n      level_requirement: 'Beginner',\n      host_user_id: 'demo-host-2',\n      description: 'Improve your speaking skills in a supportive environment'\n    },\n    {\n      id: 'demo-physics',\n      name: 'Physics Problem Solving',\n      subject: 'Physics',\n      current_participants: 5,\n      max_participants: 8,\n      is_active: true,\n      level_requirement: 'Advanced',\n      host_user_id: 'demo-host-3',\n      description: 'Tackle challenging physics problems together'\n    }\n  ];\n\n  return (\n    <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {displayRooms.map((room: any) => {\n        const participants = room.current_participants || 0;\n        const maxParticipants = room.max_participants || 10;\n        const hostName = `Host ${room.host_user_id?.slice(-2) || '01'}`;\n        \n        return (\n          <div\n            key={room.id}\n            className=\"bg-white rounded-2xl shadow-lg border border-gray-100 hover:shadow-xl transition-all duration-300 cursor-pointer overflow-hidden group\"\n            onClick={() => onSelectRoom({id: room.id, name: room.name, subject: room.subject})}\n          >\n            <div className=\"h-2 bg-gradient-to-r from-green-400 to-blue-500\" />\n            <div className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <h3 className=\"font-bold text-lg group-hover:text-blue-600 transition-colors\">\n                  {room.name}\n                </h3>\n                {room.is_active && (\n                  <div className=\"flex items-center gap-1 bg-red-100 text-red-700 px-2 py-1 rounded-full text-xs font-medium\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                    LIVE\n                  </div>\n                )}\n              </div>\n              \n              <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">\n                {room.description}\n              </p>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-blue-600\">{room.subject}</span>\n                  <span className=\"text-sm text-gray-500\">{room.level_requirement}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                      {hostName.split(' ').map(n => n[0]).join('')}\n                    </div>\n                    <span className=\"text-sm text-gray-600\">{hostName}</span>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {participants}/{maxParticipants} students\n                  </div>\n                </div>\n                \n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all duration-500\"\n                    style={{ width: `${Math.min((participants / maxParticipants) * 100, 100)}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Wrapper component to fetch real achievement data\nfunction AchievementSystemWrapper({ user, onAchievementUnlocked }: { \n  user: any; \n  onAchievementUnlocked?: (achievement: any) => void; \n}) {\n  // Fetch all achievements\n  const { data: achievements = [], isLoading: achievementsLoading } = useQuery({\n    queryKey: ['/api/achievements'],\n    enabled: !!user\n  });\n\n  // Fetch user achievements  \n  const { data: userAchievements = [], isLoading: userAchievementsLoading } = useQuery({\n    queryKey: ['/api/achievements/me'],\n    enabled: !!user\n  });\n\n  // Fetch user study sessions for stats calculation\n  const { data: sessions = [], isLoading: sessionsLoading } = useQuery({\n    queryKey: ['/api/sessions/me'],\n    enabled: !!user\n  });\n\n  if (achievementsLoading || userAchievementsLoading || sessionsLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-64 mb-4\"></div>\n          <div className=\"grid grid-cols-3 gap-4\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Type cast and calculate real user stats from sessions and user data\n  const typedSessions = (sessions as any[]) || [];\n  const totalStudyTime = typedSessions.reduce((total: number, session: any) => \n    total + (session.duration_minutes || 0), 0\n  );\n\n  const userStats = {\n    totalXP: user.total_xp || 0,\n    level: user.study_level || 1,\n    streak: user.study_streak || 0,\n    studyTime: totalStudyTime,\n    sessionsCompleted: typedSessions.length,\n    friendsCount: 0, // TODO: Add friends feature\n    tutorSessions: 0 // TODO: Add tutor sessions tracking\n  };\n\n  // Type cast and map backend achievements to frontend format\n  const typedAchievements = (achievements as any[]) || [];\n  const typedUserAchievements = (userAchievements as any[]) || [];\n  \n  const mappedAchievements = typedAchievements.map((achievement: any) => {\n    const isUnlocked = typedUserAchievements.some((ua: any) => ua.achievement_id === achievement.id);\n    const userAchievement = typedUserAchievements.find((ua: any) => ua.achievement_id === achievement.id);\n    \n    return {\n      id: achievement.id,\n      title: achievement.name,\n      description: achievement.description,\n      icon: getAchievementIcon(achievement.icon),\n      category: mapCategory(achievement.category),\n      rarity: mapRarity(achievement.category),\n      points: achievement.xp_reward || 0,\n      requirements: achievement.unlock_criteria || { type: 'unknown', target: 1 },\n      earned: isUnlocked,\n      earnedDate: userAchievement?.unlocked_at || undefined,\n      isNew: false\n    };\n  });\n\n  return (\n    <AchievementSystem\n      achievements={mappedAchievements}\n      userStats={userStats}\n      onAchievementUnlocked={onAchievementUnlocked}\n    />\n  );\n}\n\n// Helper functions\nfunction getAchievementIcon(iconName: string): string {\n  const iconMap: { [key: string]: string } = {\n    'target': '🎯',\n    'flame': '🔥', \n    'sunrise': '🌅',\n    'star': '⭐',\n    'clock': '⏰',\n    'trophy': '🏆',\n    'book': '📚',\n    'heart': '❤️'\n  };\n  return iconMap[iconName] || '🏆';\n}\n\nfunction mapCategory(backendCategory: string): 'study' | 'social' | 'streak' | 'milestone' | 'special' {\n  const categoryMap: { [key: string]: 'study' | 'social' | 'streak' | 'milestone' | 'special' } = {\n    'milestone': 'milestone',\n    'streak': 'streak', \n    'focus': 'study',\n    'xp': 'milestone',\n    'social': 'social'\n  };\n  return categoryMap[backendCategory] || 'milestone';\n}\n\nfunction mapRarity(category: string): 'common' | 'rare' | 'epic' | 'legendary' {\n  // Simple mapping based on category - could be enhanced with more logic\n  const rarityMap: { [key: string]: 'common' | 'rare' | 'epic' | 'legendary' } = {\n    'milestone': 'common',\n    'streak': 'rare',\n    'focus': 'epic', \n    'xp': 'legendary',\n    'social': 'rare'\n  };\n  return rarityMap[category] || 'common';\n}\n\nexport default App;\n","size_bytes":48625},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 248 24% 99%;\n\n  --foreground: 215 25% 27%;\n\n  --border: 210 20% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 215 25% 27%;\n\n  --card-border: 210 20% 85%;\n\n  --sidebar: 210 20% 94%;\n\n  --sidebar-foreground: 215 25% 27%;\n\n  --sidebar-border: 210 20% 83%;\n\n  --sidebar-primary: 239 84% 67%;\n\n  --sidebar-primary-foreground: 210 20% 98%;\n\n  --sidebar-accent: 210 20% 90%;\n\n  --sidebar-accent-foreground: 215 25% 27%;\n\n  --sidebar-ring: 239 84% 67%;\n\n  --popover: 210 20% 92%;\n\n  --popover-foreground: 215 25% 27%;\n\n  --popover-border: 210 20% 81%;\n\n  --primary: 239 69% 64%;\n\n  --primary-foreground: 210 20% 98%;\n\n  --secondary: 210 20% 88%;\n\n  --secondary-foreground: 215 25% 27%;\n\n  --muted: 210 20% 90%;\n\n  --muted-foreground: 215 25% 50%;\n\n  --accent: 239 15% 88%;\n\n  --accent-foreground: 215 25% 27%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 20% 98%;\n\n  --input: 210 20% 78%;\n  --ring: 239 84% 67%;\n  --chart-1: 160 84% 39%;\n  --chart-2: 43 96% 56%;\n  --chart-3: 262 83% 58%;\n  --chart-4: 346 87% 43%;\n  --chart-5: 220 70% 50%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 85% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 85% / 0.08);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 85% / 0.08), 0px 1px 2px -1px hsl(210 20% 85% / 0.12);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 85% / 0.08), 0px 1px 2px -1px hsl(210 20% 85% / 0.12);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 85% / 0.10), 0px 2px 4px -1px hsl(210 20% 85% / 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 85% / 0.12), 0px 4px 6px -1px hsl(210 20% 85% / 0.18);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 85% / 0.15), 0px 8px 10px -1px hsl(210 20% 85% / 0.20);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 85% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 84% 5%;\n\n  --foreground: 210 40% 95%;\n\n  --border: 222 84% 12%;\n\n  --card: 222 84% 8%;\n\n  --card-foreground: 210 40% 95%;\n\n  --card-border: 222 84% 15%;\n\n  --sidebar: 222 84% 6%;\n\n  --sidebar-foreground: 210 40% 95%;\n\n  --sidebar-border: 222 84% 13%;\n\n  --sidebar-primary: 239 84% 67%;\n\n  --sidebar-primary-foreground: 222 84% 5%;\n\n  --sidebar-accent: 222 84% 10%;\n\n  --sidebar-accent-foreground: 210 40% 95%;\n\n  --sidebar-ring: 239 84% 67%;\n\n  --popover: 222 84% 11%;\n\n  --popover-foreground: 210 40% 95%;\n\n  --popover-border: 222 84% 18%;\n\n  --primary: 239 84% 67%;\n\n  --primary-foreground: 222 84% 5%;\n\n  --secondary: 222 84% 14%;\n\n  --secondary-foreground: 210 40% 95%;\n\n  --muted: 222 84% 13%;\n\n  --muted-foreground: 210 40% 65%;\n\n  --accent: 222 15% 15%;\n\n  --accent-foreground: 210 40% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 222 84% 5%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 222 84% 20%;\n  --ring: 239 84% 67%;\n  --chart-1: 160 84% 55%;\n  --chart-2: 43 96% 65%;\n  --chart-3: 262 83% 70%;\n  --chart-4: 346 87% 58%;\n  --chart-5: 220 70% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 84% 5% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 84% 5% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 84% 5% / 0.25), 0px 1px 2px -1px hsl(222 84% 5% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(222 84% 5% / 0.25), 0px 1px 2px -1px hsl(222 84% 5% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(222 84% 5% / 0.30), 0px 2px 4px -1px hsl(222 84% 5% / 0.35);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 84% 5% / 0.35), 0px 4px 6px -1px hsl(222 84% 5% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 84% 5% / 0.40), 0px 8px 10px -1px hsl(222 84% 5% / 0.45);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 84% 5% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10042},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarDays, Users, BookOpen, Timer, TrendingUp, Plus, Sparkles, Heart, Award, Zap, Loader2 } from \"lucide-react\";\nimport { StudyRoomCard, type StudyRoom } from \"./StudyRoomCard\";\nimport { TutorCard, type Tutor } from \"./TutorCard\";\nimport { GamificationPanel, type UserStats } from \"./GamificationPanel\";\nimport { StudyTimer } from \"./StudyTimer\";\nimport { AvatarCompanion, useAvatarCompanion } from \"./AvatarCompanion\";\nimport { PageTransition, StaggeredContainer, StaggeredItem, AnimatedCard, CelebrationEffect } from \"./PageTransition\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string | null;\n  display_name: string | null;\n  avatar_url: string | null;\n  study_level: number | null;\n  total_xp: number | null;\n  study_streak: number | null;\n  longest_streak: number | null;\n  name: string;\n}\n\ninterface DashboardProps {\n  user: User;\n  onCreateRoom?: () => void;\n  onJoinRoom?: (roomId: string) => void;\n  onBookTutor?: (tutorId: string) => void;\n}\n\nexport function Dashboard({ user, onCreateRoom, onJoinRoom, onBookTutor }: DashboardProps) {\n  const [selectedView, setSelectedView] = useState<\"overview\" | \"study-rooms\" | \"tutors\">(\"overview\");\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\n  const companion = useAvatarCompanion();\n  const { toast } = useToast();\n\n  // Fetch user study sessions\n  const { data: userSessions, isLoading: sessionsLoading } = useQuery({\n    queryKey: ['/api/sessions/me'],\n    enabled: !!user\n  });\n\n  // Fetch user achievements\n  const { data: userAchievements, isLoading: achievementsLoading } = useQuery({\n    queryKey: ['/api/achievements/me'],\n    enabled: !!user\n  });\n\n  // Fetch active study rooms\n  const { data: studyRooms, isLoading: roomsLoading } = useQuery({\n    queryKey: ['/api/rooms'],\n    enabled: !!user\n  });\n\n  // Create computed stats from user and API data\n  const userStats: UserStats = {\n    currentStreak: user?.study_streak || 0,\n    longestStreak: user?.longest_streak || 0,\n    totalXP: user?.total_xp || 0,\n    level: user?.study_level || 1,\n    xpToNextLevel: Math.max(0, (((user?.study_level || 1) + 1) * 200) - (user?.total_xp || 0)),\n    totalStudyTime: Array.isArray(userSessions) \n      ? userSessions.reduce((total: number, session: any) => total + (session.duration_minutes || 0), 0) \n      : 0,\n    sessionsCompleted: Array.isArray(userSessions) ? userSessions.length : 0,\n    achievements: Array.isArray(userAchievements) \n      ? userAchievements.map((ua: any) => ({\n          id: ua.achievement.id,\n          title: ua.achievement.name,\n          description: ua.achievement.description,\n          icon: ua.achievement.icon,\n          earned: true,\n          earnedDate: new Date(ua.unlocked_at).toISOString().split('T')[0]\n        })) \n      : []\n  };\n\n  // Welcome user with celebration and motivation\n  useEffect(() => {\n    const welcomeMessages = [\n      \"Welcome back! Ready to conquer your goals today?\",\n      \"Your streak is looking amazing! Let's keep it going!\",\n      \"Time to unlock new achievements! You've got this!\",\n      \"Another day, another opportunity to grow!\"\n    ];\n    const randomMessage = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];\n    setMotivationalMessage(randomMessage);\n    \n    // Show celebration for streak milestones\n    const currentStreak = userStats.currentStreak;\n    if (currentStreak % 7 === 0 && currentStreak > 0) {\n      setShowCelebration(true);\n      companion.celebrate();\n    }\n  }, [companion, userStats.currentStreak]);\n\n  // Transform API study rooms data to match StudyRoom interface\n  const activeStudyRooms: StudyRoom[] = Array.isArray(studyRooms) \n    ? studyRooms.map((room: any) => ({\n        id: room.id,\n        title: room.name,\n        description: room.description || `Join this ${room.subject} study session`,\n        subject: room.subject || 'General',\n        participants: room.current_participants || 0,\n        maxParticipants: room.max_participants || 8,\n        duration: \"2h\", // Default duration - could be enhanced later\n        rating: 4.5, // Default rating - could be enhanced later\n        isPrivate: !room.is_active,\n        host: { name: \"StudySync Host\" }, // Default host - could be enhanced with real host data\n        tags: [room.subject, room.level_requirement || 'Beginner'],\n        hasVideo: true // Default to true\n      }))\n    : [];\n\n  // Show loading state for data that's still loading\n  const isLoading = sessionsLoading || achievementsLoading || roomsLoading;\n\n  // Mock tutors for now - TODO: implement real tutors API\n  const mockTutors: Tutor[] = [\n    {\n      id: \"tutor-1\",\n      name: \"Maria Rodriguez\",\n      rating: 4.9,\n      totalReviews: 127,\n      hourlyRate: 1,\n      subjects: [\"Spanish\", \"Literature\", \"Writing\"],\n      bio: \"Native Spanish speaker with 8+ years of teaching experience.\",\n      availability: \"Mon-Fri 9AM-6PM EAT\",\n      totalSessions: 340,\n      responseTime: \"< 2 hours\",\n      isOnline: true,\n      languages: [\"Spanish\", \"English\"]\n    },\n    {\n      id: \"tutor-2\",\n      name: \"James Wilson\",\n      rating: 4.7,\n      totalReviews: 89,\n      hourlyRate: 1,\n      subjects: [\"Physics\", \"Mathematics\", \"Engineering\"],\n      bio: \"PhD in Physics with expertise in quantum mechanics and applied mathematics.\",\n      availability: \"Weekends 2PM-8PM EAT\",\n      totalSessions: 156,\n      responseTime: \"< 4 hours\",\n      isOnline: false,\n      languages: [\"English\"]\n    }\n  ];\n\n  const quickActions = [\n    {\n      title: \"Start Solo Study\",\n      description: \"Focus time with customizable environment\",\n      icon: BookOpen,\n      color: \"bg-gradient-to-r from-blue-500 to-blue-600\",\n      hoverColor: \"hover:from-blue-600 hover:to-blue-700\",\n      action: () => console.log(\"Start solo study\"),\n      emoji: \"📚\"\n    },\n    {\n      title: \"Join Study Room\",\n      description: \"Collaborate with other students\",\n      icon: Users,\n      color: \"bg-gradient-to-r from-green-500 to-emerald-600\",\n      hoverColor: \"hover:from-green-600 hover:to-emerald-700\",\n      action: () => setSelectedView(\"study-rooms\"),\n      emoji: \"👥\"\n    },\n    {\n      title: \"Book a Tutor\",\n      description: \"Get personalized help for $1/hour\",\n      icon: CalendarDays,\n      color: \"bg-gradient-to-r from-purple-500 to-pink-600\",\n      hoverColor: \"hover:from-purple-600 hover:to-pink-700\",\n      action: () => setSelectedView(\"tutors\"),\n      emoji: \"🎯\"\n    },\n    {\n      title: \"Study Timer\",\n      description: \"Pomodoro and custom timers\",\n      icon: Timer,\n      color: \"bg-gradient-to-r from-orange-500 to-red-600\",\n      hoverColor: \"hover:from-orange-600 hover:to-red-700\",\n      action: () => console.log(\"Open timer\"),\n      emoji: \"⏰\"\n    }\n  ];\n\n  if (selectedView === \"study-rooms\") {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold font-['Poppins']\">Study Rooms</h1>\n            <p className=\"text-muted-foreground\">Join collaborative study sessions with other students</p>\n          </div>\n          <Button\n            onClick={() => {\n              onCreateRoom?.();\n              console.log(\"Create new room\");\n            }}\n            data-testid=\"button-create-room\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Room\n          </Button>\n        </div>\n        \n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <Loader2 className=\"w-8 h-8 animate-spin\" />\n              <span className=\"ml-2\">Loading study rooms...</span>\n            </div>\n          ) : activeStudyRooms.length > 0 ? (\n            activeStudyRooms.map((room: StudyRoom) => (\n              <StudyRoomCard\n                key={room.id}\n                room={room}\n                onJoin={onJoinRoom}\n              />\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>No active study rooms available.</p>\n              <p className=\"text-sm mt-1\">Why not create your own?</p>\n            </div>\n          )}\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          onClick={() => setSelectedView(\"overview\")}\n          data-testid=\"button-back-dashboard\"\n        >\n          Back to Dashboard\n        </Button>\n      </div>\n    );\n  }\n\n  if (selectedView === \"tutors\") {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold font-['Poppins']\">Available Tutors</h1>\n          <p className=\"text-muted-foreground\">Book one-on-one sessions with expert tutors for just $1/hour</p>\n        </div>\n        \n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {mockTutors.map((tutor) => (\n            <TutorCard\n              key={tutor.id}\n              tutor={tutor}\n              onBook={onBookTutor}\n            />\n          ))}\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          onClick={() => setSelectedView(\"overview\")}\n          data-testid=\"button-back-dashboard\"\n        >\n          Back to Dashboard\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <PageTransition className=\"space-y-6\">\n      <CelebrationEffect \n        isVisible={showCelebration} \n        onComplete={() => setShowCelebration(false)}\n      />\n      \n      {/* Enhanced Welcome Section */}\n      <StaggeredContainer className=\"space-y-4\">\n        <StaggeredItem>\n          <motion.div \n            className=\"relative overflow-hidden rounded-2xl bg-gradient-to-r from-purple-600 via-blue-600 to-emerald-600 p-6 text-white\"\n            whileHover={{ scale: 1.02 }}\n            transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n          >\n            <div className=\"absolute inset-0 bg-black/20\" />\n            <div className=\"relative z-10 flex items-center justify-between\">\n              <div className=\"space-y-2\">\n                <motion.h1 \n                  className=\"text-3xl font-bold font-['Poppins']\"\n                  initial={{ x: -20, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ delay: 0.2 }}\n                >\n                  Welcome back, {user?.display_name || user?.name || user?.username}!\n                </motion.h1>\n                <motion.p \n                  className=\"text-white/90 text-lg\"\n                  initial={{ x: -20, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ delay: 0.4 }}\n                >\n                  {motivationalMessage}\n                </motion.p>\n                <motion.div \n                  className=\"flex items-center gap-3 mt-3\"\n                  initial={{ x: -20, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ delay: 0.6 }}\n                >\n                  <Badge className=\"bg-white/20 text-white border-white/30\">\n                    <Sparkles className=\"w-3 h-3 mr-1\" />\n                    {userStats.currentStreak} day streak\n                  </Badge>\n                  <Badge className=\"bg-white/20 text-white border-white/30\">\n                    <Award className=\"w-3 h-3 mr-1\" />\n                    Level {userStats.level}\n                  </Badge>\n                </motion.div>\n              </div>\n              <motion.div\n                className=\"text-6xl opacity-20\"\n                animate={{ \n                  rotate: [0, -5, 5, 0],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              >\n                🚀\n              </motion.div>\n            </div>\n          </motion.div>\n        </StaggeredItem>\n      </StaggeredContainer>\n\n      {/* Enhanced Quick Actions Grid */}\n      <StaggeredContainer className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {quickActions.map((action, index) => (\n          <StaggeredItem key={index} delay={index * 0.1}>\n            <motion.div\n              className=\"group cursor-pointer\"\n              whileHover={{ y: -8 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={action.action}\n              data-testid={`quick-action-${action.title.toLowerCase().replace(' ', '-')}`}\n            >\n              <Card className=\"relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n                <div className={`absolute inset-0 ${action.color} opacity-90`} />\n                <CardContent className=\"relative z-10 p-6 text-white\">\n                  <div className=\"flex flex-col items-center text-center space-y-3\">\n                    <motion.div \n                      className=\"text-4xl\"\n                      animate={{ \n                        scale: [1, 1.1, 1],\n                        rotate: [0, -5, 5, 0]\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        delay: index * 0.5,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      {action.emoji}\n                    </motion.div>\n                    <div>\n                      <h3 className=\"font-bold text-lg font-['Poppins']\">{action.title}</h3>\n                      <p className=\"text-white/80 text-sm mt-1\">{action.description}</p>\n                    </div>\n                    <motion.div \n                      className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center group-hover:bg-white/30 transition-colors\"\n                      whileHover={{ rotate: 360 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <action.icon className=\"w-4 h-4\" />\n                    </motion.div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </StaggeredItem>\n        ))}\n      </StaggeredContainer>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        {/* Main Content Area */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Featured Study Rooms */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  <span>Popular Study Rooms</span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedView(\"study-rooms\")}\n                  data-testid=\"button-view-all-rooms\"\n                >\n                  View All\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                {isLoading ? (\n                  <div className=\"flex items-center justify-center p-4\">\n                    <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n                    <span>Loading...</span>\n                  </div>\n                ) : activeStudyRooms.length > 0 ? (\n                  activeStudyRooms.slice(0, 2).map((room: StudyRoom) => (\n                    <StudyRoomCard key={room.id} room={room} onJoin={onJoinRoom} />\n                  ))\n                ) : (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <p>No active study rooms</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Available Tutors */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <CalendarDays className=\"w-5 h-5\" />\n                  <span>Top Tutors</span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedView(\"tutors\")}\n                  data-testid=\"button-view-all-tutors\"\n                >\n                  View All\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                {mockTutors.slice(0, 2).map((tutor) => (\n                  <TutorCard key={tutor.id} tutor={tutor} onBook={onBookTutor} />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Study Timer */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Timer className=\"w-5 h-5\" />\n                <span>Focus Timer</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <StudyTimer\n                onSessionComplete={(duration) => console.log(`Session completed: ${duration} minutes`)}\n                onSessionStart={() => console.log('Session started')}\n                onSessionPause={() => console.log('Session paused')}\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar - Gamification Panel */}\n        <div className=\"space-y-6\">\n          <GamificationPanel\n            stats={userStats}\n            onViewAchievements={() => console.log('View achievements')}\n          />\n        </div>\n      </div>\n    </PageTransition>\n  );\n}","size_bytes":18140},"client/src/components/GamificationPanel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Trophy, Star, Flame, Target, Clock } from \"lucide-react\";\n\nexport interface UserStats {\n  currentStreak: number;\n  longestStreak: number;\n  totalXP: number;\n  level: number;\n  xpToNextLevel: number;\n  totalStudyTime: number;\n  sessionsCompleted: number;\n  achievements: Achievement[];\n}\n\nexport interface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  earned: boolean;\n  earnedDate?: string;\n  progress?: number;\n  maxProgress?: number;\n}\n\ninterface GamificationPanelProps {\n  stats: UserStats;\n  onViewAchievements?: () => void;\n}\n\nexport function GamificationPanel({ stats, onViewAchievements }: GamificationPanelProps) {\n  const progressPercentage = (stats.xpToNextLevel / (stats.xpToNextLevel + 500)) * 100;\n  \n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n\n  const recentAchievements = stats.achievements.filter(a => a.earned).slice(0, 3);\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"gamification-panel\">\n      {/* XP and Level */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Star className=\"w-5 h-5 text-yellow-500\" />\n            Level {stats.level}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">XP Progress</span>\n            <span className=\"font-medium\">{stats.totalXP} XP</span>\n          </div>\n          <Progress value={progressPercentage} className=\"h-2\" />\n          <div className=\"text-xs text-muted-foreground text-center\">\n            {stats.xpToNextLevel} XP to next level\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Study Streak */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Flame className=\"w-5 h-5 text-orange-500\" />\n            Study Streak\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center space-y-2\">\n            <div className=\"text-3xl font-bold text-orange-500\">{stats.currentStreak}</div>\n            <div className=\"text-sm text-muted-foreground\">days in a row</div>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Best: {stats.longestStreak} days\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Study Stats */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Target className=\"w-5 h-5 text-green-500\" />\n            Study Stats\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{stats.sessionsCompleted}</div>\n              <div className=\"text-xs text-muted-foreground\">Sessions</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-emerald-500\">{formatTime(stats.totalStudyTime)}</div>\n              <div className=\"text-xs text-muted-foreground\">Total Time</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Achievements */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Trophy className=\"w-5 h-5 text-yellow-500\" />\n              <span className=\"text-lg\">Achievements</span>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {stats.achievements.filter(a => a.earned).length}/{stats.achievements.length}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {recentAchievements.map((achievement) => (\n              <div\n                key={achievement.id}\n                className=\"flex items-center gap-3 p-2 rounded-md bg-muted/50\"\n                data-testid={`achievement-${achievement.id}`}\n              >\n                <div className=\"text-lg\">{achievement.icon}</div>\n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-medium\">{achievement.title}</div>\n                  <div className=\"text-xs text-muted-foreground\">{achievement.description}</div>\n                </div>\n              </div>\n            ))}\n            \n            {recentAchievements.length === 0 && (\n              <div className=\"text-center text-sm text-muted-foreground py-4\">\n                Complete your first study session to earn achievements!\n              </div>\n            )}\n            \n            <button\n              onClick={() => {\n                onViewAchievements?.();\n                console.log(\"View all achievements clicked\");\n              }}\n              className=\"w-full text-sm text-primary hover:underline mt-2\"\n              data-testid=\"button-view-achievements\"\n            >\n              View all achievements\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5589},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Search, Settings, LogOut, User } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { ThemeToggle } from \"./ThemeToggle\";\n\ninterface HeaderProps {\n  user?: {\n    name: string;\n    email: string;\n    avatar?: string;\n    streak: number;\n    xp: number;\n  };\n  onSearch?: (query: string) => void;\n  onNotificationClick?: () => void;\n}\n\nexport function Header({ user, onSearch, onNotificationClick }: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(searchQuery);\n    console.log(\"Search triggered:\", searchQuery);\n  };\n\n  return (\n    <header className=\"flex items-center justify-between p-4 bg-card border-b border-border\">\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-sm\">SS</span>\n          </div>\n          <span className=\"font-bold text-xl font-['Poppins'] text-foreground\">StudySync</span>\n        </div>\n        \n        <form onSubmit={handleSearch} className=\"hidden md:flex\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search study rooms, tutors...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-64\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </form>\n      </div>\n\n      <div className=\"flex items-center gap-3\">\n        {user && (\n          <div className=\"hidden sm:flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"bg-emerald-100 text-emerald-700\">\n              {user.streak} day streak\n            </Badge>\n            <Badge variant=\"outline\">\n              {user.xp} XP\n            </Badge>\n          </div>\n        )}\n        \n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => {\n            onNotificationClick?.();\n            console.log(\"Notifications clicked\");\n          }}\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"w-5 h-5\" />\n        </Button>\n        \n        <ThemeToggle />\n        \n        {user ? (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\" data-testid=\"button-profile\">\n                <Avatar className=\"h-9 w-9\">\n                  <AvatarImage src={user.avatar} alt={user.name} />\n                  <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\">\n              <div className=\"flex items-center justify-start gap-2 p-2\">\n                <div className=\"flex flex-col space-y-1 leading-none\">\n                  <p className=\"font-medium\">{user.name}</p>\n                  <p className=\"w-[200px] truncate text-sm text-muted-foreground\">{user.email}</p>\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={() => console.log(\"Profile clicked\")} data-testid=\"menu-profile\">\n                <User className=\"mr-2 h-4 w-4\" />\n                Profile\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => console.log(\"Settings clicked\")} data-testid=\"menu-settings\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Settings\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={() => console.log(\"Logout clicked\")} data-testid=\"menu-logout\">\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Log out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ) : (\n          <div className=\"flex gap-2\">\n            <Button variant=\"ghost\" onClick={() => console.log(\"Login clicked\")} data-testid=\"button-login\">\n              Login\n            </Button>\n            <Button onClick={() => console.log(\"Sign up clicked\")} data-testid=\"button-signup\">\n              Sign Up\n            </Button>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":4918},"client/src/components/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport {\n  Home,\n  Calendar,\n  Users,\n  BookOpen,\n  Settings,\n  Trophy,\n  Clock,\n  Video,\n  FileText,\n  Star,\n  Brain,\n} from \"lucide-react\";\n\ninterface SidebarItem {\n  title: string;\n  url: string;\n  icon: any;\n  badge?: string;\n}\n\ninterface AppSidebarProps {\n  onNavigate?: (path: string) => void;\n}\n\nconst mainItems: SidebarItem[] = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    icon: Home,\n  },\n  {\n    title: \"Calendar\",\n    url: \"/calendar\",\n    icon: Calendar,\n  },\n  {\n    title: \"Study Rooms\",\n    url: \"/study-rooms\",\n    icon: BookOpen,\n    badge: \"Live\",\n  },\n  {\n    title: \"Tutors\",\n    url: \"/tutors\",\n    icon: Users,\n  },\n];\n\nconst studyItems: SidebarItem[] = [\n  {\n    title: \"Solo Study\",\n    url: \"/solo-study\",\n    icon: Brain,\n  },\n  {\n    title: \"Group Sessions\",\n    url: \"/group-sessions\",\n    icon: Video,\n  },\n  {\n    title: \"Study Timer\",\n    url: \"/timer\",\n    icon: Clock,\n  },\n  {\n    title: \"Documents\",\n    url: \"/documents\",\n    icon: FileText,\n  },\n];\n\nconst progressItems: SidebarItem[] = [\n  {\n    title: \"Achievements\",\n    url: \"/achievements\",\n    icon: Trophy,\n  },\n  {\n    title: \"Study Streak\",\n    url: \"/streak\",\n    icon: Star,\n  },\n];\n\nexport function AppSidebar({ onNavigate }: AppSidebarProps) {\n  const [activeItem, setActiveItem] = useState(\"/dashboard\");\n\n  const handleItemClick = (url: string, title: string) => {\n    setActiveItem(url);\n    onNavigate?.(url);\n    console.log(`Navigating to ${title}:`, url);\n  };\n\n  const renderMenuItems = (items: SidebarItem[]) => {\n    return items.map((item) => (\n      <SidebarMenuItem key={item.title}>\n        <SidebarMenuButton\n          onClick={() => handleItemClick(item.url, item.title)}\n          className={`w-full justify-start ${activeItem === item.url ? 'bg-sidebar-accent' : ''}`}\n          data-testid={`sidebar-${item.title.toLowerCase().replace(' ', '-')}`}\n        >\n          <item.icon className=\"w-4 h-4\" />\n          <span>{item.title}</span>\n          {item.badge && (\n            <Badge variant=\"secondary\" className=\"ml-auto bg-emerald-100 text-emerald-700 text-xs\">\n              {item.badge}\n            </Badge>\n          )}\n        </SidebarMenuButton>\n      </SidebarMenuItem>\n    ));\n  };\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Main</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {renderMenuItems(mainItems)}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup>\n          <SidebarGroupLabel>Study</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {renderMenuItems(studyItems)}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup>\n          <SidebarGroupLabel>Progress</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {renderMenuItems(progressItems)}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup className=\"mt-auto\">\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton\n                  onClick={() => handleItemClick(\"/settings\", \"Settings\")}\n                  className={activeItem === \"/settings\" ? 'bg-sidebar-accent' : ''}\n                  data-testid=\"sidebar-settings\"\n                >\n                  <Settings className=\"w-4 h-4\" />\n                  <span>Settings</span>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":4134},"client/src/components/SoloStudy.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Play, Pause, SkipForward, Volume2, Music, Image, Bell, BellOff, \n  Maximize, Minimize, Upload, Youtube, Timer, Settings,\n  Moon, Sun, Waves, Mountain, Coffee, Library, Eye, EyeOff\n} from \"lucide-react\";\nimport { StudyTimer } from \"./StudyTimer\";\n\ninterface SoloStudyProps {\n  onSessionComplete?: (duration: number) => void;\n  onSessionStart?: () => void;\n  onSessionPause?: () => void;\n}\n\ninterface MusicTrack {\n  id: string;\n  title: string;\n  artist?: string;\n  url: string;\n  duration?: number;\n  type: 'local' | 'youtube' | 'spotify';\n}\n\ninterface Wallpaper {\n  id: string;\n  name: string;\n  url: string;\n  category: 'nature' | 'library' | 'minimal' | 'custom';\n  preview: string;\n}\n\nexport function SoloStudy({ onSessionComplete, onSessionStart, onSessionPause }: SoloStudyProps) {\n  // Core state\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isDoNotDisturb, setIsDoNotDisturb] = useState(false);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  \n  // Music state\n  const [currentTrack, setCurrentTrack] = useState<MusicTrack | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState([50]);\n  const [playlist, setPlaylist] = useState<MusicTrack[]>([]);\n  const [spotifyPlaylistUrl, setSpotifyPlaylistUrl] = useState(\"\");\n  const [youtubeUrl, setYoutubeUrl] = useState(\"\");\n  \n  // Wallpaper state\n  const [selectedWallpaper, setSelectedWallpaper] = useState<Wallpaper | null>(null);\n  const [customWallpaper, setCustomWallpaper] = useState<string | null>(null);\n  \n  // Audio refs\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const wallpaperInputRef = useRef<HTMLInputElement>(null);\n  const youtubeIframeRef = useRef<HTMLIFrameElement>(null);\n  const spotifyIframeRef = useRef<HTMLIFrameElement>(null);\n\n  // Pre-loaded study wallpapers\n  const studyWallpapers: Wallpaper[] = [\n    {\n      id: 'forest',\n      name: 'Forest Focus',\n      url: 'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=1920&h=1080&fit=crop',\n      category: 'nature',\n      preview: 'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=300&h=200&fit=crop'\n    },\n    {\n      id: 'library',\n      name: 'Classic Library',\n      url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=1920&h=1080&fit=crop',\n      category: 'library',\n      preview: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=200&fit=crop'\n    },\n    {\n      id: 'minimal',\n      name: 'Clean Minimal',\n      url: 'https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?w=1920&h=1080&fit=crop',\n      category: 'minimal',\n      preview: 'https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?w=300&h=200&fit=crop'\n    },\n    {\n      id: 'ocean',\n      name: 'Ocean Waves',\n      url: 'https://images.unsplash.com/photo-1439066615861-d1af74d74000?w=1920&h=1080&fit=crop',\n      category: 'nature',\n      preview: 'https://images.unsplash.com/photo-1439066615861-d1af74d74000?w=300&h=200&fit=crop'\n    },\n    {\n      id: 'mountains',\n      name: 'Mountain Peace',\n      url: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1920&h=1080&fit=crop',\n      category: 'nature',\n      preview: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=300&h=200&fit=crop'\n    },\n    {\n      id: 'coffee-shop',\n      name: 'Cozy Coffee Shop',\n      url: 'https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=1920&h=1080&fit=crop',\n      category: 'library',\n      preview: 'https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=300&h=200&fit=crop'\n    }\n  ];\n\n  // Fullscreen functionality and keyboard shortcuts\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    const handleKeyboard = (e: KeyboardEvent) => {\n      // Only handle shortcuts when not typing in inputs\n      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) return;\n      \n      switch (e.key.toLowerCase()) {\n        case 'f':\n          if (e.ctrlKey || e.metaKey) {\n            e.preventDefault();\n            toggleFullscreen();\n          }\n          break;\n        case ' ':\n          e.preventDefault();\n          togglePlayPause();\n          break;\n        case 'd':\n          if (e.ctrlKey || e.metaKey) {\n            e.preventDefault();\n            toggleDoNotDisturb();\n          }\n          break;\n        case 'escape':\n          if (isFullscreen) {\n            toggleFullscreen();\n          }\n          break;\n      }\n    };\n\n    // Load user preferences from localStorage\n    const savedPreferences = localStorage.getItem('studySync-soloStudy-preferences');\n    if (savedPreferences) {\n      try {\n        const preferences = JSON.parse(savedPreferences);\n        if (preferences.volume) setVolume([preferences.volume]);\n        if (preferences.wallpaper) {\n          const wallpaper = studyWallpapers.find(w => w.id === preferences.wallpaper);\n          if (wallpaper) setSelectedWallpaper(wallpaper);\n        }\n        if (preferences.doNotDisturb) setIsDoNotDisturb(preferences.doNotDisturb);\n      } catch (error) {\n        console.log('Failed to load preferences:', error);\n      }\n    }\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('keydown', handleKeyboard);\n    \n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n      document.removeEventListener('keydown', handleKeyboard);\n    };\n  }, [isFullscreen]);\n\n  const toggleFullscreen = async () => {\n    try {\n      if (isFullscreen) {\n        await document.exitFullscreen();\n      } else {\n        await document.documentElement.requestFullscreen();\n      }\n    } catch (error) {\n      console.error('Fullscreen toggle failed:', error);\n    }\n  };\n\n  // Save preferences to localStorage\n  const savePreferences = () => {\n    const preferences = {\n      volume: volume[0],\n      wallpaper: selectedWallpaper?.id || null,\n      doNotDisturb: isDoNotDisturb,\n      playlist: playlist.map(track => ({ ...track, url: track.type === 'local' ? null : track.url }))\n    };\n    localStorage.setItem('studySync-soloStudy-preferences', JSON.stringify(preferences));\n  };\n\n  // Auto-save preferences when state changes\n  useEffect(() => {\n    savePreferences();\n  }, [volume, selectedWallpaper, isDoNotDisturb, playlist]);\n\n  // Do Not Disturb mode\n  const toggleDoNotDisturb = () => {\n    setIsDoNotDisturb(!isDoNotDisturb);\n    \n    if (!isDoNotDisturb) {\n      // Enable DND mode\n      if ('Notification' in window && Notification.permission === 'granted') {\n        console.log('Do Not Disturb enabled - notifications will be suppressed');\n      }\n      \n      // Change page title to show focus mode\n      document.title = `🔕 Focus Mode - StudySync`;\n    } else {\n      // Disable DND mode\n      document.title = 'StudySync - Collaborative Study Platform';\n    }\n  };\n\n  // Music functionality\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    Array.from(files).forEach((file) => {\n      if (file.type.startsWith('audio/')) {\n        const url = URL.createObjectURL(file);\n        const newTrack: MusicTrack = {\n          id: Date.now().toString() + Math.random(),\n          title: file.name.replace(/\\.[^/.]+$/, \"\"),\n          url,\n          type: 'local'\n        };\n        \n        setPlaylist(prev => [...prev, newTrack]);\n        \n        if (!currentTrack) {\n          setCurrentTrack(newTrack);\n        }\n      }\n    });\n  };\n\n  const addSpotifyPlaylist = () => {\n    if (!spotifyPlaylistUrl.trim()) return;\n    \n    // Extract playlist ID from Spotify URL\n    const playlistId = spotifyPlaylistUrl.match(/playlist\\/([a-zA-Z0-9]+)/)?.[1];\n    \n    if (playlistId) {\n      const spotifyTrack: MusicTrack = {\n        id: playlistId,\n        title: 'Spotify Playlist',\n        url: spotifyPlaylistUrl,\n        type: 'spotify'\n      };\n      \n      setPlaylist(prev => [...prev, spotifyTrack]);\n      setCurrentTrack(spotifyTrack);\n      setSpotifyPlaylistUrl(\"\");\n    }\n  };\n\n  const addYouTubeTrack = () => {\n    if (!youtubeUrl.trim()) return;\n    \n    // Extract video ID from YouTube URL\n    const videoId = youtubeUrl.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/)?.[1];\n    \n    if (videoId) {\n      const youtubeTrack: MusicTrack = {\n        id: videoId,\n        title: 'YouTube Music',\n        url: `https://www.youtube.com/embed/${videoId}?autoplay=0&controls=1&rel=0&showinfo=0&modestbranding=1`,\n        type: 'youtube'\n      };\n      \n      setPlaylist(prev => [...prev, youtubeTrack]);\n      setCurrentTrack(youtubeTrack);\n      setYoutubeUrl(\"\");\n    }\n  };\n\n  // Get YouTube video title (optional enhancement)\n  const getYouTubeTitle = async (videoId: string) => {\n    try {\n      // This would require YouTube API key - for now using simple title\n      return `YouTube Video ${videoId}`;\n    } catch {\n      return 'YouTube Music';\n    }\n  };\n\n  const togglePlayPause = () => {\n    if (currentTrack?.type === 'local' && audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleVolumeChange = (newVolume: number[]) => {\n    setVolume(newVolume);\n    if (audioRef.current) {\n      audioRef.current.volume = newVolume[0] / 100;\n    }\n  };\n\n  // Wallpaper functionality\n  const handleWallpaperUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.startsWith('image/')) {\n      const url = URL.createObjectURL(file);\n      setCustomWallpaper(url);\n      setSelectedWallpaper({\n        id: 'custom',\n        name: 'Custom Wallpaper',\n        url,\n        category: 'custom',\n        preview: url\n      });\n    }\n  };\n\n  const selectWallpaper = (wallpaper: Wallpaper) => {\n    setSelectedWallpaper(wallpaper);\n    setCustomWallpaper(null);\n  };\n\n  // Timer integration\n  const handleTimerStart = () => {\n    setIsTimerActive(true);\n    onSessionStart?.();\n  };\n\n  const handleTimerPause = () => {\n    setIsTimerActive(false);\n    onSessionPause?.();\n  };\n\n  const handleTimerComplete = (duration: number) => {\n    setIsTimerActive(false);\n    onSessionComplete?.(duration);\n  };\n\n  // Dynamic background style\n  const backgroundStyle = selectedWallpaper ? {\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url(${selectedWallpaper.url})`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundAttachment: 'fixed'\n  } : {};\n\n  const containerClasses = `min-h-screen transition-all duration-300 ${\n    isDoNotDisturb ? 'bg-slate-900' : ''\n  } ${isTimerActive && isDoNotDisturb ? 'animate-pulse' : ''}`;\n\n  return (\n    <div className={containerClasses} style={backgroundStyle}>\n      {/* Fullscreen Controls */}\n      <div className=\"absolute top-4 right-4 z-50 flex gap-2\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleDoNotDisturb}\n          className=\"bg-background/80 backdrop-blur-sm\"\n          data-testid=\"button-dnd-toggle\"\n        >\n          {isDoNotDisturb ? <Bell className=\"w-4 h-4\" /> : <BellOff className=\"w-4 h-4\" />}\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleFullscreen}\n          className=\"bg-background/80 backdrop-blur-sm\"\n          data-testid=\"button-fullscreen-toggle\"\n        >\n          {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n        </Button>\n      </div>\n\n      <div className=\"p-6 min-h-screen\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          {/* Header */}\n          <div className=\"text-center space-y-2\">\n            <h1 className=\"text-4xl font-bold font-['Poppins'] text-white drop-shadow-lg\">\n              Solo Study Session\n            </h1>\n            <p className=\"text-white/80 text-lg drop-shadow-md\">\n              Your personalized focus environment with ambient music and beautiful backgrounds\n            </p>\n            {isDoNotDisturb && (\n              <Badge className=\"bg-red-500/80 text-white backdrop-blur-sm\">\n                Do Not Disturb Mode Active\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"grid gap-6 lg:grid-cols-3\">\n            {/* Main Timer Column */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Timer className=\"w-5 h-5\" />\n                    <span>Focus Timer</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <StudyTimer\n                    onSessionComplete={handleTimerComplete}\n                    onSessionStart={handleTimerStart}\n                    onSessionPause={handleTimerPause}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Music Player */}\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Music className=\"w-5 h-5\" />\n                    <span>Ambient Music</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Tabs defaultValue=\"local\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-3 mb-4\">\n                      <TabsTrigger value=\"local\" data-testid=\"tab-local-music\">Local Files</TabsTrigger>\n                      <TabsTrigger value=\"spotify\" data-testid=\"tab-spotify-music\">Spotify</TabsTrigger>\n                      <TabsTrigger value=\"youtube\" data-testid=\"tab-youtube-music\">YouTube</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"local\" className=\"space-y-4\">\n                      <div className=\"flex gap-2\">\n                        <input\n                          type=\"file\"\n                          ref={fileInputRef}\n                          onChange={handleFileUpload}\n                          accept=\"audio/*\"\n                          multiple\n                          className=\"hidden\"\n                          data-testid=\"input-file-upload\"\n                        />\n                        <Button\n                          onClick={() => fileInputRef.current?.click()}\n                          variant=\"outline\"\n                          className=\"flex-1\"\n                          data-testid=\"button-upload-music\"\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Upload Music Files\n                        </Button>\n                      </div>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"spotify\" className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Spotify Playlist URL</Label>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            placeholder=\"https://open.spotify.com/playlist/...\"\n                            value={spotifyPlaylistUrl}\n                            onChange={(e) => setSpotifyPlaylistUrl(e.target.value)}\n                            data-testid=\"input-spotify-url\"\n                          />\n                          <Button onClick={addSpotifyPlaylist} data-testid=\"button-add-spotify\">\n                            Add\n                          </Button>\n                        </div>\n                      </div>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"youtube\" className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label>YouTube Video/Playlist URL</Label>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            placeholder=\"https://youtube.com/watch?v=...\"\n                            value={youtubeUrl}\n                            onChange={(e) => setYoutubeUrl(e.target.value)}\n                            data-testid=\"input-youtube-url\"\n                          />\n                          <Button onClick={addYouTubeTrack} data-testid=\"button-add-youtube\">\n                            Add\n                          </Button>\n                        </div>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n\n                  {/* Music Player Controls */}\n                  {currentTrack && (\n                    <div className=\"mt-6 p-4 bg-muted/50 rounded-lg space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">{currentTrack.title}</p>\n                          <p className=\"text-sm text-muted-foreground capitalize\">\n                            {currentTrack.type} • {currentTrack.artist || 'Unknown Artist'}\n                          </p>\n                        </div>\n                        <Badge variant=\"secondary\">{currentTrack.type}</Badge>\n                      </div>\n                      \n                      {/* Local Music Controls */}\n                      {currentTrack.type === 'local' && (\n                        <div className=\"flex items-center gap-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={togglePlayPause}\n                            data-testid=\"button-play-pause\"\n                          >\n                            {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                          </Button>\n                          \n                          <div className=\"flex items-center gap-2 flex-1\">\n                            <Volume2 className=\"w-4 h-4\" />\n                            <Slider\n                              value={volume}\n                              onValueChange={handleVolumeChange}\n                              max={100}\n                              step={1}\n                              className=\"flex-1\"\n                              data-testid=\"slider-volume\"\n                            />\n                            <span className=\"text-sm text-muted-foreground w-8\">{volume[0]}%</span>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* YouTube Embedded Player */}\n                      {currentTrack.type === 'youtube' && (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-muted-foreground\">YouTube Music Player</p>\n                          <div className=\"aspect-video bg-black rounded-lg overflow-hidden\">\n                            <iframe\n                              ref={youtubeIframeRef}\n                              src={currentTrack.url}\n                              title={currentTrack.title}\n                              frameBorder=\"0\"\n                              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                              allowFullScreen\n                              className=\"w-full h-full\"\n                              data-testid=\"youtube-player\"\n                            />\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Spotify Embedded Player */}\n                      {currentTrack.type === 'spotify' && (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-muted-foreground\">Spotify Music Player</p>\n                          <div className=\"bg-black rounded-lg overflow-hidden\">\n                            <iframe\n                              ref={spotifyIframeRef}\n                              src={currentTrack.url.replace('/playlist/', '/embed/playlist/')}\n                              width=\"100%\"\n                              height=\"352\"\n                              frameBorder=\"0\"\n                              allowTransparency={true}\n                              allow=\"encrypted-media\"\n                              title={currentTrack.title}\n                              className=\"w-full\"\n                              data-testid=\"spotify-player\"\n                            />\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Playlist Display */}\n                  {playlist.length > 0 && (\n                    <div className=\"mt-4\">\n                      <h4 className=\"font-medium mb-2\">Playlist ({playlist.length} tracks)</h4>\n                      <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                        {playlist.map((track) => (\n                          <div\n                            key={track.id}\n                            className={`p-2 rounded cursor-pointer transition-colors ${\n                              currentTrack?.id === track.id \n                                ? 'bg-primary/20 border border-primary/30' \n                                : 'bg-muted/30 hover:bg-muted/50'\n                            }`}\n                            onClick={() => setCurrentTrack(track)}\n                            data-testid={`track-${track.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm truncate\">{track.title}</span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {track.type}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Wallpaper Selection Sidebar */}\n            <div className=\"space-y-6\">\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Image className=\"w-5 h-5\" />\n                    <span>Study Backgrounds</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Custom Upload */}\n                  <div>\n                    <input\n                      type=\"file\"\n                      ref={wallpaperInputRef}\n                      onChange={handleWallpaperUpload}\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      data-testid=\"input-wallpaper-upload\"\n                    />\n                    <Button\n                      onClick={() => wallpaperInputRef.current?.click()}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      data-testid=\"button-upload-wallpaper\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Upload Custom Background\n                    </Button>\n                  </div>\n\n                  {/* Pre-loaded Wallpapers */}\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {studyWallpapers.map((wallpaper) => (\n                      <div\n                        key={wallpaper.id}\n                        className={`relative rounded-lg overflow-hidden cursor-pointer border-2 transition-all ${\n                          selectedWallpaper?.id === wallpaper.id \n                            ? 'border-primary shadow-lg' \n                            : 'border-transparent hover:border-muted-foreground/30'\n                        }`}\n                        onClick={() => selectWallpaper(wallpaper)}\n                        data-testid={`wallpaper-${wallpaper.id}`}\n                      >\n                        <img\n                          src={wallpaper.preview}\n                          alt={wallpaper.name}\n                          className=\"w-full h-20 object-cover\"\n                        />\n                        <div className=\"absolute inset-0 bg-black/20 flex items-end\">\n                          <p className=\"text-white text-xs p-2 font-medium truncate w-full\">\n                            {wallpaper.name}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {selectedWallpaper && (\n                    <div className=\"text-center\">\n                      <Badge className=\"bg-primary/80 text-white\">\n                        Current: {selectedWallpaper.name}\n                      </Badge>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Study Environment Controls */}\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Settings className=\"w-5 h-5\" />\n                    <span>Environment</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Do Not Disturb</Label>\n                    <Button\n                      variant={isDoNotDisturb ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={toggleDoNotDisturb}\n                      data-testid=\"button-toggle-dnd\"\n                    >\n                      {isDoNotDisturb ? <BellOff className=\"w-4 h-4\" /> : <Bell className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <Label>Fullscreen Mode</Label>\n                    <Button\n                      variant={isFullscreen ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={toggleFullscreen}\n                      data-testid=\"button-toggle-fullscreen\"\n                    >\n                      {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Keyboard Shortcuts Guide */}\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">⌨️ Keyboard Shortcuts</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"text-xs space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Play/Pause</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">Space</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Fullscreen</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">Ctrl+F</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Do Not Disturb</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">Ctrl+D</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Exit Fullscreen</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">Esc</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hidden audio element for local files */}\n      <audio\n        ref={audioRef}\n        src={currentTrack?.type === 'local' ? currentTrack.url : undefined}\n        onEnded={() => setIsPlaying(false)}\n        onPlay={() => setIsPlaying(true)}\n        onPause={() => setIsPlaying(false)}\n      />\n    </div>\n  );\n}","size_bytes":29423},"client/src/components/StudyRoomCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Users, Clock, Star, Video, Lock, Globe } from \"lucide-react\";\n\nexport interface StudyRoom {\n  id: string;\n  title: string;\n  description: string;\n  subject: string;\n  participants: number;\n  maxParticipants: number;\n  duration: string;\n  rating: number;\n  isPrivate: boolean;\n  host: {\n    name: string;\n    avatar?: string;\n  };\n  tags: string[];\n  hasVideo: boolean;\n}\n\ninterface StudyRoomCardProps {\n  room: StudyRoom;\n  onJoin?: (roomId: string) => void;\n  onFavorite?: (roomId: string) => void;\n}\n\nexport function StudyRoomCard({ room, onJoin, onFavorite }: StudyRoomCardProps) {\n  const [isFavorited, setIsFavorited] = useState(false);\n\n  const handleJoin = () => {\n    onJoin?.(room.id);\n    console.log(\"Joining room:\", room.title);\n  };\n\n  const handleFavorite = () => {\n    setIsFavorited(!isFavorited);\n    onFavorite?.(room.id);\n    console.log(\"Favorited room:\", room.title);\n  };\n\n  return (\n    <Card className=\"hover-elevate transition-all duration-200\" data-testid={`card-study-room-${room.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Badge variant=\"secondary\">{room.subject}</Badge>\n              {room.isPrivate ? (\n                <Lock className=\"w-4 h-4 text-muted-foreground\" />\n              ) : (\n                <Globe className=\"w-4 h-4 text-emerald-600\" />\n              )}\n              {room.hasVideo && <Video className=\"w-4 h-4 text-primary\" />}\n            </div>\n            <h3 className=\"font-semibold text-lg mb-1\">{room.title}</h3>\n            <p className=\"text-sm text-muted-foreground line-clamp-2\">{room.description}</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleFavorite}\n            className=\"shrink-0\"\n            data-testid={`button-favorite-${room.id}`}\n          >\n            <Star\n              className={`w-4 h-4 ${isFavorited ? 'fill-yellow-400 text-yellow-400' : 'text-muted-foreground'}`}\n            />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-3\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Users className=\"w-4 h-4\" />\n              <span>{room.participants}/{room.maxParticipants}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-4 h-4\" />\n              <span>{room.duration}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"w-4 h-4 text-yellow-500\" />\n              <span>{room.rating}</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2 mb-3\">\n          <Avatar className=\"w-6 h-6\">\n            <AvatarImage src={room.host.avatar} alt={room.host.name} />\n            <AvatarFallback className=\"text-xs\">{room.host.name[0]}</AvatarFallback>\n          </Avatar>\n          <span className=\"text-sm text-muted-foreground\">Hosted by {room.host.name}</span>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-1\">\n          {room.tags.slice(0, 3).map((tag, index) => (\n            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n          {room.tags.length > 3 && (\n            <Badge variant=\"outline\" className=\"text-xs\">+{room.tags.length - 3}</Badge>\n          )}\n        </div>\n      </CardContent>\n      \n      <CardFooter>\n        <Button\n          onClick={handleJoin}\n          className=\"w-full\"\n          disabled={room.participants >= room.maxParticipants}\n          data-testid={`button-join-${room.id}`}\n        >\n          {room.participants >= room.maxParticipants ? 'Room Full' : 'Join Study Room'}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":4362},"client/src/components/StudyTimer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Pause, Square, RotateCcw, Timer, Coffee } from \"lucide-react\";\n\ninterface StudyTimerProps {\n  onSessionComplete?: (duration: number) => void;\n  onSessionStart?: () => void;\n  onSessionPause?: () => void;\n  focusTime?: number;\n  shortBreak?: number;\n  longBreak?: number;\n  sessions?: number;\n}\n\nexport function StudyTimer({ \n  onSessionComplete, \n  onSessionStart, \n  onSessionPause,\n  focusTime = 25,\n  shortBreak = 5,\n  longBreak = 15,\n  sessions = 4\n}: StudyTimerProps) {\n  const [timeLeft, setTimeLeft] = useState(focusTime * 60); // Use custom focus time\n  const [isRunning, setIsRunning] = useState(false);\n  const [isBreak, setIsBreak] = useState(false);\n  const [customTime, setCustomTime] = useState(\"\");\n  const [sessionType, setSessionType] = useState(\"pomodoro\");\n\n  const presets = {\n    pomodoro: focusTime * 60,\n    short: shortBreak * 60,\n    long: longBreak * 60,\n    break: shortBreak * 60,\n  };\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft((time) => time - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      handleSessionComplete();\n    }\n    \n    return () => clearInterval(interval);\n  }, [isRunning, timeLeft]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleStart = () => {\n    setIsRunning(true);\n    onSessionStart?.();\n    console.log(\"Study session started\");\n  };\n\n  const handlePause = () => {\n    setIsRunning(false);\n    onSessionPause?.();\n    console.log(\"Study session paused\");\n  };\n\n  const handleStop = () => {\n    setIsRunning(false);\n    setTimeLeft(presets[sessionType as keyof typeof presets]);\n    console.log(\"Study session stopped\");\n  };\n\n  const handleReset = () => {\n    setIsRunning(false);\n    setTimeLeft(presets[sessionType as keyof typeof presets]);\n    console.log(\"Timer reset\");\n  };\n\n  const handleSessionComplete = () => {\n    setIsRunning(false);\n    const completedDuration = presets[sessionType as keyof typeof presets];\n    onSessionComplete?.(completedDuration / 60);\n    \n    // Auto-switch to break if it was a study session\n    if (!isBreak) {\n      setIsBreak(true);\n      setTimeLeft(presets.break);\n      setSessionType(\"break\");\n    } else {\n      setIsBreak(false);\n      setTimeLeft(presets.pomodoro);\n      setSessionType(\"pomodoro\");\n    }\n    \n    console.log(\"Session completed!\");\n  };\n\n  const handlePresetChange = (value: string) => {\n    setSessionType(value);\n    setTimeLeft(presets[value as keyof typeof presets]);\n    setIsRunning(false);\n  };\n\n  const handleCustomTime = () => {\n    const minutes = parseInt(customTime);\n    if (minutes && minutes > 0) {\n      setTimeLeft(minutes * 60);\n      setCustomTime(\"\");\n      setIsRunning(false);\n      console.log(`Custom time set: ${minutes} minutes`);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"study-timer\">\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"flex items-center justify-center gap-2\">\n          {isBreak ? (\n            <Coffee className=\"w-5 h-5 text-orange-500\" />\n          ) : (\n            <Timer className=\"w-5 h-5 text-primary\" />\n          )}\n          {isBreak ? \"Break Time\" : \"Study Timer\"}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Timer Display */}\n        <div className=\"text-center\">\n          <div className=\"text-6xl font-mono font-bold text-primary mb-2\">\n            {formatTime(timeLeft)}\n          </div>\n          <Badge variant={isBreak ? \"secondary\" : \"default\"} className=\"text-sm\">\n            {isBreak ? \"Break Mode\" : \"Study Mode\"}\n          </Badge>\n        </div>\n        \n        {/* Timer Controls */}\n        <div className=\"flex justify-center gap-2\">\n          {!isRunning ? (\n            <Button onClick={handleStart} className=\"flex items-center gap-2\" data-testid=\"button-start-timer\">\n              <Play className=\"w-4 h-4\" />\n              Start\n            </Button>\n          ) : (\n            <Button onClick={handlePause} variant=\"secondary\" className=\"flex items-center gap-2\" data-testid=\"button-pause-timer\">\n              <Pause className=\"w-4 h-4\" />\n              Pause\n            </Button>\n          )}\n          \n          <Button onClick={handleStop} variant=\"outline\" className=\"flex items-center gap-2\" data-testid=\"button-stop-timer\">\n            <Square className=\"w-4 h-4\" />\n            Stop\n          </Button>\n          \n          <Button onClick={handleReset} variant=\"ghost\" size=\"icon\" data-testid=\"button-reset-timer\">\n            <RotateCcw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Preset Selection */}\n        <div className=\"space-y-3\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Quick Presets</label>\n            <Select value={sessionType} onValueChange={handlePresetChange}>\n              <SelectTrigger data-testid=\"select-timer-preset\">\n                <SelectValue placeholder=\"Select preset\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pomodoro\">Pomodoro (25 min)</SelectItem>\n                <SelectItem value=\"short\">Short Session (15 min)</SelectItem>\n                <SelectItem value=\"long\">Long Session (45 min)</SelectItem>\n                <SelectItem value=\"break\">Break (5 min)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {/* Custom Time Input */}\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Custom Time (minutes)</label>\n            <div className=\"flex gap-2\">\n              <Input\n                type=\"number\"\n                placeholder=\"30\"\n                value={customTime}\n                onChange={(e) => setCustomTime(e.target.value)}\n                className=\"flex-1\"\n                min=\"1\"\n                max=\"180\"\n                data-testid=\"input-custom-time\"\n              />\n              <Button onClick={handleCustomTime} variant=\"outline\" data-testid=\"button-set-custom-time\">\n                Set\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6794},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    // Check for saved theme preference or default to light\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n    console.log(\"Theme toggled to:\", newTheme);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"w-5 h-5\" />\n      ) : (\n        <Sun className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1244},"client/src/components/TutorCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, Clock, DollarSign, BookOpen, Heart } from \"lucide-react\";\n\nexport interface Tutor {\n  id: string;\n  name: string;\n  avatar?: string;\n  rating: number;\n  totalReviews: number;\n  hourlyRate: number;\n  subjects: string[];\n  bio: string;\n  availability: string;\n  totalSessions: number;\n  responseTime: string;\n  isOnline: boolean;\n  languages: string[];\n}\n\ninterface TutorCardProps {\n  tutor: Tutor;\n  onBook?: (tutorId: string) => void;\n  onFavorite?: (tutorId: string) => void;\n  onViewProfile?: (tutorId: string) => void;\n}\n\nexport function TutorCard({ tutor, onBook, onFavorite, onViewProfile }: TutorCardProps) {\n  const [isFavorited, setIsFavorited] = useState(false);\n\n  const handleBook = () => {\n    onBook?.(tutor.id);\n    console.log(\"Booking tutor:\", tutor.name);\n  };\n\n  const handleFavorite = () => {\n    setIsFavorited(!isFavorited);\n    onFavorite?.(tutor.id);\n    console.log(\"Favorited tutor:\", tutor.name);\n  };\n\n  const handleViewProfile = () => {\n    onViewProfile?.(tutor.id);\n    console.log(\"Viewing profile:\", tutor.name);\n  };\n\n  return (\n    <Card className=\"hover-elevate transition-all duration-200\" data-testid={`card-tutor-${tutor.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"relative\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarImage src={tutor.avatar} alt={tutor.name} />\n              <AvatarFallback>{tutor.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n            </Avatar>\n            <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white ${\n              tutor.isOnline ? 'bg-green-500' : 'bg-gray-400'\n            }`} />\n          </div>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-lg\">{tutor.name}</h3>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-4 h-4 text-yellow-500 fill-yellow-500\" />\n                    <span className=\"font-medium\">{tutor.rating}</span>\n                    <span className=\"text-sm text-muted-foreground\">({tutor.totalReviews})</span>\n                  </div>\n                  <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                    <DollarSign className=\"w-4 h-4\" />\n                    <span>${tutor.hourlyRate}/hr</span>\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleFavorite}\n                data-testid={`button-favorite-tutor-${tutor.id}`}\n              >\n                <Heart className={`w-4 h-4 ${isFavorited ? 'fill-red-500 text-red-500' : 'text-muted-foreground'}`} />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-3\">\n        <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{tutor.bio}</p>\n        \n        <div className=\"space-y-2 mb-3\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">{tutor.totalSessions} sessions completed</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Responds in {tutor.responseTime}</span>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Subjects:</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {tutor.subjects.slice(0, 3).map((subject, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {subject}\n                </Badge>\n              ))}\n              {tutor.subjects.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs\">+{tutor.subjects.length - 3}</Badge>\n              )}\n            </div>\n          </div>\n          \n          <div>\n            <span className=\"text-sm font-medium text-muted-foreground\">Languages:</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {tutor.languages.map((language, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {language}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      \n      <CardFooter className=\"flex gap-2\">\n        <Button\n          variant=\"outline\"\n          onClick={handleViewProfile}\n          className=\"flex-1\"\n          data-testid={`button-view-profile-${tutor.id}`}\n        >\n          View Profile\n        </Button>\n        <Button\n          onClick={handleBook}\n          className=\"flex-1\"\n          data-testid={`button-book-tutor-${tutor.id}`}\n        >\n          Book Session\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":5554},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/GamificationPanel.tsx":{"content":"import { GamificationPanel } from '../GamificationPanel';\n\nexport default function GamificationPanelExample() {\n  //todo: remove mock functionality - replace with real user stats\n  const mockStats = {\n    currentStreak: 7,\n    longestStreak: 15,\n    totalXP: 1250,\n    level: 8,\n    xpToNextLevel: 250,\n    totalStudyTime: 840, // minutes\n    sessionsCompleted: 23,\n    achievements: [\n      {\n        id: \"first-session\",\n        title: \"First Steps\",\n        description: \"Complete your first study session\",\n        icon: \"🎯\",\n        earned: true,\n        earnedDate: \"2024-01-15\"\n      },\n      {\n        id: \"week-streak\",\n        title: \"Week Warrior\",\n        description: \"Study for 7 days in a row\",\n        icon: \"🔥\",\n        earned: true,\n        earnedDate: \"2024-01-22\"\n      },\n      {\n        id: \"early-bird\",\n        title: \"Early Bird\",\n        description: \"Start a study session before 7 AM\",\n        icon: \"🌅\",\n        earned: true,\n        earnedDate: \"2024-01-20\"\n      },\n      {\n        id: \"night-owl\",\n        title: \"Night Owl\",\n        description: \"Study after 10 PM\",\n        icon: \"🦉\",\n        earned: false,\n        progress: 2,\n        maxProgress: 5\n      }\n    ]\n  };\n\n  return (\n    <div className=\"max-w-xs\">\n      <GamificationPanel\n        stats={mockStats}\n        onViewAchievements={() => console.log('View all achievements clicked')}\n      />\n    </div>\n  );\n}","size_bytes":1417},"client/src/components/examples/Header.tsx":{"content":"import { Header } from '../Header';\n\nexport default function HeaderExample() {\n  //todo: remove mock functionality - replace with real user data\n  const mockUser = {\n    name: \"Alex Johnson\",\n    email: \"alex.johnson@studysync.com\",\n    avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face\",\n    streak: 7,\n    xp: 1250\n  };\n\n  return (\n    <Header\n      user={mockUser}\n      onSearch={(query) => console.log('Searching for:', query)}\n      onNotificationClick={() => console.log('Notifications opened')}\n    />\n  );\n}","size_bytes":567},"client/src/components/examples/Sidebar.tsx":{"content":"import { SidebarProvider } from '@/components/ui/sidebar';\nimport { AppSidebar } from '../Sidebar';\n\nexport default function SidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-64 w-full border rounded-md\">\n        <AppSidebar onNavigate={(path) => console.log('Navigating to:', path)} />\n        <main className=\"flex-1 p-4 bg-background\">\n          <p className=\"text-muted-foreground\">Main content area</p>\n        </main>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":626},"client/src/components/examples/StudyRoomCard.tsx":{"content":"import { StudyRoomCard } from '../StudyRoomCard';\n\nexport default function StudyRoomCardExample() {\n  //todo: remove mock functionality - replace with real room data\n  const mockRoom = {\n    id: \"room-1\",\n    title: \"Advanced Calculus Study Group\",\n    description: \"Join us for intensive calculus problem-solving sessions. We'll cover derivatives, integrals, and differential equations.\",\n    subject: \"Mathematics\",\n    participants: 8,\n    maxParticipants: 12,\n    duration: \"2h 30m\",\n    rating: 4.8,\n    isPrivate: false,\n    host: {\n      name: \"Dr. Sarah Chen\",\n      avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b47c?w=150&h=150&fit=crop&crop=face\"\n    },\n    tags: [\"Calculus\", \"Problem Solving\", \"Advanced\", \"University Level\"],\n    hasVideo: true\n  };\n\n  return (\n    <div className=\"max-w-sm\">\n      <StudyRoomCard\n        room={mockRoom}\n        onJoin={(roomId) => console.log('Joining room:', roomId)}\n        onFavorite={(roomId) => console.log('Favorited room:', roomId)}\n      />\n    </div>\n  );\n}","size_bytes":1035},"client/src/components/examples/StudyTimer.tsx":{"content":"import { StudyTimer } from '../StudyTimer';\n\nexport default function StudyTimerExample() {\n  return (\n    <div className=\"max-w-md\">\n      <StudyTimer\n        onSessionComplete={(duration) => console.log(`Session completed: ${duration} minutes`)}\n        onSessionStart={() => console.log('Session started')}\n        onSessionPause={() => console.log('Session paused')}\n      />\n    </div>\n  );\n}","size_bytes":396},"client/src/components/examples/TutorCard.tsx":{"content":"import { TutorCard } from '../TutorCard';\n\nexport default function TutorCardExample() {\n  //todo: remove mock functionality - replace with real tutor data\n  const mockTutor = {\n    id: \"tutor-1\",\n    name: \"Maria Rodriguez\",\n    avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face\",\n    rating: 4.9,\n    totalReviews: 127,\n    hourlyRate: 1, // $1/hour as specified\n    subjects: [\"Spanish\", \"Literature\", \"Writing\", \"Grammar\"],\n    bio: \"Native Spanish speaker with 8+ years of teaching experience. Specializing in conversational Spanish and academic writing for all levels.\",\n    availability: \"Mon-Fri 9AM-6PM EAT\",\n    totalSessions: 340,\n    responseTime: \"< 2 hours\",\n    isOnline: true,\n    languages: [\"Spanish\", \"English\", \"Portuguese\"]\n  };\n\n  return (\n    <div className=\"max-w-sm\">\n      <TutorCard\n        tutor={mockTutor}\n        onBook={(tutorId) => console.log('Booking tutor:', tutorId)}\n        onFavorite={(tutorId) => console.log('Favorited tutor:', tutorId)}\n        onViewProfile={(tutorId) => console.log('Viewing profile:', tutorId)}\n      />\n    </div>\n  );\n}","size_bytes":1134},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/AchievementSystem.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Trophy, \n  Star, \n  Flame, \n  Target, \n  BookOpen, \n  Users, \n  Clock, \n  Zap,\n  Award,\n  Crown,\n  Sparkles,\n  Calendar,\n  Heart,\n  TrendingUp,\n  Gift\n} from \"lucide-react\";\nimport { CelebrationEffect } from \"./PageTransition\";\nimport { useAvatarCompanion } from \"./AvatarCompanion\";\n\nexport interface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  category: 'study' | 'social' | 'streak' | 'milestone' | 'special';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  points: number;\n  requirements: {\n    type: string;\n    target: number;\n    current?: number;\n  };\n  earned: boolean;\n  earnedDate?: string;\n  unlockedAt?: number;\n  isNew?: boolean;\n}\n\ninterface AchievementSystemProps {\n  achievements: Achievement[];\n  userStats: {\n    totalXP: number;\n    level: number;\n    streak: number;\n    studyTime: number;\n    sessionsCompleted: number;\n    friendsCount: number;\n    tutorSessions: number;\n  };\n  onAchievementUnlocked?: (achievement: Achievement) => void;\n}\n\nconst achievementCategories = {\n  study: { name: 'Study Master', icon: BookOpen, color: 'from-blue-500 to-blue-600' },\n  social: { name: 'Social Learner', icon: Users, color: 'from-green-500 to-green-600' },\n  streak: { name: 'Consistency King', icon: Flame, color: 'from-orange-500 to-red-600' },\n  milestone: { name: 'Milestone Achiever', icon: Target, color: 'from-purple-500 to-purple-600' },\n  special: { name: 'Special Edition', icon: Crown, color: 'from-yellow-500 to-yellow-600' }\n};\n\nconst rarityStyles = {\n  common: { \n    border: 'border-gray-300', \n    bg: 'from-gray-50 to-gray-100', \n    glow: 'shadow-gray-200/50',\n    particle: '#9CA3AF'\n  },\n  rare: { \n    border: 'border-blue-300', \n    bg: 'from-blue-50 to-blue-100', \n    glow: 'shadow-blue-200/50',\n    particle: '#3B82F6'\n  },\n  epic: { \n    border: 'border-purple-300', \n    bg: 'from-purple-50 to-purple-100', \n    glow: 'shadow-purple-200/50',\n    particle: '#A855F7'\n  },\n  legendary: { \n    border: 'border-yellow-300', \n    bg: 'from-yellow-50 to-yellow-100', \n    glow: 'shadow-yellow-200/50',\n    particle: '#F59E0B'\n  }\n};\n\nconst predefinedAchievements: Achievement[] = [\n  {\n    id: 'first-session',\n    title: 'First Steps',\n    description: 'Complete your very first study session',\n    icon: '🎯',\n    category: 'milestone',\n    rarity: 'common',\n    points: 100,\n    requirements: { type: 'sessions', target: 1, current: 0 },\n    earned: true,\n    earnedDate: '2024-12-24',\n    isNew: false\n  },\n  {\n    id: 'study-streak-7',\n    title: 'Week Warrior',\n    description: 'Study for 7 days in a row',\n    icon: '🔥',\n    category: 'streak',\n    rarity: 'rare',\n    points: 250,\n    requirements: { type: 'streak', target: 7, current: 7 },\n    earned: true,\n    earnedDate: '2024-12-22',\n    isNew: false\n  },\n  {\n    id: 'study-hours-10',\n    title: 'Time Master',\n    description: 'Study for a total of 10 hours',\n    icon: '⏰',\n    category: 'study',\n    rarity: 'rare',\n    points: 200,\n    requirements: { type: 'studyTime', target: 600, current: 840 },\n    earned: true,\n    earnedDate: '2024-12-20',\n    isNew: false\n  },\n  {\n    id: 'social-butterfly',\n    title: 'Social Butterfly',\n    description: 'Join 5 different study groups',\n    icon: '🦋',\n    category: 'social',\n    rarity: 'epic',\n    points: 300,\n    requirements: { type: 'groupSessions', target: 5, current: 3 },\n    earned: false\n  },\n  {\n    id: 'early-bird',\n    title: 'Early Bird',\n    description: 'Study before 8 AM for 5 days',\n    icon: '🌅',\n    category: 'special',\n    rarity: 'epic',\n    points: 350,\n    requirements: { type: 'earlyStudy', target: 5, current: 2 },\n    earned: false\n  },\n  {\n    id: 'knowledge-seeker',\n    title: 'Knowledge Seeker',\n    description: 'Complete 50 study sessions',\n    icon: '📚',\n    category: 'milestone',\n    rarity: 'legendary',\n    points: 500,\n    requirements: { type: 'sessions', target: 50, current: 23 },\n    earned: false\n  },\n  {\n    id: 'tutor-master',\n    title: 'Tutor\\'s Pet',\n    description: 'Book 10 tutor sessions',\n    icon: '👨‍🏫',\n    category: 'study',\n    rarity: 'epic',\n    points: 300,\n    requirements: { type: 'tutorSessions', target: 10, current: 0 },\n    earned: false\n  },\n  {\n    id: 'study-streak-30',\n    title: 'Streak Legend',\n    description: 'Study for 30 days in a row',\n    icon: '⚡',\n    category: 'streak',\n    rarity: 'legendary',\n    points: 1000,\n    requirements: { type: 'streak', target: 30, current: 7 },\n    earned: false\n  }\n];\n\nexport function AchievementSystem({ achievements = predefinedAchievements, userStats, onAchievementUnlocked }: AchievementSystemProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedAchievement, setSelectedAchievement] = useState<Achievement | null>(null);\n  const [showUnlockDialog, setShowUnlockDialog] = useState(false);\n  const [newlyUnlocked, setNewlyUnlocked] = useState<Achievement | null>(null);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const companion = useAvatarCompanion();\n\n  // Check for newly unlocked achievements\n  useEffect(() => {\n    const checkUnlocks = () => {\n      achievements.forEach(achievement => {\n        if (!achievement.earned && isAchievementUnlocked(achievement, userStats)) {\n          const unlockedAchievement = { ...achievement, earned: true, earnedDate: new Date().toISOString(), isNew: true };\n          setNewlyUnlocked(unlockedAchievement);\n          setShowUnlockDialog(true);\n          setShowCelebration(true);\n          companion.celebrate();\n          onAchievementUnlocked?.(unlockedAchievement);\n        }\n      });\n    };\n\n    checkUnlocks();\n  }, [achievements, userStats, companion, onAchievementUnlocked]);\n\n  const isAchievementUnlocked = (achievement: Achievement, stats: any): boolean => {\n    const req = achievement.requirements;\n    switch (req.type) {\n      case 'sessions':\n        return stats.sessionsCompleted >= req.target;\n      case 'streak':\n        return stats.streak >= req.target;\n      case 'studyTime':\n        return stats.studyTime >= req.target;\n      case 'level':\n        return stats.level >= req.target;\n      case 'xp':\n        return stats.totalXP >= req.target;\n      case 'friends':\n        return stats.friendsCount >= req.target;\n      case 'tutorSessions':\n        return stats.tutorSessions >= req.target;\n      default:\n        return false;\n    }\n  };\n\n  const getProgress = (achievement: Achievement): number => {\n    const req = achievement.requirements;\n    let current = 0;\n    \n    switch (req.type) {\n      case 'sessions':\n        current = userStats.sessionsCompleted;\n        break;\n      case 'streak':\n        current = userStats.streak;\n        break;\n      case 'studyTime':\n        current = userStats.studyTime;\n        break;\n      case 'level':\n        current = userStats.level;\n        break;\n      case 'xp':\n        current = userStats.totalXP;\n        break;\n      case 'friends':\n        current = userStats.friendsCount;\n        break;\n      case 'tutorSessions':\n        current = userStats.tutorSessions;\n        break;\n    }\n    \n    return Math.min((current / req.target) * 100, 100);\n  };\n\n  const filteredAchievements = selectedCategory === 'all' \n    ? achievements \n    : achievements.filter(a => a.category === selectedCategory);\n\n  const earnedCount = achievements.filter(a => a.earned).length;\n  const totalPoints = achievements.filter(a => a.earned).reduce((sum, a) => sum + a.points, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <CelebrationEffect \n        isVisible={showCelebration} \n        onComplete={() => setShowCelebration(false)}\n      />\n\n      {/* Achievement Unlock Dialog */}\n      <Dialog open={showUnlockDialog} onOpenChange={setShowUnlockDialog}>\n        <DialogContent className=\"max-w-md text-center\">\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ type: \"spring\", stiffness: 200, damping: 20 }}\n            className=\"space-y-4\"\n          >\n            <motion.div\n              animate={{ \n                rotate: [0, 360],\n                scale: [1, 1.2, 1]\n              }}\n              transition={{\n                rotate: { duration: 1, ease: \"easeInOut\" },\n                scale: { duration: 0.5, repeat: 1, repeatType: \"reverse\" }\n              }}\n              className=\"text-6xl mb-4\"\n            >\n              🏆\n            </motion.div>\n            \n            <h2 className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n              Achievement Unlocked!\n            </h2>\n            \n            {newlyUnlocked && (\n              <>\n                <div className=\"text-4xl mb-2\">{newlyUnlocked.icon}</div>\n                <h3 className=\"text-xl font-bold\">{newlyUnlocked.title}</h3>\n                <p className=\"text-gray-600\">{newlyUnlocked.description}</p>\n                <Badge className={`bg-gradient-to-r ${rarityStyles[newlyUnlocked.rarity].bg} text-gray-800 border ${rarityStyles[newlyUnlocked.rarity].border}`}>\n                  {newlyUnlocked.rarity.toUpperCase()} • +{newlyUnlocked.points} XP\n                </Badge>\n              </>\n            )}\n            \n            <Button\n              onClick={() => setShowUnlockDialog(false)}\n              className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n            >\n              <Sparkles className=\"w-4 h-4 mr-2\" />\n              Awesome!\n            </Button>\n          </motion.div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Stats Overview */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 border-0\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"w-6 h-6 text-yellow-500\" />\n            Achievement Progress\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">{earnedCount}</div>\n              <div className=\"text-sm text-gray-600\">Earned</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">{achievements.length}</div>\n              <div className=\"text-sm text-gray-600\">Total</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-yellow-600\">{totalPoints}</div>\n              <div className=\"text-sm text-gray-600\">Points</div>\n            </div>\n          </div>\n          <Progress value={(earnedCount / achievements.length) * 100} className=\"mt-4 h-3\" />\n        </CardContent>\n      </Card>\n\n      {/* Category Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant={selectedCategory === 'all' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setSelectedCategory('all')}\n              className=\"rounded-full\"\n            >\n              All Achievements\n            </Button>\n            {Object.entries(achievementCategories).map(([key, category]) => (\n              <Button\n                key={key}\n                variant={selectedCategory === key ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(key)}\n                className=\"rounded-full flex items-center gap-1\"\n              >\n                <category.icon className=\"w-4 h-4\" />\n                {category.name}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Achievements Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredAchievements.map((achievement, index) => {\n          const progress = getProgress(achievement);\n          const rarity = rarityStyles[achievement.rarity];\n          \n          return (\n            <motion.div\n              key={achievement.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"relative\"\n            >\n              <Card \n                className={`\n                  relative overflow-hidden cursor-pointer transition-all duration-300 hover:shadow-lg\n                  ${achievement.earned ? 'shadow-lg ' + rarity.glow : 'opacity-75 hover:opacity-90'}\n                  ${rarity.border} border-2\n                `}\n                onClick={() => setSelectedAchievement(achievement)}\n              >\n                {/* Rarity Glow Effect */}\n                {achievement.earned && (\n                  <div className={`absolute inset-0 bg-gradient-to-br ${rarity.bg} opacity-10`} />\n                )}\n                \n                {/* New Badge */}\n                {achievement.isNew && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"absolute top-2 right-2 z-10\"\n                  >\n                    <Badge className=\"bg-red-500 text-white text-xs\">NEW!</Badge>\n                  </motion.div>\n                )}\n\n                <CardContent className=\"p-4 relative\">\n                  <div className=\"flex items-start gap-3\">\n                    <motion.div\n                      className=\"text-3xl\"\n                      animate={achievement.earned ? {\n                        scale: [1, 1.1, 1],\n                        rotate: [0, 5, -5, 0]\n                      } : {}}\n                      transition={{\n                        duration: 2,\n                        repeat: achievement.earned ? Infinity : 0,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      {achievement.icon}\n                    </motion.div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <h3 className=\"font-bold text-sm truncate\">{achievement.title}</h3>\n                        {achievement.earned && (\n                          <Star className=\"w-4 h-4 text-yellow-500 flex-shrink-0\" />\n                        )}\n                      </div>\n                      \n                      <p className=\"text-xs text-gray-600 mt-1 line-clamp-2\">\n                        {achievement.description}\n                      </p>\n                      \n                      <div className=\"mt-2 space-y-2\">\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-xs ${rarity.border} ${rarity.bg}`}\n                        >\n                          {achievement.rarity.toUpperCase()}\n                        </Badge>\n                        \n                        {!achievement.earned && (\n                          <div className=\"space-y-1\">\n                            <Progress value={progress} className=\"h-1\" />\n                            <div className=\"text-xs text-gray-500\">\n                              {Math.round(progress)}% complete\n                            </div>\n                          </div>\n                        )}\n                        \n                        {achievement.earned && achievement.earnedDate && (\n                          <div className=\"text-xs text-gray-500\">\n                            Earned {new Date(achievement.earnedDate).toLocaleDateString()}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Achievement Detail Dialog */}\n      <Dialog open={!!selectedAchievement} onOpenChange={(open) => !open && setSelectedAchievement(null)}>\n        <DialogContent className=\"max-w-md\">\n          {selectedAchievement && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              className=\"text-center space-y-4\"\n            >\n              <div className=\"text-6xl\">{selectedAchievement.icon}</div>\n              \n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">{selectedAchievement.title}</h2>\n                <p className=\"text-gray-600\">{selectedAchievement.description}</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Badge className={`${rarityStyles[selectedAchievement.rarity].bg} ${rarityStyles[selectedAchievement.rarity].border} text-gray-800`}>\n                  {selectedAchievement.rarity.toUpperCase()} • {selectedAchievement.points} XP\n                </Badge>\n                \n                <Badge variant=\"outline\">\n                  {achievementCategories[selectedAchievement.category].name}\n                </Badge>\n              </div>\n              \n              {!selectedAchievement.earned && (\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm font-medium\">Progress</div>\n                  <Progress value={getProgress(selectedAchievement)} className=\"h-2\" />\n                  <div className=\"text-sm text-gray-500\">\n                    {Math.round(getProgress(selectedAchievement))}% complete\n                  </div>\n                </div>\n              )}\n              \n              {selectedAchievement.earned && selectedAchievement.earnedDate && (\n                <div className=\"text-sm text-gray-500\">\n                  🎉 Earned on {new Date(selectedAchievement.earnedDate).toLocaleDateString()}\n                </div>\n              )}\n              \n              <Button\n                onClick={() => setSelectedAchievement(null)}\n                variant=\"outline\"\n                className=\"mt-4\"\n              >\n                Close\n              </Button>\n            </motion.div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18615},"client/src/components/AuthWrapper.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Sparkles, Mail, Lock, UserPlus, LogIn, Github, Chrome } from \"lucide-react\";\nimport { WelcomeOnboarding } from \"./WelcomeOnboarding\";\nimport { PageTransition } from \"./PageTransition\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string | null;\n  display_name: string | null;\n  avatar_url: string | null;\n  study_level: number | null;\n  total_xp: number | null;\n  study_streak: number | null;\n  longest_streak: number | null;\n  name: string; // computed property for compatibility\n}\n\ninterface AuthWrapperProps {\n  children: (user: User) => React.ReactNode;\n  onAuthStateChange?: (user: User | null) => void;\n}\n\ntype AuthMode = 'login' | 'signup' | 'forgot-password' | 'reset-password' | 'onboarding' | 'authenticated';\n\nexport function AuthWrapper({ children, onAuthStateChange }: AuthWrapperProps) {\n  const [authMode, setAuthMode] = useState<AuthMode>('login');\n  const [user, setUser] = useState<User | null>(null);\n  const [credentials, setCredentials] = useState({ username: '', email: '', password: '', display_name: '' });\n  const [resetEmail, setResetEmail] = useState('');\n  const [resetToken, setResetToken] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCheckingAuth, setIsCheckingAuth] = useState(true);\n  const { toast } = useToast();\n\n  // Check authentication state on load\n  useEffect(() => {\n    checkAuthState();\n  }, []);\n\n  const checkAuthState = async () => {\n    try {\n      const response = await fetch('/api/auth/me', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        const user: User = {\n          ...userData,\n          name: userData.display_name || userData.username\n        };\n        setUser(user);\n        setAuthMode('authenticated');\n        onAuthStateChange?.(user);\n      }\n    } catch (error) {\n      // Not authenticated, stay on login screen\n    } finally {\n      setIsCheckingAuth(false);\n    }\n  };\n\n  const handleLogin = async () => {\n    if (!credentials.username || !credentials.password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          username: credentials.username,\n          password: credentials.password,\n        }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        const user: User = {\n          ...userData,\n          name: userData.display_name || userData.username\n        };\n        setUser(user);\n        setAuthMode('authenticated');\n        onAuthStateChange?.(user);\n        toast({\n          title: \"Welcome back!\",\n          description: \"Successfully signed in to your account.\"\n        });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Login failed\",\n          description: error.message || \"Invalid credentials\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignup = async () => {\n    if (!credentials.username || !credentials.password || !credentials.display_name) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          username: credentials.username,\n          password: credentials.password,\n          email: credentials.email || null,\n          display_name: credentials.display_name,\n        }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        const user: User = {\n          ...userData,\n          name: userData.display_name || userData.username\n        };\n        setUser(user);\n        setAuthMode('onboarding');\n        onAuthStateChange?.(user);\n        toast({\n          title: \"Account created!\",\n          description: \"Welcome to StudySync! Let's get you set up.\"\n        });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Signup failed\",\n          description: error.message || \"Could not create account\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOnboardingComplete = (profile: any) => {\n    if (user) {\n      const updatedUser = { ...user, profile };\n      setUser(updatedUser);\n      setAuthMode('authenticated');\n      onAuthStateChange?.(updatedUser);\n    }\n  };\n\n  const handleSocialLogin = (provider: string) => {\n    // Redirect to OAuth endpoint\n    window.location.href = `/api/auth/${provider}`;\n  };\n\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        credentials: 'include'\n      });\n      setUser(null);\n      setAuthMode('login');\n      onAuthStateChange?.(null);\n      toast({\n        title: \"Logged out\",\n        description: \"You've been successfully logged out.\"\n      });\n    } catch (error) {\n      // Silent fail - just clear local state\n      setUser(null);\n      setAuthMode('login');\n      onAuthStateChange?.(null);\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    if (!resetEmail) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        credentials: 'include',\n        body: JSON.stringify({ email: resetEmail })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Reset Email Sent\",\n          description: \"If an account exists with that email, a reset link will be sent.\",\n          variant: \"default\"\n        });\n        \n        setAuthMode('login');\n        setResetEmail('');\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Failed to Send\",\n          description: error.message || \"Failed to send reset email. Please try again.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send reset email. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResetPassword = async () => {\n    if (!resetToken || !newPassword) {\n      toast({\n        title: \"Error\", \n        description: \"Please enter both token and new password\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        credentials: 'include',\n        body: JSON.stringify({ token: resetToken, password: newPassword })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Password Reset\",\n          description: \"Your password has been reset successfully. Please log in.\",\n          variant: \"default\"\n        });\n        \n        setAuthMode('login');\n        setResetToken('');\n        setNewPassword('');\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Reset Failed\",\n          description: error.message || \"Failed to reset password. The token may be expired.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // If authenticated, render the main app\n  if (authMode === 'authenticated' && user) {\n    return <>{children(user)}</>;\n  }\n\n  // If in onboarding mode, show the onboarding flow\n  if (authMode === 'onboarding') {\n    return (\n      <WelcomeOnboarding\n        onComplete={handleOnboardingComplete}\n        onSkip={() => setAuthMode('authenticated')}\n      />\n    );\n  }\n\n  // Show login/signup forms\n  return (\n    <PageTransition className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50 flex items-center justify-center p-4\">\n      <motion.div\n        className=\"w-full max-w-md\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n      >\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <motion.div\n            animate={{ \n              scale: [1, 1.1, 1],\n              rotate: [0, 5, -5, 0]\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            className=\"text-6xl mb-4\"\n          >\n            🎓\n          </motion.div>\n          <h1 className=\"text-4xl font-bold font-['Poppins'] bg-gradient-to-r from-purple-600 via-blue-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            StudySync\n          </h1>\n          <p className=\"text-gray-600\">\n            Your AI-powered study companion for focused learning\n          </p>\n        </div>\n\n        <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-4\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <Sparkles className=\"w-5 h-5 text-purple-600\" />\n              {authMode === 'login' ? 'Welcome Back!' : 'Join StudySync!'}\n            </CardTitle>\n            <p className=\"text-gray-600 text-sm\">\n              {authMode === 'login' \n                ? 'Sign in to continue your learning journey'\n                : 'Start your personalized learning adventure'\n              }\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Social Login Buttons */}\n            <div className=\"space-y-3\">\n              <Button\n                onClick={() => handleSocialLogin('google')}\n                disabled={isLoading}\n                variant=\"outline\"\n                className=\"w-full h-12 text-left justify-start gap-3 hover:bg-blue-50 hover:border-blue-200\"\n              >\n                <Chrome className=\"w-5 h-5 text-blue-600\" />\n                <span>Continue with Google</span>\n              </Button>\n              \n              <Button\n                onClick={() => handleSocialLogin('github')}\n                disabled={isLoading}\n                variant=\"outline\"\n                className=\"w-full h-12 text-left justify-start gap-3 hover:bg-gray-50 hover:border-gray-300\"\n              >\n                <Github className=\"w-5 h-5 text-gray-700\" />\n                <span>Continue with GitHub</span>\n              </Button>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-200\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or continue with email</span>\n              </div>\n            </div>\n\n            {/* Credential Form - show only for login/signup modes */}\n            {(authMode === 'login' || authMode === 'signup') && (\n            <div className=\"space-y-4\">\n              {authMode === 'signup' && (\n                <div>\n                  <Label htmlFor=\"display_name\">Full Name</Label>\n                  <Input\n                    id=\"display_name\"\n                    placeholder=\"Enter your full name\"\n                    value={credentials.display_name}\n                    onChange={(e) => setCredentials(prev => ({ ...prev, display_name: e.target.value }))}\n                    className=\"mt-1 h-11\"\n                    data-testid=\"input-display-name\"\n                  />\n                </div>\n              )}\n              \n              <div>\n                <Label htmlFor=\"username\">Username</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"username\"\n                    placeholder=\"Enter your username\"\n                    value={credentials.username}\n                    onChange={(e) => setCredentials(prev => ({ ...prev, username: e.target.value }))}\n                    className=\"pl-10 mt-1 h-11\"\n                    data-testid=\"input-username\"\n                  />\n                </div>\n              </div>\n\n              {authMode === 'signup' && (\n                <div>\n                  <Label htmlFor=\"email\">Email (optional)</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={credentials.email}\n                      onChange={(e) => setCredentials(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"pl-10 mt-1 h-11\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n              )}\n              \n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={credentials.password}\n                    onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}\n                    className=\"pl-10 mt-1 h-11\"\n                  />\n                </div>\n              </div>\n            </div>\n            )}\n\n            {/* Submit Button - show only for login/signup modes */}\n            {(authMode === 'login' || authMode === 'signup') && (\n            <>\n            <Button\n              onClick={authMode === 'login' ? handleLogin : handleSignup}\n              disabled={isLoading || !credentials.username || !credentials.password || (authMode === 'signup' && !credentials.display_name)}\n              className=\"w-full h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? (\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full\"\n                />\n              ) : (\n                <>\n                  {authMode === 'login' ? <LogIn className=\"w-4 h-4 mr-2\" /> : <UserPlus className=\"w-4 h-4 mr-2\" />}\n                  {authMode === 'login' ? 'Sign In' : 'Create Account'}\n                </>\n              )}\n            </Button>\n\n            {/* Toggle Mode */}\n            <div className=\"text-center\">\n              <button\n                onClick={() => {\n                  setAuthMode(authMode === 'login' ? 'signup' : 'login');\n                  setCredentials({ username: '', email: '', password: '', display_name: '' });\n                }}\n                disabled={isLoading}\n                className=\"text-sm text-gray-600 hover:text-purple-600 transition-colors\"\n                data-testid=\"button-toggle-mode\"\n              >\n                {authMode === 'login' \n                  ? \"Don't have an account? Sign up\" \n                  : \"Already have an account? Sign in\"\n                }\n              </button>\n              \n              {/* Forgot Password Link */}\n              {authMode === 'login' && (\n                <div className=\"mt-2\">\n                  <button\n                    onClick={() => setAuthMode('forgot-password')}\n                    disabled={isLoading}\n                    className=\"text-xs text-gray-500 hover:text-purple-600 transition-colors\"\n                    data-testid=\"button-forgot-password\"\n                  >\n                    Forgot your password?\n                  </button>\n                </div>\n              )}\n            </div>\n            </>\n            )}\n\n            {/* Forgot Password Form */}\n            {authMode === 'forgot-password' && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"reset-email\">Email Address</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"reset-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email address\"\n                      value={resetEmail}\n                      onChange={(e) => setResetEmail(e.target.value)}\n                      className=\"pl-10 mt-1 h-11\"\n                      data-testid=\"input-reset-email\"\n                    />\n                  </div>\n                </div>\n                \n                <Button\n                  onClick={handleForgotPassword}\n                  disabled={isLoading || !resetEmail}\n                  className=\"w-full h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                  data-testid=\"button-send-reset\"\n                >\n                  {isLoading ? (\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full\"\n                    />\n                  ) : (\n                    <>\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Send Reset Link\n                    </>\n                  )}\n                </Button>\n                \n                <div className=\"text-center\">\n                  <button\n                    onClick={() => setAuthMode('login')}\n                    disabled={isLoading}\n                    className=\"text-sm text-gray-600 hover:text-purple-600 transition-colors\"\n                    data-testid=\"button-back-to-login\"\n                  >\n                    Back to Login\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {/* Reset Password Form */}\n            {authMode === 'reset-password' && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"new-password\">New Password</Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"new-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your new password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      className=\"pl-10 mt-1 h-11\"\n                      data-testid=\"input-new-password\"\n                    />\n                  </div>\n                </div>\n                \n                <Button\n                  onClick={handleResetPassword}\n                  disabled={isLoading || !newPassword || newPassword.length < 6}\n                  className=\"w-full h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                  data-testid=\"button-confirm-reset\"\n                >\n                  {isLoading ? (\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full\"\n                    />\n                  ) : (\n                    <>\n                      <Lock className=\"w-4 h-4 mr-2\" />\n                      Update Password\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n\n            {/* Demo Mode */}\n            <div className=\"text-center pt-4 border-t border-gray-100\">\n              <p className=\"text-xs text-gray-500 mb-2\">For demo purposes</p>\n              <Button\n                onClick={() => {\n                  const demoUser: User = {\n                    id: 'demo',\n                    username: 'demo',\n                    email: 'demo@studysync.com',\n                    display_name: 'Alex Johnson',\n                    avatar_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n                    study_level: 5,\n                    total_xp: 1250,\n                    study_streak: 7,\n                    longest_streak: 15,\n                    name: 'Alex Johnson'\n                  };\n                  setUser(demoUser);\n                  setAuthMode('authenticated');\n                  onAuthStateChange?.(demoUser);\n                  toast({\n                    title: \"Demo Mode\",\n                    description: \"You're using demo mode with sample data.\"\n                  });\n                }}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-xs\"\n                data-testid=\"button-demo\"\n              >\n                Continue as Demo User\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </PageTransition>\n  );\n}","size_bytes":23706},"client/src/components/AvatarCompanion.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Sparkles, Heart, Star, Trophy, BookOpen, Timer, \n  MessageCircle, Lightbulb, Target, Zap \n} from \"lucide-react\";\n\ninterface AvatarCompanionProps {\n  mood?: 'happy' | 'excited' | 'encouraging' | 'celebrating' | 'focused' | 'sleepy';\n  message?: string;\n  showMessage?: boolean;\n  onInteraction?: () => void;\n  size?: 'small' | 'medium' | 'large';\n  position?: 'fixed' | 'relative';\n}\n\nconst avatarExpressions = {\n  happy: \"😊\",\n  excited: \"🤩\", \n  encouraging: \"💪\",\n  celebrating: \"🎉\",\n  focused: \"🧠\",\n  sleepy: \"😴\"\n};\n\nconst companionMessages = {\n  welcome: [\n    \"Ready to learn something amazing today? 🌟\",\n    \"Let's make today a productive study day! 📚\",\n    \"I'm here to help you stay focused! 💪\",\n    \"Time to unlock your potential! 🔑\"\n  ],\n  encouragement: [\n    \"You're doing great! Keep going! 🚀\",\n    \"Every minute counts! You've got this! ⭐\",\n    \"Focus mode activated! Let's study! 🎯\",\n    \"Your dedication is inspiring! 💖\"\n  ],\n  celebration: [\n    \"Fantastic work! You're on fire! 🔥\",\n    \"Achievement unlocked! Amazing! 🏆\",\n    \"You're building great study habits! 🌱\",\n    \"Success feels good, doesn't it? ✨\"\n  ],\n  break: [\n    \"Time for a well-deserved break! 🌸\",\n    \"Rest up, you've earned it! 😌\",\n    \"Stretch, breathe, and relax! 🧘‍♀️\",\n    \"Great session! Ready for more? 💪\"\n  ]\n};\n\nexport function AvatarCompanion({ \n  mood = 'happy', \n  message, \n  showMessage = false, \n  onInteraction,\n  size = 'medium',\n  position = 'relative'\n}: AvatarCompanionProps) {\n  const [currentMessage, setCurrentMessage] = useState(message);\n  const [isBlinking, setIsBlinking] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [floatingIcons, setFloatingIcons] = useState<Array<{ id: number; icon: React.ReactNode }>>([]);\n\n  // Auto-blink animation\n  useEffect(() => {\n    const blinkInterval = setInterval(() => {\n      setIsBlinking(true);\n      setTimeout(() => setIsBlinking(false), 150);\n    }, 3000 + Math.random() * 2000);\n\n    return () => clearInterval(blinkInterval);\n  }, []);\n\n  // Generate floating icons on hover\n  useEffect(() => {\n    if (isHovered) {\n      const icons = [<Sparkles />, <Heart />, <Star />, <Zap />, <Lightbulb />];\n      const newFloatingIcons = Array.from({ length: 3 }, (_, i) => ({\n        id: Date.now() + i,\n        icon: icons[Math.floor(Math.random() * icons.length)]\n      }));\n      setFloatingIcons(newFloatingIcons);\n\n      const timeout = setTimeout(() => setFloatingIcons([]), 2000);\n      return () => clearTimeout(timeout);\n    }\n  }, [isHovered]);\n\n  const sizeClasses = {\n    small: \"w-16 h-16 text-3xl\",\n    medium: \"w-24 h-24 text-5xl\", \n    large: \"w-32 h-32 text-7xl\"\n  };\n\n  const positionClasses = position === 'fixed' \n    ? \"fixed bottom-6 right-6 z-50\" \n    : \"relative\";\n\n  const avatarVariants = {\n    idle: {\n      scale: 1,\n      rotate: 0,\n      y: 0,\n    },\n    hover: {\n      scale: 1.1,\n      rotate: [0, -5, 5, 0],\n      y: -5,\n      transition: {\n        rotate: {\n          repeat: Infinity,\n          duration: 2,\n          ease: \"easeInOut\"\n        },\n        scale: {\n          duration: 0.2\n        },\n        y: {\n          duration: 0.2\n        }\n      }\n    },\n    tap: {\n      scale: 0.95,\n      transition: {\n        duration: 0.1\n      }\n    }\n  };\n\n  const messageVariants = {\n    hidden: {\n      opacity: 0,\n      scale: 0.8,\n      y: 20\n    },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      y: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 500,\n        damping: 25\n      }\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.8,\n      y: -20,\n      transition: {\n        duration: 0.2\n      }\n    }\n  };\n\n  return (\n    <div className={`${positionClasses} flex flex-col items-center gap-3`}>\n      {/* Floating Icons */}\n      <AnimatePresence>\n        {floatingIcons.map((item, index) => (\n          <motion.div\n            key={item.id}\n            className=\"absolute text-yellow-400\"\n            initial={{ \n              opacity: 0, \n              scale: 0, \n              x: 0, \n              y: 0 \n            }}\n            animate={{ \n              opacity: 1, \n              scale: 1, \n              x: (index - 1) * 40 + Math.random() * 20, \n              y: -50 - Math.random() * 30 \n            }}\n            exit={{ \n              opacity: 0, \n              scale: 0, \n              y: -80 \n            }}\n            transition={{ \n              duration: 1.5,\n              ease: \"easeOut\"\n            }}\n          >\n            {item.icon}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Message Bubble */}\n      <AnimatePresence>\n        {(showMessage || currentMessage) && (\n          <motion.div\n            variants={messageVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            className=\"mb-2\"\n          >\n            <Card className=\"max-w-xs bg-gradient-to-r from-blue-500 to-purple-600 border-0 shadow-lg\">\n              <CardContent className=\"p-3\">\n                <p className=\"text-white text-sm font-medium text-center\">\n                  {currentMessage || companionMessages.welcome[0]}\n                </p>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Avatar */}\n      <motion.div\n        className={`${sizeClasses[size]} ${position === 'fixed' ? 'cursor-pointer' : ''} \n          bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 \n          rounded-full flex items-center justify-center shadow-xl\n          border-4 border-white relative overflow-hidden`}\n        variants={avatarVariants}\n        initial=\"idle\"\n        whileHover=\"hover\"\n        whileTap=\"tap\"\n        onHoverStart={() => setIsHovered(true)}\n        onHoverEnd={() => setIsHovered(false)}\n        onClick={onInteraction}\n      >\n        {/* Sparkle Background */}\n        <motion.div\n          className=\"absolute inset-0 bg-gradient-to-br from-yellow-200/20 to-pink-200/20\"\n          animate={{\n            opacity: [0, 1, 0],\n            scale: [1, 1.2, 1],\n          }}\n          transition={{\n            repeat: Infinity,\n            duration: 3,\n            ease: \"easeInOut\"\n          }}\n        />\n        \n        {/* Main Avatar Face */}\n        <motion.div\n          className=\"text-white relative z-10 select-none\"\n          animate={{\n            scale: isBlinking ? [1, 1, 0.1, 1] : 1,\n          }}\n          transition={{\n            duration: 0.15,\n            times: [0, 0.5, 0.8, 1]\n          }}\n        >\n          {avatarExpressions[mood]}\n        </motion.div>\n\n        {/* Energy Ring */}\n        <motion.div\n          className=\"absolute inset-0 border-2 border-yellow-300/50 rounded-full\"\n          animate={{\n            scale: [1, 1.1, 1],\n            opacity: [0.5, 1, 0.5],\n          }}\n          transition={{\n            repeat: Infinity,\n            duration: 2,\n            ease: \"easeInOut\"\n          }}\n        />\n      </motion.div>\n\n      {/* Mood Badge */}\n      {position === 'relative' && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          <Badge \n            variant=\"secondary\" \n            className=\"bg-gradient-to-r from-purple-100 to-blue-100 text-purple-700 border-purple-200\"\n          >\n            <Sparkles className=\"w-3 h-3 mr-1\" />\n            {mood.charAt(0).toUpperCase() + mood.slice(1)}\n          </Badge>\n        </motion.div>\n      )}\n    </div>\n  );\n}\n\n// Companion Manager Hook\nexport function useAvatarCompanion() {\n  const [mood, setMood] = useState<AvatarCompanionProps['mood']>('happy');\n  const [message, setMessage] = useState<string>('');\n  const [showMessage, setShowMessage] = useState(false);\n\n  const showEncouragement = () => {\n    const messages = companionMessages.encouragement;\n    const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n    setMessage(randomMessage);\n    setMood('encouraging');\n    setShowMessage(true);\n    \n    setTimeout(() => setShowMessage(false), 4000);\n  };\n\n  const celebrate = () => {\n    const messages = companionMessages.celebration;\n    const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n    setMessage(randomMessage);\n    setMood('celebrating');\n    setShowMessage(true);\n    \n    setTimeout(() => setShowMessage(false), 5000);\n  };\n\n  const suggestBreak = () => {\n    const messages = companionMessages.break;\n    const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n    setMessage(randomMessage);\n    setMood('sleepy');\n    setShowMessage(true);\n    \n    setTimeout(() => setShowMessage(false), 4000);\n  };\n\n  const welcome = () => {\n    const messages = companionMessages.welcome;\n    const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n    setMessage(randomMessage);\n    setMood('excited');\n    setShowMessage(true);\n    \n    setTimeout(() => setShowMessage(false), 4000);\n  };\n\n  return {\n    mood,\n    message,\n    showMessage,\n    setMood,\n    setMessage,\n    setShowMessage,\n    showEncouragement,\n    celebrate,\n    suggestBreak,\n    welcome\n  };\n}","size_bytes":9522},"client/src/components/GroupStudyRoom.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Video, \n  VideoOff, \n  Mic, \n  MicOff, \n  MessageCircle, \n  Share, \n  Users, \n  Clock, \n  Send,\n  FileText,\n  Presentation,\n  Volume2,\n  VolumeX,\n  Settings,\n  Hand,\n  Crown,\n  Heart\n} from \"lucide-react\";\nimport { AvatarCompanion, useAvatarCompanion } from \"./AvatarCompanion\";\nimport { PageTransition, AnimatedCard } from \"./PageTransition\";\n\ninterface ChatMessage {\n  id: string;\n  userId: string;\n  userName: string;\n  userAvatar?: string;\n  message: string;\n  timestamp: Date;\n  type: 'text' | 'system' | 'celebration';\n}\n\ninterface StudyParticipant {\n  id: string;\n  name: string;\n  avatar?: string;\n  isHost: boolean;\n  isOnline: boolean;\n  isSpeaking: boolean;\n  hasVideo: boolean;\n  hasAudio: boolean;\n  studyStreak: number;\n  level: number;\n}\n\ninterface GroupStudyRoomProps {\n  roomId: string;\n  roomName: string;\n  subject: string;\n  onLeaveRoom: () => void;\n}\n\nconst mockParticipants: StudyParticipant[] = [\n  {\n    id: '1',\n    name: 'Alex Johnson',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n    isHost: true,\n    isOnline: true,\n    isSpeaking: false,\n    hasVideo: true,\n    hasAudio: true,\n    studyStreak: 7,\n    level: 8\n  },\n  {\n    id: '2',\n    name: 'Emma Chen',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b332b077?w=150&h=150&fit=crop&crop=face',\n    isHost: false,\n    isOnline: true,\n    isSpeaking: true,\n    hasVideo: true,\n    hasAudio: true,\n    studyStreak: 12,\n    level: 10\n  },\n  {\n    id: '3',\n    name: 'Marcus Smith',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\n    isHost: false,\n    isOnline: true,\n    isSpeaking: false,\n    hasVideo: false,\n    hasAudio: true,\n    studyStreak: 3,\n    level: 5\n  },\n  {\n    id: '4',\n    name: 'Sophia Rodriguez',\n    avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face',\n    isHost: false,\n    isOnline: true,\n    isSpeaking: false,\n    hasVideo: true,\n    hasAudio: false,\n    studyStreak: 15,\n    level: 12\n  }\n];\n\nconst mockMessages: ChatMessage[] = [\n  {\n    id: '1',\n    userId: 'system',\n    userName: 'StudySync',\n    message: 'Welcome to the Advanced Calculus Study Group! Let\\'s learn together! 📚',\n    timestamp: new Date(Date.now() - 300000),\n    type: 'system'\n  },\n  {\n    id: '2',\n    userId: '2',\n    userName: 'Emma Chen',\n    userAvatar: 'https://images.unsplash.com/photo-1494790108755-2616b332b077?w=150&h=150&fit=crop&crop=face',\n    message: 'Hey everyone! Ready to tackle derivatives today?',\n    timestamp: new Date(Date.now() - 240000),\n    type: 'text'\n  },\n  {\n    id: '3',\n    userId: '3',\n    userName: 'Marcus Smith',\n    userAvatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\n    message: 'Definitely! I have been struggling with the chain rule.',\n    timestamp: new Date(Date.now() - 180000),\n    type: 'text'\n  },\n  {\n    id: '4',\n    userId: '4',\n    userName: 'Sophia Rodriguez',\n    userAvatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face',\n    message: 'I can help with that! Let me share my notes.',\n    timestamp: new Date(Date.now() - 120000),\n    type: 'text'\n  }\n];\n\nexport function GroupStudyRoom({ roomId, roomName, subject, onLeaveRoom }: GroupStudyRoomProps) {\n  const [participants, setParticipants] = useState<StudyParticipant[]>(mockParticipants);\n  const [messages, setMessages] = useState<ChatMessage[]>(mockMessages);\n  const [newMessage, setNewMessage] = useState('');\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isAudioOn, setIsAudioOn] = useState(true);\n  const [isChatOpen, setIsChatOpen] = useState(true);\n  const [sessionTime, setSessionTime] = useState(0);\n  const [showParticipants, setShowParticipants] = useState(true);\n  \n  const chatEndRef = useRef<HTMLDivElement>(null);\n  const companion = useAvatarCompanion();\n\n  // Session timer\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setSessionTime(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Auto-scroll chat to bottom\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Welcome message\n  useEffect(() => {\n    companion.welcome();\n  }, [companion]);\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const mins = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const sendMessage = () => {\n    if (!newMessage.trim()) return;\n\n    const message: ChatMessage = {\n      id: Date.now().toString(),\n      userId: '1',\n      userName: 'You',\n      message: newMessage,\n      timestamp: new Date(),\n      type: 'text'\n    };\n\n    setMessages(prev => [...prev, message]);\n    setNewMessage('');\n    \n    // Simulate other participants' reactions\n    setTimeout(() => {\n      if (Math.random() > 0.7) {\n        const reactions = ['👍', '💡', '🎯', '✨', 'Great point!', 'Thanks for sharing!'];\n        const randomReaction = reactions[Math.floor(Math.random() * reactions.length)];\n        const randomParticipant = participants[Math.floor(Math.random() * (participants.length - 1)) + 1];\n        \n        const reactionMessage: ChatMessage = {\n          id: (Date.now() + Math.random()).toString(),\n          userId: randomParticipant.id,\n          userName: randomParticipant.name,\n          userAvatar: randomParticipant.avatar,\n          message: randomReaction,\n          timestamp: new Date(),\n          type: 'text'\n        };\n        \n        setMessages(prev => [...prev, reactionMessage]);\n      }\n    }, 1000 + Math.random() * 3000);\n  };\n\n  const toggleVideo = () => {\n    setIsVideoOn(!isVideoOn);\n    // Update participant state\n    setParticipants(prev => prev.map(p => \n      p.id === '1' ? { ...p, hasVideo: !isVideoOn } : p\n    ));\n  };\n\n  const toggleAudio = () => {\n    setIsAudioOn(!isAudioOn);\n    // Update participant state\n    setParticipants(prev => prev.map(p => \n      p.id === '1' ? { ...p, hasAudio: !isAudioOn } : p\n    ));\n  };\n\n  const celebrateProgress = () => {\n    const celebrationMessage: ChatMessage = {\n      id: Date.now().toString(),\n      userId: 'system',\n      userName: 'StudySync',\n      message: 'Amazing progress everyone! Keep up the great work! 🎉',\n      timestamp: new Date(),\n      type: 'celebration'\n    };\n    \n    setMessages(prev => [...prev, celebrationMessage]);\n    companion.celebrate();\n  };\n\n  return (\n    <PageTransition className=\"h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 overflow-hidden\">\n      {/* Header */}\n      <div className=\"bg-white/80 backdrop-blur-sm border-b border-gray-200 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <motion.div\n              animate={{ scale: [1, 1.1, 1] }}\n              transition={{ duration: 2, repeat: Infinity }}\n              className=\"text-3xl\"\n            >\n              📚\n            </motion.div>\n            <div>\n              <h1 className=\"text-xl font-bold font-['Poppins']\">{roomName}</h1>\n              <div className=\"flex items-center gap-3 text-sm text-gray-600\">\n                <span>{subject}</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                  <Users className=\"w-3 h-3 mr-1\" />\n                  {participants.length} active\n                </Badge>\n                <Badge variant=\"outline\">\n                  <Clock className=\"w-3 h-3 mr-1\" />\n                  {formatTime(sessionTime)}\n                </Badge>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Button\n              onClick={celebrateProgress}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"bg-purple-50 border-purple-200 hover:bg-purple-100\"\n            >\n              <Heart className=\"w-4 h-4 mr-1 text-purple-600\" />\n              Celebrate Progress\n            </Button>\n            <Button\n              onClick={onLeaveRoom}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Leave Room\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex h-full\">\n        {/* Video Grid Area */}\n        <div className=\"flex-1 p-4 overflow-hidden\">\n          <div className=\"grid grid-cols-2 gap-4 h-full max-h-[calc(100vh-200px)]\">\n            {participants.map((participant, index) => (\n              <AnimatedCard\n                key={participant.id}\n                className=\"relative bg-gray-900 rounded-xl overflow-hidden shadow-lg\"\n              >\n                {participant.hasVideo ? (\n                  <div className=\"w-full h-full bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center\">\n                    <div className=\"text-center text-white\">\n                      <Avatar className=\"w-16 h-16 mx-auto mb-2 border-4 border-white/20\">\n                        <AvatarImage src={participant.avatar} />\n                        <AvatarFallback>{participant.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                      </Avatar>\n                      <p className=\"text-sm opacity-75\">Camera Active</p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"w-full h-full bg-gray-800 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <Avatar className=\"w-20 h-20 mx-auto mb-3 border-4 border-gray-600\">\n                        <AvatarImage src={participant.avatar} />\n                        <AvatarFallback className=\"bg-gray-700 text-white\">\n                          {participant.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Participant Info Overlay */}\n                <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {participant.isHost && (\n                        <Crown className=\"w-4 h-4 text-yellow-400\" />\n                      )}\n                      <span className=\"text-white font-medium text-sm\">\n                        {participant.name}\n                      </span>\n                      <Badge className=\"bg-purple-500/80 text-white text-xs\">\n                        L{participant.level}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-1\">\n                      {participant.isSpeaking && (\n                        <motion.div\n                          animate={{ scale: [1, 1.2, 1] }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                        >\n                          <Volume2 className=\"w-4 h-4 text-green-400\" />\n                        </motion.div>\n                      )}\n                      {!participant.hasAudio && (\n                        <MicOff className=\"w-4 h-4 text-red-400\" />\n                      )}\n                      {!participant.hasVideo && (\n                        <VideoOff className=\"w-4 h-4 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Speaking Animation */}\n                {participant.isSpeaking && (\n                  <motion.div\n                    className=\"absolute inset-0 border-4 border-green-400 rounded-xl\"\n                    animate={{ opacity: [0, 1, 0] }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                )}\n              </AnimatedCard>\n            ))}\n          </div>\n        </div>\n\n        {/* Sidebar with Chat and Participants */}\n        <div className=\"w-80 bg-white/90 backdrop-blur-sm border-l border-gray-200 flex flex-col\">\n          {/* Tab Header */}\n          <div className=\"flex border-b border-gray-200\">\n            <button\n              onClick={() => setIsChatOpen(true)}\n              className={`flex-1 p-3 text-sm font-medium ${\n                isChatOpen \n                  ? 'bg-blue-50 text-blue-600 border-b-2 border-blue-500' \n                  : 'text-gray-600 hover:bg-gray-50'\n              }`}\n            >\n              <MessageCircle className=\"w-4 h-4 inline mr-1\" />\n              Chat ({messages.length})\n            </button>\n            <button\n              onClick={() => setIsChatOpen(false)}\n              className={`flex-1 p-3 text-sm font-medium ${\n                !isChatOpen \n                  ? 'bg-blue-50 text-blue-600 border-b-2 border-blue-500' \n                  : 'text-gray-600 hover:bg-gray-50'\n              }`}\n            >\n              <Users className=\"w-4 h-4 inline mr-1\" />\n              People ({participants.length})\n            </button>\n          </div>\n\n          {/* Chat Section */}\n          {isChatOpen && (\n            <>\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-3\">\n                  {messages.map((message) => (\n                    <motion.div\n                      key={message.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className={`${\n                        message.type === 'system' \n                          ? 'text-center' \n                          : message.type === 'celebration'\n                          ? 'text-center bg-purple-50 p-2 rounded-lg border border-purple-200'\n                          : ''\n                      }`}\n                    >\n                      {message.type === 'system' ? (\n                        <div className=\"text-xs text-gray-500 bg-gray-50 rounded-full px-3 py-1 inline-block\">\n                          {message.message}\n                        </div>\n                      ) : message.type === 'celebration' ? (\n                        <div className=\"text-sm font-medium text-purple-700\">\n                          {message.message}\n                        </div>\n                      ) : (\n                        <div className=\"flex items-start gap-2\">\n                          <Avatar className=\"w-6 h-6 flex-shrink-0 mt-1\">\n                            <AvatarImage src={message.userAvatar} />\n                            <AvatarFallback className=\"text-xs\">\n                              {message.userName.split(' ').map(n => n[0]).join('')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <span className=\"text-xs font-medium text-gray-700\">\n                                {message.userName}\n                              </span>\n                              <span className=\"text-xs text-gray-400\">\n                                {message.timestamp.toLocaleTimeString([], { \n                                  hour: '2-digit', \n                                  minute: '2-digit' \n                                })}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-gray-800 break-words\">\n                              {message.message}\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </motion.div>\n                  ))}\n                  <div ref={chatEndRef} />\n                </div>\n              </ScrollArea>\n              \n              {/* Chat Input */}\n              <div className=\"p-4 border-t border-gray-200\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Type your message...\"\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                    className=\"flex-1\"\n                  />\n                  <Button \n                    onClick={sendMessage}\n                    disabled={!newMessage.trim()}\n                    size=\"sm\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Participants Section */}\n          {!isChatOpen && (\n            <ScrollArea className=\"flex-1 p-4\">\n              <div className=\"space-y-3\">\n                {participants.map((participant) => (\n                  <motion.div\n                    key={participant.id}\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 transition-colors\"\n                  >\n                    <div className=\"relative\">\n                      <Avatar className=\"w-10 h-10\">\n                        <AvatarImage src={participant.avatar} />\n                        <AvatarFallback>\n                          {participant.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      {participant.isOnline && (\n                        <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium text-sm truncate\">\n                          {participant.name}\n                        </span>\n                        {participant.isHost && (\n                          <Crown className=\"w-4 h-4 text-yellow-500\" />\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Level {participant.level}\n                        </Badge>\n                        <span className=\"text-xs text-gray-500\">\n                          🔥 {participant.studyStreak} streak\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-1\">\n                      {participant.hasAudio ? (\n                        <Mic className=\"w-4 h-4 text-green-600\" />\n                      ) : (\n                        <MicOff className=\"w-4 h-4 text-gray-400\" />\n                      )}\n                      {participant.hasVideo ? (\n                        <Video className=\"w-4 h-4 text-blue-600\" />\n                      ) : (\n                        <VideoOff className=\"w-4 h-4 text-gray-400\" />\n                      )}\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </div>\n\n      {/* Bottom Control Bar */}\n      <div className=\"absolute bottom-0 left-0 right-0 bg-white/90 backdrop-blur-sm border-t border-gray-200 p-4\">\n        <div className=\"flex items-center justify-center gap-4\">\n          <Button\n            onClick={toggleAudio}\n            variant={isAudioOn ? \"default\" : \"destructive\"}\n            size=\"lg\"\n            className=\"rounded-full w-12 h-12 p-0\"\n          >\n            {isAudioOn ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\n          </Button>\n          \n          <Button\n            onClick={toggleVideo}\n            variant={isVideoOn ? \"default\" : \"destructive\"}\n            size=\"lg\"\n            className=\"rounded-full w-12 h-12 p-0\"\n          >\n            {isVideoOn ? <Video className=\"w-5 h-5\" /> : <VideoOff className=\"w-5 h-5\" />}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"rounded-full w-12 h-12 p-0\"\n          >\n            <Share className=\"w-5 h-5\" />\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"rounded-full w-12 h-12 p-0\"\n          >\n            <Presentation className=\"w-5 h-5\" />\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"rounded-full w-12 h-12 p-0\"\n          >\n            <Hand className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Floating Companion */}\n      <div className=\"absolute bottom-20 left-4 z-50\">\n        <AvatarCompanion\n          mood={companion.mood}\n          message={companion.message}\n          showMessage={companion.showMessage}\n          onInteraction={companion.showEncouragement}\n          position=\"relative\"\n        />\n      </div>\n    </PageTransition>\n  );\n}","size_bytes":22089},"client/src/components/PageTransition.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { ReactNode } from \"react\";\n\ninterface PageTransitionProps {\n  children: ReactNode;\n  className?: string;\n  transition?: 'slide' | 'fade' | 'scale' | 'bounce' | 'duolingo';\n}\n\nconst transitionVariants = {\n  slide: {\n    initial: { x: 300, opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n    exit: { x: -300, opacity: 0 },\n    transition: { type: \"spring\", stiffness: 300, damping: 30 }\n  },\n  fade: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n    transition: { duration: 0.3 }\n  },\n  scale: {\n    initial: { scale: 0.8, opacity: 0 },\n    animate: { scale: 1, opacity: 1 },\n    exit: { scale: 0.8, opacity: 0 },\n    transition: { type: \"spring\", stiffness: 400, damping: 25 }\n  },\n  bounce: {\n    initial: { y: 50, opacity: 0, scale: 0.9 },\n    animate: { y: 0, opacity: 1, scale: 1 },\n    exit: { y: -50, opacity: 0, scale: 0.9 },\n    transition: { type: \"spring\", stiffness: 500, damping: 30 }\n  },\n  duolingo: {\n    initial: { \n      scale: 0.8, \n      opacity: 0, \n      y: 30,\n      rotateX: -15\n    },\n    animate: { \n      scale: 1, \n      opacity: 1, \n      y: 0,\n      rotateX: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25,\n        delayChildren: 0.1,\n        staggerChildren: 0.05\n      }\n    },\n    exit: { \n      scale: 0.8, \n      opacity: 0, \n      y: -30,\n      rotateX: 15,\n      transition: {\n        duration: 0.2\n      }\n    }\n  }\n};\n\nexport function PageTransition({ \n  children, \n  className = \"\", \n  transition = 'duolingo' \n}: PageTransitionProps) {\n  const variants = transitionVariants[transition];\n\n  return (\n    <motion.div\n      className={className}\n      initial={variants.initial}\n      animate={variants.animate}\n      exit={variants.exit}\n      transition={'transition' in variants ? variants.transition : { duration: 0.3 }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Staggered Children Animation\nexport function StaggeredContainer({ \n  children, \n  className = \"\",\n  staggerDelay = 0.1 \n}: { \n  children: ReactNode; \n  className?: string;\n  staggerDelay?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      initial=\"hidden\"\n      animate=\"visible\"\n      variants={{\n        hidden: {},\n        visible: {\n          transition: {\n            delayChildren: 0.1,\n            staggerChildren: staggerDelay\n          }\n        }\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Individual staggered item\nexport function StaggeredItem({ \n  children, \n  className = \"\",\n  delay = 0 \n}: { \n  children: ReactNode; \n  className?: string;\n  delay?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      variants={{\n        hidden: { \n          opacity: 0, \n          y: 20,\n          scale: 0.95\n        },\n        visible: { \n          opacity: 1, \n          y: 0,\n          scale: 1,\n          transition: {\n            type: \"spring\",\n            stiffness: 400,\n            damping: 25,\n            delay\n          }\n        }\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Card hover animations\nexport function AnimatedCard({ \n  children, \n  className = \"\",\n  hoverScale = 1.02,\n  tapScale = 0.98\n}: { \n  children: ReactNode; \n  className?: string;\n  hoverScale?: number;\n  tapScale?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      whileHover={{ \n        scale: hoverScale,\n        y: -5,\n        boxShadow: \"0 10px 25px rgba(0,0,0,0.1)\",\n        transition: { type: \"spring\", stiffness: 400, damping: 25 }\n      }}\n      whileTap={{ \n        scale: tapScale,\n        transition: { duration: 0.1 }\n      }}\n      transition={{\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Success celebration animation\nexport function CelebrationEffect({ \n  isVisible = false,\n  onComplete \n}: { \n  isVisible: boolean;\n  onComplete?: () => void;\n}) {\n  const confettiColors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'];\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          className=\"fixed inset-0 pointer-events-none z-50 flex items-center justify-center\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onAnimationComplete={onComplete}\n        >\n          {/* Confetti */}\n          {[...Array(20)].map((_, i) => (\n            <motion.div\n              key={i}\n              className=\"absolute w-3 h-3 rounded-full\"\n              style={{\n                backgroundColor: confettiColors[i % confettiColors.length],\n                left: '50%',\n                top: '50%'\n              }}\n              initial={{\n                scale: 0,\n                x: 0,\n                y: 0,\n                rotate: 0\n              }}\n              animate={{\n                scale: [0, 1, 0],\n                x: Math.cos(i * 18) * (100 + Math.random() * 200),\n                y: Math.sin(i * 18) * (100 + Math.random() * 200),\n                rotate: 360\n              }}\n              transition={{\n                duration: 2,\n                ease: \"easeOut\"\n              }}\n            />\n          ))}\n          \n          {/* Central burst */}\n          <motion.div\n            className=\"text-6xl\"\n            initial={{ scale: 0, rotate: -180 }}\n            animate={{ scale: [0, 1.2, 1], rotate: 0 }}\n            transition={{\n              type: \"spring\",\n              stiffness: 300,\n              damping: 20\n            }}\n          >\n            🎉\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":5795},"client/src/components/SoloStudyWizard.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  ArrowRight, ArrowLeft, Upload, Music, Image as ImageIcon, \n  Timer, FileText, Sparkles, Heart, Target, CheckCircle,\n  Volume2, Play, Pause, Settings, Coffee, Library,\n  Mountain, Waves, Trees, Sun, BookOpen, Maximize2,\n  Minimize2, Eye, Search\n} from \"lucide-react\";\nimport { AvatarCompanion, useAvatarCompanion } from \"./AvatarCompanion\";\nimport { StudyTimer } from \"./StudyTimer\";\nimport { PDFViewer } from \"./PDFViewer\";\nimport { DictionaryLookup } from \"./DictionaryLookup\";\nimport { validateYouTubeURL, validateSpotifyURL, getSecureIframeProps } from \"@/utils/security\";\n\n// Import background images\nimport studyBg1 from '@assets/stock_images/peaceful_study_envir_5b4d8ced.jpg';\nimport studyBg2 from '@assets/stock_images/peaceful_study_envir_dc2a29f2.jpg';\nimport studyBg3 from '@assets/stock_images/peaceful_study_envir_774d3979.jpg';\nimport studyBg4 from '@assets/stock_images/peaceful_study_envir_23a114fe.jpg';\nimport studyBg5 from '@assets/stock_images/peaceful_study_envir_b52fa166.jpg';\nimport studyBg6 from '@assets/stock_images/peaceful_study_envir_6583786e.jpg';\n\ninterface SoloStudyWizardProps {\n  onSessionComplete?: (duration: number) => void;\n  onSessionStart?: () => void;\n  onSessionPause?: () => void;\n  onExit?: () => void;\n}\n\ninterface StudyDocument {\n  id: string;\n  name: string;\n  file: File;\n  type: string;\n  size: number;\n}\n\ninterface MusicTrack {\n  id: string;\n  title: string;\n  url: string;\n  type: 'local' | 'youtube' | 'spotify';\n}\n\ninterface StudyBackground {\n  id: string;\n  name: string;\n  url: string;\n  icon: React.ReactNode;\n  preview: string;\n}\n\ninterface StudySession {\n  title: string;\n  documents: StudyDocument[];\n  background: StudyBackground | null;\n  music: MusicTrack | null;\n  pomodoroSettings: {\n    focusTime: number;\n    shortBreak: number;\n    longBreak: number;\n    sessions: number;\n  };\n}\n\ntype WizardStep = 'welcome' | 'title' | 'documents' | 'background' | 'music' | 'timer' | 'session';\n\nconst studyBackgrounds: StudyBackground[] = [\n  {\n    id: 'library',\n    name: 'Peaceful Library',\n    url: studyBg1,\n    icon: <Library className=\"w-6 h-6\" />,\n    preview: studyBg1\n  },\n  {\n    id: 'coffee',\n    name: 'Cozy Coffee Shop',\n    url: studyBg2,\n    icon: <Coffee className=\"w-6 h-6\" />,\n    preview: studyBg2\n  },\n  {\n    id: 'nature',\n    name: 'Forest Serenity',\n    url: studyBg3,\n    icon: <Trees className=\"w-6 h-6\" />,\n    preview: studyBg3\n  },\n  {\n    id: 'mountain',\n    name: 'Mountain Vista',\n    url: studyBg4,\n    icon: <Mountain className=\"w-6 h-6\" />,\n    preview: studyBg4\n  },\n  {\n    id: 'sunset',\n    name: 'Golden Hour',\n    url: studyBg5,\n    icon: <Sun className=\"w-6 h-6\" />,\n    preview: studyBg5\n  },\n  {\n    id: 'waves',\n    name: 'Ocean Waves',\n    url: studyBg6,\n    icon: <Waves className=\"w-6 h-6\" />,\n    preview: studyBg6\n  }\n];\n\nexport function SoloStudyWizard({ onSessionComplete, onSessionStart, onSessionPause, onExit }: SoloStudyWizardProps) {\n  const [currentStep, setCurrentStep] = useState<WizardStep>('welcome');\n  const [studySession, setStudySession] = useState<StudySession>({\n    title: '',\n    documents: [],\n    background: null,\n    music: null,\n    pomodoroSettings: {\n      focusTime: 25,\n      shortBreak: 5,\n      longBreak: 15,\n      sessions: 4\n    }\n  });\n  \n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [youtubeUrl, setYoutubeUrl] = useState('');\n  const [spotifyUrl, setSpotifyUrl] = useState('');\n  \n  // New state for enhanced features\n  const [selectedPDF, setSelectedPDF] = useState<StudyDocument | null>(null);\n  const [isDictionaryOpen, setIsDictionaryOpen] = useState(false);\n  const [lookupWord, setLookupWord] = useState('');\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [doNotDisturb, setDoNotDisturb] = useState(false);\n  \n  const documentInputRef = useRef<HTMLInputElement>(null);\n  const musicInputRef = useRef<HTMLInputElement>(null);\n  const companion = useAvatarCompanion();\n\n  // Calculate progress\n  const stepOrder: WizardStep[] = ['welcome', 'title', 'documents', 'background', 'music', 'timer', 'session'];\n  const currentStepIndex = stepOrder.indexOf(currentStep);\n  const progress = ((currentStepIndex + 1) / (stepOrder.length - 1)) * 100;\n\n  // Navigation handlers\n  const nextStep = useCallback(() => {\n    const nextIndex = Math.min(currentStepIndex + 1, stepOrder.length - 1);\n    setCurrentStep(stepOrder[nextIndex]);\n    \n    // Trigger companion reactions\n    if (stepOrder[nextIndex] === 'session') {\n      companion.celebrate();\n    } else {\n      companion.showEncouragement();\n    }\n  }, [currentStepIndex, stepOrder, companion]);\n\n  const prevStep = useCallback(() => {\n    const prevIndex = Math.max(currentStepIndex - 1, 0);\n    setCurrentStep(stepOrder[prevIndex]);\n  }, [currentStepIndex, stepOrder]);\n\n  // File upload handlers\n  const handleDocumentUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    const newDocuments: StudyDocument[] = Array.from(files).map((file) => ({\n      id: Date.now().toString() + Math.random(),\n      name: file.name,\n      file,\n      type: file.type,\n      size: file.size\n    }));\n\n    setStudySession(prev => ({\n      ...prev,\n      documents: [...prev.documents, ...newDocuments]\n    }));\n  };\n\n  const handleMusicUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !file.type.startsWith('audio/')) return;\n\n    const newTrack: MusicTrack = {\n      id: Date.now().toString(),\n      title: file.name.replace(/\\.[^/.]+$/, \"\"),\n      url: URL.createObjectURL(file),\n      type: 'local'\n    };\n\n    setStudySession(prev => ({ ...prev, music: newTrack }));\n  };\n\n  const addYouTubeMusic = () => {\n    if (!youtubeUrl.trim()) return;\n    \n    // Use security validation function\n    const validatedUrl = validateYouTubeURL(youtubeUrl);\n    \n    if (validatedUrl) {\n      const videoId = youtubeUrl.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/)?.[1];\n      const track: MusicTrack = {\n        id: videoId || Date.now().toString(),\n        title: 'YouTube Music',\n        url: validatedUrl, // Use the validated secure URL\n        type: 'youtube'\n      };\n      \n      setStudySession(prev => ({ ...prev, music: track }));\n      setYoutubeUrl('');\n    } else {\n      // Show error for invalid URL\n      alert('Invalid YouTube URL. Please use a valid YouTube link (youtube.com, youtu.be).');\n    }\n  };\n\n  const addSpotifyMusic = () => {\n    if (!spotifyUrl.trim()) return;\n    \n    // Use security validation function\n    const validatedUrl = validateSpotifyURL(spotifyUrl);\n    \n    if (validatedUrl) {\n      const playlistId = spotifyUrl.match(/playlist\\/([a-zA-Z0-9]+)/)?.[1];\n      const track: MusicTrack = {\n        id: playlistId || Date.now().toString(),\n        title: 'Spotify Playlist',\n        url: validatedUrl, // Use the validated secure URL\n        type: 'spotify'\n      };\n      \n      setStudySession(prev => ({ ...prev, music: track }));\n      setSpotifyUrl('');\n    } else {\n      // Show error for invalid URL\n      alert('Invalid Spotify URL. Please use a valid Spotify playlist link (open.spotify.com).');\n    }\n  };\n\n  // Session handlers\n  const startSession = () => {\n    setIsSessionActive(true);\n    setCurrentStep('session');\n    companion.celebrate();\n    onSessionStart?.();\n  };\n\n  const handleSessionComplete = (duration: number) => {\n    setIsSessionActive(false);\n    exitFullscreen(); // Exit fullscreen when session completes\n    companion.celebrate();\n    onSessionComplete?.(duration);\n  };\n\n  // New handlers for enhanced features\n  const enterFullscreen = async () => {\n    try {\n      await document.documentElement.requestFullscreen();\n      setIsFullscreen(true);\n      setDoNotDisturb(true);\n    } catch (error) {\n      console.log(\"Fullscreen not supported or denied\");\n    }\n  };\n\n  const exitFullscreen = async () => {\n    try {\n      if (document.fullscreenElement) {\n        await document.exitFullscreen();\n      }\n      setIsFullscreen(false);\n      setDoNotDisturb(false);\n    } catch (error) {\n      console.log(\"Exit fullscreen failed\");\n    }\n  };\n\n  const toggleFullscreen = () => {\n    if (isFullscreen) {\n      exitFullscreen();\n    } else {\n      enterFullscreen();\n    }\n  };\n\n  const openDictionary = (word: string = '') => {\n    setLookupWord(word);\n    setIsDictionaryOpen(true);\n  };\n\n  const closeDictionary = () => {\n    setIsDictionaryOpen(false);\n    setLookupWord('');\n  };\n\n  const openPDFViewer = (document: StudyDocument) => {\n    setSelectedPDF(document);\n  };\n\n  const closePDFViewer = () => {\n    setSelectedPDF(null);\n  };\n\n  // Get companion message based on step\n  const getCompanionMessage = () => {\n    switch (currentStep) {\n      case 'welcome':\n        return \"Welcome to your personal study space! I'm here to help you create the perfect learning environment! 🌟\";\n      case 'title':\n        return \"What would you like to call this study session? Give it a name that motivates you! 📚\";\n      case 'documents':\n        return \"Upload your study materials! PDFs, documents, anything you need for focused learning! 📄\";\n      case 'background':\n        return \"Choose your perfect study ambience! The right environment helps you focus better! 🖼️\";\n      case 'music':\n        return \"Add some background music to keep you in the zone! Music can boost your concentration! 🎵\";\n      case 'timer':\n        return \"Set up your Pomodoro timer! Focused bursts with breaks help you learn more effectively! ⏰\";\n      case 'session':\n        return \"You're all set! Time to focus and learn. I'll be here cheering you on! 🎯\";\n      default:\n        return \"Let's create an amazing study session together! 💪\";\n    }\n  };\n\n  // Animation variants\n  const stepVariants = {\n    hidden: { opacity: 0, x: 50, scale: 0.95 },\n    visible: { \n      opacity: 1, \n      x: 0, \n      scale: 1,\n      transition: { type: \"spring\", stiffness: 400, damping: 25 }\n    },\n    exit: { \n      opacity: 0, \n      x: -50, \n      scale: 0.95,\n      transition: { duration: 0.2 }\n    }\n  };\n\n  // Background style for session\n  const sessionBackgroundStyle = studySession.background ? {\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${studySession.background.url})`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundAttachment: 'fixed'\n  } : {};\n\n  if (currentStep === 'session') {\n    return (\n      <div className=\"min-h-screen\" style={sessionBackgroundStyle}>\n        {/* Top Controls */}\n        <div className=\"absolute top-4 left-4 z-50 flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              setCurrentStep('timer');\n              setIsSessionActive(false);\n              exitFullscreen();\n            }}\n            className=\"bg-white/80 backdrop-blur-sm\"\n            data-testid=\"button-back-to-setup\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Setup\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={toggleFullscreen}\n            className=\"bg-white/80 backdrop-blur-sm\"\n            data-testid=\"button-toggle-fullscreen\"\n          >\n            {isFullscreen ? <Minimize2 className=\"w-4 h-4 mr-2\" /> : <Maximize2 className=\"w-4 h-4 mr-2\" />}\n            {isFullscreen ? 'Exit Focus' : 'Do Not Disturb'}\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            onClick={() => openDictionary()}\n            className=\"bg-white/80 backdrop-blur-sm\"\n            data-testid=\"button-open-dictionary\"\n          >\n            <BookOpen className=\"w-4 h-4 mr-2\" />\n            Dictionary\n          </Button>\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row min-h-screen\">\n          {/* Study Documents Sidebar */}\n          {studySession.documents.length > 0 && (\n            <motion.div\n              initial={{ x: -300, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              className=\"lg:w-80 bg-white/95 backdrop-blur-md border-r border-white/20 p-4 overflow-y-auto\"\n            >\n              <h3 className=\"font-semibold text-lg mb-4 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Study Materials\n              </h3>\n              <div className=\"space-y-2\">\n                {studySession.documents.map((doc) => (\n                  <motion.div \n                    key={doc.id} \n                    className=\"p-3 bg-gray-50 rounded-lg border hover:bg-gray-100 transition-colors\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-sm truncate\">{doc.name}</p>\n                        <p className=\"text-xs text-gray-600\">\n                          {(doc.size / 1024 / 1024).toFixed(2)} MB\n                        </p>\n                      </div>\n                      <div className=\"flex gap-1 ml-2\">\n                        {doc.type === 'application/pdf' && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => openPDFViewer(doc)}\n                            className=\"h-6 w-6 p-0\"\n                            data-testid={`button-view-pdf-${doc.id}`}\n                          >\n                            <Eye className=\"w-3 h-3\" />\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openDictionary()}\n                          className=\"h-6 w-6 p-0\"\n                          data-testid={`button-lookup-${doc.id}`}\n                        >\n                          <Search className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n\n          {/* Main Session Area */}\n          <div className=\"flex-1 flex flex-col items-center justify-center p-6\">\n            <motion.div\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              className=\"max-w-2xl w-full\"\n            >\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/20 shadow-2xl\">\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-2xl font-bold text-gray-800\">\n                    {studySession.title || 'Focus Session'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <StudyTimer\n                    onSessionComplete={handleSessionComplete}\n                    onSessionStart={() => setIsSessionActive(true)}\n                    onSessionPause={onSessionPause}\n                    focusTime={studySession.pomodoroSettings.focusTime}\n                    shortBreak={studySession.pomodoroSettings.shortBreak}\n                    longBreak={studySession.pomodoroSettings.longBreak}\n                    sessions={studySession.pomodoroSettings.sessions}\n                  />\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Music Player */}\n            {studySession.music && (\n              <motion.div\n                initial={{ y: 50, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ delay: 0.3 }}\n                className=\"mt-6 w-full max-w-2xl\"\n              >\n                <Card className=\"bg-white/90 backdrop-blur-md border-white/20\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <Music className=\"w-5 h-5 text-purple-600\" />\n                      <span className=\"font-medium\">{studySession.music.title}</span>\n                      <Badge variant=\"secondary\">{studySession.music.type}</Badge>\n                    </div>\n                    \n                    {studySession.music.type === 'youtube' && (() => {\n                      const secureUrl = validateYouTubeURL(studySession.music.url);\n                      const secureProps = getSecureIframeProps();\n                      \n                      return secureUrl ? (\n                        <div className=\"mt-3 aspect-video bg-black rounded-lg overflow-hidden\">\n                          <iframe\n                            src={secureUrl}\n                            title={studySession.music.title}\n                            frameBorder=\"0\"\n                            {...secureProps}\n                            allowFullScreen\n                            className=\"w-full h-full\"\n                            data-testid=\"iframe-youtube-player\"\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"mt-3 p-4 bg-red-100 border border-red-300 rounded-lg\">\n                          <p className=\"text-red-800 text-sm\">\n                            ⚠️ Invalid YouTube URL. Please use a valid YouTube link.\n                          </p>\n                        </div>\n                      );\n                    })()}\n                    \n                    {studySession.music.type === 'spotify' && (() => {\n                      const secureUrl = validateSpotifyURL(studySession.music.url);\n                      const secureProps = getSecureIframeProps();\n                      \n                      return secureUrl ? (\n                        <div className=\"mt-3 bg-black rounded-lg overflow-hidden\">\n                          <iframe\n                            src={secureUrl}\n                            width=\"100%\"\n                            height=\"352\"\n                            frameBorder=\"0\"\n                            allowTransparency={true}\n                            {...secureProps}\n                            title={studySession.music.title}\n                            className=\"w-full\"\n                            data-testid=\"iframe-spotify-player\"\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"mt-3 p-4 bg-red-100 border border-red-300 rounded-lg\">\n                          <p className=\"text-red-800 text-sm\">\n                            ⚠️ Invalid Spotify URL. Please use a valid Spotify link.\n                          </p>\n                        </div>\n                      );\n                    })()}\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n          </div>\n\n          {/* Floating Companion */}\n          <div className=\"fixed bottom-6 right-6 z-50\">\n            <AvatarCompanion\n              mood={companion.mood}\n              message={companion.message}\n              showMessage={companion.showMessage}\n              onInteraction={companion.showEncouragement}\n              position=\"relative\"\n            />\n          </div>\n        </div>\n\n        {/* PDF Viewer Modal */}\n        {selectedPDF && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <div className=\"w-full max-w-6xl h-[90vh] m-4\">\n              <PDFViewer\n                file={selectedPDF.file}\n                onClose={closePDFViewer}\n                className=\"h-full\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Dictionary Lookup Modal */}\n        <DictionaryLookup\n          isOpen={isDictionaryOpen}\n          onClose={closeDictionary}\n          initialWord={lookupWord}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-6\">\n      {/* Progress Bar */}\n      <div className=\"max-w-4xl mx-auto mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h2 className=\"text-lg font-semibold text-gray-700\">Study Session Setup</h2>\n          <span className=\"text-sm text-gray-600\">\n            Step {currentStepIndex + 1} of {stepOrder.length - 1}\n          </span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Avatar Companion */}\n          <div className=\"lg:col-span-1\">\n            <motion.div\n              initial={{ x: -50, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              className=\"sticky top-6\"\n            >\n              <AvatarCompanion\n                mood={companion.mood}\n                message={getCompanionMessage()}\n                showMessage={true}\n                onInteraction={companion.showEncouragement}\n                size=\"large\"\n                position=\"relative\"\n              />\n            </motion.div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={currentStep}\n                variants={stepVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"exit\"\n              >\n                {/* Step Content */}\n                {currentStep === 'welcome' && (\n                  <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader className=\"text-center pb-4\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\" }}\n                      >\n                        <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-4\">\n                          <Sparkles className=\"w-10 h-10 text-white\" />\n                        </div>\n                      </motion.div>\n                      <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                        Welcome to Solo Study! \n                      </CardTitle>\n                      <p className=\"text-gray-600 text-lg mt-2\">\n                        Let's create your perfect study environment together! ✨\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"text-center\">\n                      <div className=\"space-y-4 mb-8\">\n                        <div className=\"flex items-center justify-center gap-4 p-4 bg-blue-50 rounded-lg\">\n                          <Target className=\"w-6 h-6 text-blue-600\" />\n                          <span className=\"text-blue-800 font-medium\">Focused Learning Environment</span>\n                        </div>\n                        <div className=\"flex items-center justify-center gap-4 p-4 bg-green-50 rounded-lg\">\n                          <Heart className=\"w-6 h-6 text-green-600\" />\n                          <span className=\"text-green-800 font-medium\">Personalized Study Experience</span>\n                        </div>\n                        <div className=\"flex items-center justify-center gap-4 p-4 bg-purple-50 rounded-lg\">\n                          <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n                          <span className=\"text-purple-800 font-medium\">Pomodoro Timer Integration</span>\n                        </div>\n                      </div>\n                      <Button \n                        onClick={nextStep} \n                        size=\"lg\"\n                        className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:from-purple-700 hover:to-pink-700 text-lg px-8 py-3 shadow-lg\"\n                      >\n                        Let's Get Started! \n                        <ArrowRight className=\"w-5 h-5 ml-2\" />\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {currentStep === 'title' && (\n                  <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader>\n                      <CardTitle className=\"text-2xl font-bold text-center\">Name Your Study Session</CardTitle>\n                      <p className=\"text-gray-600 text-center\">Give your session a motivating title (optional)</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"session-title\" className=\"text-lg font-medium\">Session Title</Label>\n                        <Input\n                          id=\"session-title\"\n                          placeholder=\"e.g., 'Mastering Calculus', 'Spanish Vocabulary', 'History Essay'\"\n                          value={studySession.title}\n                          onChange={(e) => setStudySession(prev => ({ ...prev, title: e.target.value }))}\n                          className=\"mt-2 text-lg h-12\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-purple-600 hover:bg-purple-700\">\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {currentStep === 'documents' && (\n                  <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader>\n                      <CardTitle className=\"text-2xl font-bold text-center\">Upload Study Materials</CardTitle>\n                      <p className=\"text-gray-600 text-center\">Add documents, PDFs, or any files you'll need</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div>\n                        <input\n                          type=\"file\"\n                          ref={documentInputRef}\n                          onChange={handleDocumentUpload}\n                          multiple\n                          accept=\".pdf,.doc,.docx,.txt,.ppt,.pptx\"\n                          className=\"hidden\"\n                        />\n                        <Button\n                          onClick={() => documentInputRef.current?.click()}\n                          variant=\"outline\"\n                          size=\"lg\"\n                          className=\"w-full h-32 border-dashed border-2 hover:border-purple-400 hover:bg-purple-50\"\n                        >\n                          <div className=\"text-center\">\n                            <Upload className=\"w-8 h-8 mx-auto mb-2 text-purple-600\" />\n                            <span className=\"text-lg font-medium\">Upload Documents</span>\n                            <p className=\"text-sm text-gray-500 mt-1\">PDF, DOC, TXT, PPT files</p>\n                          </div>\n                        </Button>\n                      </div>\n\n                      {studySession.documents.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium mb-3\">Uploaded Documents ({studySession.documents.length})</h4>\n                          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                            {studySession.documents.map((doc) => (\n                              <div key={doc.id} className=\"p-3 bg-gray-50 rounded-lg border flex items-center justify-between\">\n                                <div>\n                                  <p className=\"font-medium text-sm truncate\">{doc.name}</p>\n                                  <p className=\"text-xs text-gray-600\">\n                                    {(doc.size / 1024 / 1024).toFixed(2)} MB\n                                  </p>\n                                </div>\n                                <FileText className=\"w-5 h-5 text-blue-600\" />\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-purple-600 hover:bg-purple-700\">\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {currentStep === 'background' && (\n                  <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader>\n                      <CardTitle className=\"text-2xl font-bold text-center\">Choose Your Study Environment</CardTitle>\n                      <p className=\"text-gray-600 text-center\">Select a serene background for focus and ambience</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                        {studyBackgrounds.map((bg) => (\n                          <motion.div\n                            key={bg.id}\n                            whileHover={{ scale: 1.05 }}\n                            whileTap={{ scale: 0.95 }}\n                            className={`relative cursor-pointer rounded-lg overflow-hidden border-4 transition-all ${\n                              studySession.background?.id === bg.id \n                                ? 'border-purple-500 shadow-lg' \n                                : 'border-transparent hover:border-purple-300'\n                            }`}\n                            onClick={() => setStudySession(prev => ({ ...prev, background: bg }))}\n                          >\n                            <img\n                              src={bg.preview}\n                              alt={bg.name}\n                              className=\"w-full h-24 object-cover\"\n                            />\n                            <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                              <div className=\"text-center text-white\">\n                                {bg.icon}\n                                <p className=\"text-sm font-medium mt-1\">{bg.name}</p>\n                              </div>\n                            </div>\n                            {studySession.background?.id === bg.id && (\n                              <motion.div\n                                initial={{ scale: 0 }}\n                                animate={{ scale: 1 }}\n                                className=\"absolute top-2 right-2 w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center\"\n                              >\n                                <CheckCircle className=\"w-4 h-4 text-white\" />\n                              </motion.div>\n                            )}\n                          </motion.div>\n                        ))}\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button \n                          onClick={nextStep} \n                          size=\"lg\" \n                          className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                          disabled={!studySession.background}\n                        >\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {currentStep === 'music' && (\n                  <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader>\n                      <CardTitle className=\"text-2xl font-bold text-center\">Add Background Music</CardTitle>\n                      <p className=\"text-gray-600 text-center\">Upload music files or add YouTube/Spotify links</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid gap-4\">\n                        {/* Local Music Upload */}\n                        <div>\n                          <Label className=\"font-medium\">Upload Local Music</Label>\n                          <input\n                            type=\"file\"\n                            ref={musicInputRef}\n                            onChange={handleMusicUpload}\n                            accept=\"audio/*\"\n                            className=\"hidden\"\n                          />\n                          <Button\n                            onClick={() => musicInputRef.current?.click()}\n                            variant=\"outline\"\n                            className=\"w-full mt-2\"\n                          >\n                            <Upload className=\"w-4 h-4 mr-2\" />\n                            Upload Audio File\n                          </Button>\n                        </div>\n\n                        {/* YouTube */}\n                        <div>\n                          <Label className=\"font-medium\">YouTube Music</Label>\n                          <div className=\"flex gap-2 mt-2\">\n                            <Input\n                              placeholder=\"https://youtube.com/watch?v=...\"\n                              value={youtubeUrl}\n                              onChange={(e) => setYoutubeUrl(e.target.value)}\n                            />\n                            <Button onClick={addYouTubeMusic}>Add</Button>\n                          </div>\n                        </div>\n\n                        {/* Spotify */}\n                        <div>\n                          <Label className=\"font-medium\">Spotify Playlist</Label>\n                          <div className=\"flex gap-2 mt-2\">\n                            <Input\n                              placeholder=\"https://open.spotify.com/playlist/...\"\n                              value={spotifyUrl}\n                              onChange={(e) => setSpotifyUrl(e.target.value)}\n                            />\n                            <Button onClick={addSpotifyMusic}>Add</Button>\n                          </div>\n                        </div>\n                      </div>\n\n                      {studySession.music && (\n                        <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                          <div className=\"flex items-center gap-3\">\n                            <Music className=\"w-5 h-5 text-green-600\" />\n                            <div>\n                              <p className=\"font-medium\">{studySession.music.title}</p>\n                              <Badge variant=\"secondary\">{studySession.music.type}</Badge>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-purple-600 hover:bg-purple-700\">\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {currentStep === 'timer' && (\n                  <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader>\n                      <CardTitle className=\"text-2xl font-bold text-center\">Configure Pomodoro Timer</CardTitle>\n                      <p className=\"text-gray-600 text-center\">Set your focus and break intervals</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Focus Time (minutes)</Label>\n                          <Input\n                            type=\"number\"\n                            value={studySession.pomodoroSettings.focusTime}\n                            onChange={(e) => setStudySession(prev => ({\n                              ...prev,\n                              pomodoroSettings: { ...prev.pomodoroSettings, focusTime: parseInt(e.target.value) || 25 }\n                            }))}\n                            min=\"1\"\n                            max=\"120\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label>Short Break (minutes)</Label>\n                          <Input\n                            type=\"number\"\n                            value={studySession.pomodoroSettings.shortBreak}\n                            onChange={(e) => setStudySession(prev => ({\n                              ...prev,\n                              pomodoroSettings: { ...prev.pomodoroSettings, shortBreak: parseInt(e.target.value) || 5 }\n                            }))}\n                            min=\"1\"\n                            max=\"30\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label>Long Break (minutes)</Label>\n                          <Input\n                            type=\"number\"\n                            value={studySession.pomodoroSettings.longBreak}\n                            onChange={(e) => setStudySession(prev => ({\n                              ...prev,\n                              pomodoroSettings: { ...prev.pomodoroSettings, longBreak: parseInt(e.target.value) || 15 }\n                            }))}\n                            min=\"1\"\n                            max=\"60\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label>Sessions Before Long Break</Label>\n                          <Input\n                            type=\"number\"\n                            value={studySession.pomodoroSettings.sessions}\n                            onChange={(e) => setStudySession(prev => ({\n                              ...prev,\n                              pomodoroSettings: { ...prev.pomodoroSettings, sessions: parseInt(e.target.value) || 4 }\n                            }))}\n                            min=\"1\"\n                            max=\"10\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button \n                          onClick={startSession} \n                          size=\"lg\" \n                          className=\"flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white\"\n                        >\n                          Start Study Session!\n                          <Timer className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":41494},"client/src/components/StudyCalendar.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Calendar, momentLocalizer, Views, Event } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Clock, \n  BookOpen, \n  Users, \n  Calendar as CalendarIcon,\n  Sparkles,\n  Target,\n  GraduationCap,\n  UserCheck,\n  Edit,\n  Trash2\n} from \"lucide-react\";\nimport { AvatarCompanion, useAvatarCompanion } from \"./AvatarCompanion\";\nimport { PageTransition, StaggeredContainer, StaggeredItem } from \"./PageTransition\";\n\n// Initialize moment localizer\nconst localizer = momentLocalizer(moment);\n\n// Backend calendar event interface\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  subject: string;\n  start_time: string;\n  end_time: string;\n  session_type: 'solo' | 'group' | 'tutoring';\n  status: 'scheduled' | 'completed' | 'cancelled';\n  reminder_minutes: number;\n  created_at: string;\n}\n\n// React-Big-Calendar event interface\ninterface CalendarEventForBigCalendar extends Event {\n  id: string;\n  resource: CalendarEvent;\n}\n\ninterface StudyCalendarProps {\n  onEventCreate?: (event: any) => void;\n  onEventUpdate?: (eventId: string, updates: any) => void;\n}\n\n// Form interface for creating events\ninterface NewEventForm {\n  title: string;\n  subject: string;\n  start_time: string;\n  end_time: string;\n  session_type: 'solo' | 'group' | 'tutoring';\n  reminder_minutes: number;\n}\n\nconst eventTypeEmojis = {\n  solo: '🧠',\n  group: '👥',\n  tutoring: '👨‍🏫'\n};\n\nconst eventTypeColors = {\n  solo: '#3B82F6', // blue\n  group: '#10B981', // emerald\n  tutoring: '#8B5CF6' // purple\n};\n\nconst eventTypeGradients = {\n  solo: 'from-blue-500 to-blue-600',\n  group: 'from-green-500 to-emerald-600',\n  tutoring: 'from-purple-500 to-pink-600'\n};\n\nexport function StudyCalendar({ onEventCreate, onEventUpdate }: StudyCalendarProps) {\n  const [showEventDialog, setShowEventDialog] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [view, setView] = useState<keyof typeof Views>(Views.MONTH);\n  \n  const [newEvent, setNewEvent] = useState<NewEventForm>({\n    title: '',\n    subject: '',\n    start_time: '',\n    end_time: '',\n    session_type: 'solo',\n    reminder_minutes: 15\n  });\n\n  const companion = useAvatarCompanion();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    companion.welcome();\n  }, [companion]);\n\n  // Fetch calendar events\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: ['/api/events'],\n    queryFn: () => apiRequest('/api/events')\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: (eventData: NewEventForm) => apiRequest('/api/events', {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/events'] });\n      toast({\n        title: \"Success!\",\n        description: \"Study session scheduled successfully! 📅\",\n      });\n      setShowEventDialog(false);\n      resetForm();\n      companion.celebrate();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create study session. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string, updates: Partial<CalendarEvent> }) => \n      apiRequest(`/api/events/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates)\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/events'] });\n      toast({\n        title: \"Updated!\",\n        description: \"Study session updated successfully!\",\n      });\n      setShowEventDialog(false);\n      setSelectedEvent(null);\n      setIsEditing(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update study session. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Transform events for react-big-calendar\n  const calendarEvents: CalendarEventForBigCalendar[] = events.map((event: CalendarEvent) => ({\n    id: event.id,\n    title: event.title,\n    start: new Date(event.start_time),\n    end: new Date(event.end_time),\n    resource: event\n  }));\n\n  const resetForm = () => {\n    setNewEvent({\n      title: '',\n      subject: '',\n      start_time: '',\n      end_time: '',\n      session_type: 'solo',\n      reminder_minutes: 15\n    });\n  };\n\n  const handleSelectSlot = useCallback(({ start, end }: { start: Date, end: Date }) => {\n    setSelectedDate(start);\n    const startTime = moment(start).format('YYYY-MM-DDTHH:mm');\n    const endTime = moment(end).format('YYYY-MM-DDTHH:mm');\n    \n    setNewEvent(prev => ({\n      ...prev,\n      start_time: startTime,\n      end_time: endTime\n    }));\n    setShowEventDialog(true);\n  }, []);\n\n  const handleSelectEvent = useCallback((event: CalendarEventForBigCalendar) => {\n    setSelectedEvent(event.resource);\n    setNewEvent({\n      title: event.resource.title,\n      subject: event.resource.subject,\n      start_time: moment(event.resource.start_time).format('YYYY-MM-DDTHH:mm'),\n      end_time: moment(event.resource.end_time).format('YYYY-MM-DDTHH:mm'),\n      session_type: event.resource.session_type,\n      reminder_minutes: event.resource.reminder_minutes\n    });\n    setIsEditing(true);\n    setShowEventDialog(true);\n  }, []);\n\n  const handleCreateOrUpdateEvent = () => {\n    if (!newEvent.title.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a title for your study session.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (isEditing && selectedEvent) {\n      updateEventMutation.mutate({\n        id: selectedEvent.id,\n        updates: newEvent\n      });\n    } else {\n      createEventMutation.mutate(newEvent);\n    }\n  };\n\n  const eventStyleGetter = (event: CalendarEventForBigCalendar) => {\n    const sessionType = event.resource.session_type;\n    return {\n      style: {\n        backgroundColor: eventTypeColors[sessionType],\n        borderRadius: '8px',\n        opacity: 0.9,\n        color: 'white',\n        border: '0px',\n        display: 'block',\n        fontSize: '0.875rem',\n        fontWeight: '500'\n      }\n    };\n  };\n\n  // Get today's events\n  const todayEvents = events.filter((event: CalendarEvent) => {\n    const eventDate = new Date(event.start_time);\n    const today = new Date();\n    return eventDate.toDateString() === today.toDateString();\n  });\n\n  // Get upcoming events (next 5)\n  const upcomingEvents = events\n    .filter((event: CalendarEvent) => new Date(event.start_time) > new Date())\n    .sort((a: CalendarEvent, b: CalendarEvent) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime())\n    .slice(0, 5);\n\n  const subjects = [\n    'Mathematics', 'Science', 'English', 'History', 'Spanish', 'French', \n    'Art', 'Music', 'Physics', 'Chemistry', 'Biology', 'Geography',\n    'Computer Science', 'Psychology', 'Philosophy'\n  ];\n\n  return (\n    <PageTransition className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-4 gap-6\">\n        {/* Avatar Companion */}\n        <div className=\"lg:col-span-1\">\n          <motion.div\n            initial={{ x: -50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            className=\"sticky top-6\"\n          >\n            <AvatarCompanion\n              mood={companion.mood}\n              message=\"Plan your study sessions here! Consistent scheduling leads to better results! 📅\"\n              showMessage={true}\n              onInteraction={companion.showEncouragement}\n              size=\"large\"\n              position=\"relative\"\n            />\n          </motion.div>\n        </div>\n\n        {/* Main Calendar */}\n        <div className=\"lg:col-span-3 space-y-6\">\n          <StaggeredContainer className=\"space-y-4\">\n            <StaggeredItem>\n              <Card className=\"shadow-lg border-0 bg-gradient-to-r from-purple-50 to-blue-50\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-2xl font-bold font-['Poppins'] flex items-center gap-2\">\n                        <CalendarIcon className=\"w-6 h-6 text-purple-600\" />\n                        Study Calendar\n                      </CardTitle>\n                      <p className=\"text-gray-600 mt-1\">Plan your learning journey</p>\n                    </div>\n                    <Button\n                      onClick={() => {\n                        setIsEditing(false);\n                        setSelectedEvent(null);\n                        resetForm();\n                        setShowEventDialog(true);\n                      }}\n                      className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                      data-testid=\"button-add-session\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Session\n                    </Button>\n                  </div>\n                </CardHeader>\n              </Card>\n            </StaggeredItem>\n\n            {/* Calendar */}\n            <StaggeredItem>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"mb-4 flex justify-between items-center\">\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant={view === Views.MONTH ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setView(Views.MONTH)}\n                        data-testid=\"button-month-view\"\n                      >\n                        Month\n                      </Button>\n                      <Button\n                        variant={view === Views.WEEK ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setView(Views.WEEK)}\n                        data-testid=\"button-week-view\"\n                      >\n                        Week\n                      </Button>\n                      <Button\n                        variant={view === Views.DAY ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setView(Views.DAY)}\n                        data-testid=\"button-day-view\"\n                      >\n                        Day\n                      </Button>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600\">\n                      Click to create • Click event to edit\n                    </div>\n                  </div>\n\n                  <div className=\"h-[600px]\" data-testid=\"calendar-container\">\n                    <Calendar\n                      localizer={localizer}\n                      events={calendarEvents}\n                      startAccessor=\"start\"\n                      endAccessor=\"end\"\n                      style={{ height: 600 }}\n                      view={view}\n                      onView={setView}\n                      onSelectSlot={handleSelectSlot}\n                      onSelectEvent={handleSelectEvent}\n                      selectable\n                      eventPropGetter={eventStyleGetter}\n                      views={['month', 'week', 'day']}\n                      step={60}\n                      showMultiDayTimes\n                      components={{\n                        event: ({ event }: { event: CalendarEventForBigCalendar }) => (\n                          <div className=\"p-1\">\n                            <div className=\"font-medium text-xs\">\n                              {eventTypeEmojis[event.resource.session_type]} {event.title}\n                            </div>\n                            {event.resource.subject && (\n                              <div className=\"text-xs opacity-90\">{event.resource.subject}</div>\n                            )}\n                          </div>\n                        )\n                      }}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </StaggeredItem>\n\n            {/* Today's Events & Upcoming */}\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <StaggeredItem>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n                      Today's Sessions\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {todayEvents.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {todayEvents.map((event: CalendarEvent) => (\n                          <motion.div\n                            key={event.id}\n                            initial={{ x: -20, opacity: 0 }}\n                            animate={{ x: 0, opacity: 1 }}\n                            className={`p-3 rounded-lg bg-gradient-to-r ${eventTypeGradients[event.session_type]} text-white`}\n                            data-testid={`today-event-${event.id}`}\n                          >\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <span className=\"text-lg\">{eventTypeEmojis[event.session_type]}</span>\n                              <span className=\"font-medium\">{event.title}</span>\n                              {event.status === 'completed' && (\n                                <Badge className=\"bg-green-200 text-green-800\">✓ Done</Badge>\n                              )}\n                            </div>\n                            <div className=\"text-sm opacity-90 flex items-center gap-3\">\n                              <span className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {moment(event.start_time).format('HH:mm')}\n                              </span>\n                              <span>\n                                {Math.round(\n                                  (new Date(event.end_time).getTime() - new Date(event.start_time).getTime()) / (1000 * 60)\n                                )}min\n                              </span>\n                              {event.subject && <span>• {event.subject}</span>}\n                            </div>\n                          </motion.div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-6 text-gray-500\">\n                        <Target className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                        <p>No sessions planned for today</p>\n                        <p className=\"text-sm\">Click on the calendar to add one!</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </StaggeredItem>\n\n              <StaggeredItem>\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <BookOpen className=\"w-5 h-5 text-blue-500\" />\n                      Upcoming Sessions\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {upcomingEvents.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {upcomingEvents.map((event: CalendarEvent, index: number) => (\n                          <motion.div\n                            key={event.id}\n                            initial={{ y: 20, opacity: 0 }}\n                            animate={{ y: 0, opacity: 1 }}\n                            transition={{ delay: index * 0.1 }}\n                            className=\"p-3 bg-gray-50 rounded-lg border\"\n                            data-testid={`upcoming-event-${event.id}`}\n                          >\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <span>{eventTypeEmojis[event.session_type]}</span>\n                              <span className=\"font-medium text-sm\">{event.title}</span>\n                            </div>\n                            <div className=\"text-xs text-gray-600\">\n                              {moment(event.start_time).format('MMM DD, YYYY [at] HH:mm')}\n                            </div>\n                            {event.subject && (\n                              <div className=\"text-xs text-gray-500 mt-1\">{event.subject}</div>\n                            )}\n                          </motion.div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-6 text-gray-500\">\n                        <CalendarIcon className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                        <p>No upcoming sessions</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </StaggeredItem>\n            </div>\n          </StaggeredContainer>\n        </div>\n      </div>\n\n      {/* Create/Edit Event Dialog */}\n      <Dialog open={showEventDialog} onOpenChange={setShowEventDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {isEditing ? <Edit className=\"w-5 h-5 text-blue-600\" /> : <Plus className=\"w-5 h-5 text-purple-600\" />}\n              {isEditing ? 'Edit Study Session' : 'Create Study Session'}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"event-title\">Session Title *</Label>\n              <Input\n                id=\"event-title\"\n                placeholder=\"e.g., Calculus Study, Spanish Practice\"\n                value={newEvent.title}\n                onChange={(e) => setNewEvent(prev => ({ ...prev, title: e.target.value }))}\n                className=\"mt-1\"\n                data-testid=\"input-event-title\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"event-subject\">Subject</Label>\n              <Select\n                value={newEvent.subject}\n                onValueChange={(value) => setNewEvent(prev => ({ ...prev, subject: value }))}\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-subject\">\n                  <SelectValue placeholder=\"Choose subject\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {subjects.map(subject => (\n                    <SelectItem key={subject} value={subject}>{subject}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <Label htmlFor=\"start-time\">Start Time *</Label>\n                <Input\n                  id=\"start-time\"\n                  type=\"datetime-local\"\n                  value={newEvent.start_time}\n                  onChange={(e) => setNewEvent(prev => ({ ...prev, start_time: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"input-start-time\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"end-time\">End Time *</Label>\n                <Input\n                  id=\"end-time\"\n                  type=\"datetime-local\"\n                  value={newEvent.end_time}\n                  onChange={(e) => setNewEvent(prev => ({ ...prev, end_time: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"input-end-time\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label>Session Type</Label>\n              <div className=\"flex gap-2 mt-2\">\n                {(['solo', 'group', 'tutoring'] as const).map((type) => (\n                  <Button\n                    key={type}\n                    variant={newEvent.session_type === type ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setNewEvent(prev => ({ ...prev, session_type: type }))}\n                    className=\"flex items-center gap-1\"\n                    data-testid={`button-session-${type}`}\n                  >\n                    <span>{eventTypeEmojis[type]}</span>\n                    {type.charAt(0).toUpperCase() + type.slice(1)}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"reminder\">Reminder</Label>\n              <Select\n                value={newEvent.reminder_minutes.toString()}\n                onValueChange={(value) => setNewEvent(prev => ({ ...prev, reminder_minutes: parseInt(value) }))}\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-reminder\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"5\">5 minutes before</SelectItem>\n                  <SelectItem value=\"15\">15 minutes before</SelectItem>\n                  <SelectItem value=\"30\">30 minutes before</SelectItem>\n                  <SelectItem value=\"60\">1 hour before</SelectItem>\n                  <SelectItem value=\"1440\">1 day before</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowEventDialog(false);\n                  setIsEditing(false);\n                  setSelectedEvent(null);\n                  resetForm();\n                }} \n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateOrUpdateEvent}\n                disabled={!newEvent.title.trim() || createEventMutation.isPending || updateEventMutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                data-testid=\"button-save-event\"\n              >\n                {createEventMutation.isPending || updateEventMutation.isPending ? (\n                  \"Saving...\"\n                ) : (\n                  isEditing ? \"Update Session\" : \"Create Session\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </PageTransition>\n  );\n}","size_bytes":23713},"client/src/components/WelcomeOnboarding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Sparkles, \n  BookOpen, \n  Users, \n  Trophy, \n  ArrowRight, \n  ArrowLeft, \n  Star,\n  Brain,\n  Heart,\n  Target,\n  Gift,\n  Zap\n} from \"lucide-react\";\nimport { AvatarCompanion, useAvatarCompanion } from \"./AvatarCompanion\";\nimport { CelebrationEffect } from \"./PageTransition\";\n\ninterface UserProfile {\n  name: string;\n  age: number;\n  grade: string;\n  subjects: string[];\n  goals: string[];\n  studyStyle: 'visual' | 'auditory' | 'kinesthetic';\n}\n\ninterface WelcomeOnboardingProps {\n  onComplete?: (profile: UserProfile) => void;\n  onSkip?: () => void;\n}\n\ntype OnboardingStep = 'welcome' | 'name' | 'details' | 'subjects' | 'goals' | 'style' | 'celebration';\n\nconst subjectOptions = [\n  { id: 'math', name: 'Mathematics', icon: '📐', color: 'bg-blue-500' },\n  { id: 'science', name: 'Science', icon: '🔬', color: 'bg-green-500' },\n  { id: 'english', name: 'English', icon: '📚', color: 'bg-purple-500' },\n  { id: 'history', name: 'History', icon: '🏛️', color: 'bg-orange-500' },\n  { id: 'spanish', name: 'Spanish', icon: '🇪🇸', color: 'bg-red-500' },\n  { id: 'french', name: 'French', icon: '🇫🇷', color: 'bg-pink-500' },\n  { id: 'art', name: 'Art', icon: '🎨', color: 'bg-yellow-500' },\n  { id: 'music', name: 'Music', icon: '🎵', color: 'bg-indigo-500' }\n];\n\nconst studyGoals = [\n  { id: 'grades', name: 'Improve Grades', icon: '📈', description: 'Get better test scores' },\n  { id: 'confidence', name: 'Build Confidence', icon: '💪', description: 'Feel more sure about learning' },\n  { id: 'habits', name: 'Study Habits', icon: '⏰', description: 'Create a consistent routine' },\n  { id: 'focus', name: 'Better Focus', icon: '🎯', description: 'Concentrate without distractions' },\n  { id: 'fun', name: 'Make Learning Fun', icon: '🎉', description: 'Enjoy the learning process' },\n  { id: 'friends', name: 'Study with Friends', icon: '👥', description: 'Learn together with peers' }\n];\n\nconst studyStyles = [\n  { \n    id: 'visual', \n    name: 'Visual Learner', \n    icon: '👀', \n    description: 'I learn best with pictures, charts, and colors',\n    example: 'Diagrams and mind maps help me understand'\n  },\n  { \n    id: 'auditory', \n    name: 'Audio Learner', \n    icon: '👂', \n    description: 'I learn best by listening and discussing',\n    example: 'I like explanations and talking through problems'\n  },\n  { \n    id: 'kinesthetic', \n    name: 'Hands-on Learner', \n    icon: '✋', \n    description: 'I learn best by doing and moving',\n    example: 'I need to try things myself and stay active'\n  }\n];\n\nconst welcomeFeatures = [\n  {\n    icon: Brain,\n    title: \"Smart Study Sessions\",\n    description: \"AI-powered focus time that adapts to your learning style\",\n    color: \"text-blue-500\"\n  },\n  {\n    icon: Users,\n    title: \"Study Together\",\n    description: \"Join virtual study rooms with students from around the world\",\n    color: \"text-green-500\"\n  },\n  {\n    icon: Trophy,\n    title: \"Level Up Learning\",\n    description: \"Earn XP, unlock achievements, and build study streaks\",\n    color: \"text-yellow-500\"\n  }\n];\n\nexport function WelcomeOnboarding({ onComplete, onSkip }: WelcomeOnboardingProps) {\n  const [currentStep, setCurrentStep] = useState<OnboardingStep>('welcome');\n  const [profile, setProfile] = useState<UserProfile>({\n    name: '',\n    age: 13,\n    grade: '7th Grade',\n    subjects: [],\n    goals: [],\n    studyStyle: 'visual'\n  });\n  const [showCelebration, setShowCelebration] = useState(false);\n  const companion = useAvatarCompanion();\n\n  const steps: OnboardingStep[] = ['welcome', 'name', 'details', 'subjects', 'goals', 'style', 'celebration'];\n  const currentStepIndex = steps.indexOf(currentStep);\n  const progress = ((currentStepIndex + 1) / steps.length) * 100;\n\n  useEffect(() => {\n    if (currentStep === 'celebration') {\n      setShowCelebration(true);\n      companion.celebrate();\n    }\n  }, [currentStep, companion]);\n\n  const nextStep = () => {\n    if (currentStepIndex < steps.length - 1) {\n      setCurrentStep(steps[currentStepIndex + 1]);\n      companion.showEncouragement();\n    } else {\n      onComplete?.(profile);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStepIndex > 0) {\n      setCurrentStep(steps[currentStepIndex - 1]);\n    }\n  };\n\n  const toggleSubject = (subjectId: string) => {\n    setProfile(prev => ({\n      ...prev,\n      subjects: prev.subjects.includes(subjectId)\n        ? prev.subjects.filter(s => s !== subjectId)\n        : [...prev.subjects, subjectId]\n    }));\n  };\n\n  const toggleGoal = (goalId: string) => {\n    setProfile(prev => ({\n      ...prev,\n      goals: prev.goals.includes(goalId)\n        ? prev.goals.filter(g => g !== goalId)\n        : [...prev.goals, goalId]\n    }));\n  };\n\n  const stepVariants = {\n    hidden: { opacity: 0, x: 100, scale: 0.9 },\n    visible: { \n      opacity: 1, \n      x: 0, \n      scale: 1,\n      transition: { \n        type: \"spring\", \n        stiffness: 300, \n        damping: 30,\n        staggerChildren: 0.1\n      }\n    },\n    exit: { \n      opacity: 0, \n      x: -100, \n      scale: 0.9,\n      transition: { duration: 0.2 }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: { type: \"spring\", stiffness: 400, damping: 25 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50 p-4 overflow-auto\">\n      <CelebrationEffect \n        isVisible={showCelebration} \n        onComplete={() => setShowCelebration(false)}\n      />\n      \n      {/* Progress Bar */}\n      {currentStep !== 'welcome' && currentStep !== 'celebration' && (\n        <motion.div \n          className=\"max-w-4xl mx-auto mb-6\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-gray-600\">Getting to know you...</span>\n            <span className=\"text-sm text-gray-600\">Step {currentStepIndex} of {steps.length - 2}</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </motion.div>\n      )}\n\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid lg:grid-cols-4 gap-6\">\n          {/* Avatar Companion */}\n          <div className=\"lg:col-span-1\">\n            <motion.div\n              initial={{ x: -50, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              className=\"sticky top-6\"\n            >\n              <AvatarCompanion\n                mood={companion.mood}\n                message={companion.message}\n                showMessage={companion.showMessage}\n                onInteraction={companion.showEncouragement}\n                size=\"large\"\n                position=\"relative\"\n              />\n            </motion.div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={currentStep}\n                variants={stepVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"exit\"\n                className=\"space-y-6\"\n              >\n                {/* Welcome Step */}\n                {currentStep === 'welcome' && (\n                  <div className=\"text-center space-y-8\">\n                    <motion.div variants={itemVariants}>\n                      <motion.div\n                        animate={{ \n                          scale: [1, 1.1, 1],\n                          rotate: [0, 5, -5, 0]\n                        }}\n                        transition={{\n                          duration: 3,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"text-8xl mb-4\"\n                      >\n                        🎓\n                      </motion.div>\n                      <h1 className=\"text-5xl font-bold font-['Poppins'] bg-gradient-to-r from-purple-600 via-blue-600 to-pink-600 bg-clip-text text-transparent mb-4\">\n                        Welcome to StudySync!\n                      </h1>\n                      <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n                        Your personal AI study companion that makes learning fun, focused, and social! \n                        Let's create your perfect study environment together! ✨\n                      </p>\n                    </motion.div>\n\n                    <motion.div \n                      variants={itemVariants}\n                      className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto\"\n                    >\n                      {welcomeFeatures.map((feature, index) => (\n                        <motion.div\n                          key={index}\n                          variants={itemVariants}\n                          whileHover={{ y: -8, scale: 1.05 }}\n                          className=\"bg-white rounded-2xl p-6 shadow-lg border border-gray-100\"\n                        >\n                          <feature.icon className={`w-12 h-12 ${feature.color} mx-auto mb-4`} />\n                          <h3 className=\"text-lg font-bold mb-2\">{feature.title}</h3>\n                          <p className=\"text-gray-600 text-sm\">{feature.description}</p>\n                        </motion.div>\n                      ))}\n                    </motion.div>\n\n                    <motion.div variants={itemVariants} className=\"space-y-4\">\n                      <Button\n                        onClick={nextStep}\n                        size=\"lg\"\n                        className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white text-lg px-8 py-4 rounded-xl shadow-lg\"\n                      >\n                        Let's Get Started! 🚀\n                        <ArrowRight className=\"w-5 h-5 ml-2\" />\n                      </Button>\n                      <div>\n                        <Button variant=\"ghost\" onClick={onSkip} className=\"text-gray-500\">\n                          Skip for now\n                        </Button>\n                      </div>\n                    </motion.div>\n                  </div>\n                )}\n\n                {/* Name Step */}\n                {currentStep === 'name' && (\n                  <Card className=\"max-w-2xl mx-auto shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader className=\"text-center pb-4\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\" }}\n                      >\n                        <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center mb-4\">\n                          <Heart className=\"w-8 h-8 text-white\" />\n                        </div>\n                      </motion.div>\n                      <CardTitle className=\"text-2xl font-bold\">What's your name?</CardTitle>\n                      <p className=\"text-gray-600\">Help us personalize your experience!</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"name\" className=\"text-lg font-medium\">First Name</Label>\n                        <Input\n                          id=\"name\"\n                          placeholder=\"Enter your first name\"\n                          value={profile.name}\n                          onChange={(e) => setProfile(prev => ({ ...prev, name: e.target.value }))}\n                          className=\"mt-2 text-lg h-12 rounded-xl\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1 rounded-xl\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button \n                          onClick={nextStep} \n                          disabled={!profile.name.trim()}\n                          size=\"lg\" \n                          className=\"flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 rounded-xl\"\n                        >\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Details Step */}\n                {currentStep === 'details' && (\n                  <Card className=\"max-w-2xl mx-auto shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader className=\"text-center pb-4\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\" }}\n                      >\n                        <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center mb-4\">\n                          <Star className=\"w-8 h-8 text-white\" />\n                        </div>\n                      </motion.div>\n                      <CardTitle className=\"text-2xl font-bold\">Tell us about yourself!</CardTitle>\n                      <p className=\"text-gray-600\">This helps us create the perfect learning experience for you</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"age\" className=\"text-lg font-medium\">Age</Label>\n                          <Input\n                            id=\"age\"\n                            type=\"number\"\n                            min=\"8\"\n                            max=\"25\"\n                            value={profile.age}\n                            onChange={(e) => setProfile(prev => ({ ...prev, age: parseInt(e.target.value) || 13 }))}\n                            className=\"mt-2 text-lg h-12 rounded-xl\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"grade\" className=\"text-lg font-medium\">Grade Level</Label>\n                          <Input\n                            id=\"grade\"\n                            placeholder=\"e.g., 7th Grade, High School\"\n                            value={profile.grade}\n                            onChange={(e) => setProfile(prev => ({ ...prev, grade: e.target.value }))}\n                            className=\"mt-2 text-lg h-12 rounded-xl\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1 rounded-xl\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 rounded-xl\">\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Subjects Step */}\n                {currentStep === 'subjects' && (\n                  <Card className=\"max-w-4xl mx-auto shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader className=\"text-center pb-4\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\" }}\n                      >\n                        <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center mb-4\">\n                          <BookOpen className=\"w-8 h-8 text-white\" />\n                        </div>\n                      </motion.div>\n                      <CardTitle className=\"text-2xl font-bold\">What subjects are you studying?</CardTitle>\n                      <p className=\"text-gray-600\">Select all that apply - we'll customize your experience!</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                        {subjectOptions.map((subject) => {\n                          const isSelected = profile.subjects.includes(subject.id);\n                          return (\n                            <motion.button\n                              key={subject.id}\n                              onClick={() => toggleSubject(subject.id)}\n                              className={`p-4 rounded-xl border-2 text-center transition-all ${\n                                isSelected \n                                  ? 'border-purple-400 bg-purple-50 shadow-md' \n                                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                              }`}\n                              whileHover={{ scale: 1.05 }}\n                              whileTap={{ scale: 0.95 }}\n                            >\n                              <div className=\"text-2xl mb-2\">{subject.icon}</div>\n                              <div className=\"text-sm font-medium\">{subject.name}</div>\n                            </motion.button>\n                          );\n                        })}\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1 rounded-xl\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700 rounded-xl\">\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Goals Step */}\n                {currentStep === 'goals' && (\n                  <Card className=\"max-w-4xl mx-auto shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader className=\"text-center pb-4\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\" }}\n                      >\n                        <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-pink-500 to-red-500 rounded-full flex items-center justify-center mb-4\">\n                          <Target className=\"w-8 h-8 text-white\" />\n                        </div>\n                      </motion.div>\n                      <CardTitle className=\"text-2xl font-bold\">What are your study goals?</CardTitle>\n                      <p className=\"text-gray-600\">Choose what you'd like to achieve - we'll help you get there!</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        {studyGoals.map((goal) => {\n                          const isSelected = profile.goals.includes(goal.id);\n                          return (\n                            <motion.button\n                              key={goal.id}\n                              onClick={() => toggleGoal(goal.id)}\n                              className={`p-4 rounded-xl border-2 text-left transition-all ${\n                                isSelected \n                                  ? 'border-pink-400 bg-pink-50 shadow-md' \n                                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                              }`}\n                              whileHover={{ scale: 1.02 }}\n                              whileTap={{ scale: 0.98 }}\n                            >\n                              <div className=\"flex items-start gap-3\">\n                                <div className=\"text-2xl\">{goal.icon}</div>\n                                <div>\n                                  <div className=\"font-medium\">{goal.name}</div>\n                                  <div className=\"text-sm text-gray-600\">{goal.description}</div>\n                                </div>\n                              </div>\n                            </motion.button>\n                          );\n                        })}\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1 rounded-xl\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-gradient-to-r from-pink-600 to-red-600 hover:from-pink-700 hover:to-red-700 rounded-xl\">\n                          Continue\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Learning Style Step */}\n                {currentStep === 'style' && (\n                  <Card className=\"max-w-4xl mx-auto shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n                    <CardHeader className=\"text-center pb-4\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\" }}\n                      >\n                        <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center mb-4\">\n                          <Brain className=\"w-8 h-8 text-white\" />\n                        </div>\n                      </motion.div>\n                      <CardTitle className=\"text-2xl font-bold\">How do you learn best?</CardTitle>\n                      <p className=\"text-gray-600\">Understanding your learning style helps us create the perfect study experience</p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        {studyStyles.map((style) => {\n                          const isSelected = profile.studyStyle === style.id;\n                          return (\n                            <motion.button\n                              key={style.id}\n                              onClick={() => setProfile(prev => ({ ...prev, studyStyle: style.id as any }))}\n                              className={`w-full p-6 rounded-xl border-2 text-left transition-all ${\n                                isSelected \n                                  ? 'border-indigo-400 bg-indigo-50 shadow-md' \n                                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                              }`}\n                              whileHover={{ scale: 1.02 }}\n                              whileTap={{ scale: 0.98 }}\n                            >\n                              <div className=\"flex items-start gap-4\">\n                                <div className=\"text-3xl\">{style.icon}</div>\n                                <div className=\"flex-1\">\n                                  <div className=\"text-lg font-bold mb-1\">{style.name}</div>\n                                  <div className=\"text-gray-700 mb-2\">{style.description}</div>\n                                  <div className=\"text-sm text-gray-600 italic\">\"{style.example}\"</div>\n                                </div>\n                                {isSelected && (\n                                  <motion.div\n                                    initial={{ scale: 0 }}\n                                    animate={{ scale: 1 }}\n                                    className=\"text-indigo-600\"\n                                  >\n                                    <Sparkles className=\"w-6 h-6\" />\n                                  </motion.div>\n                                )}\n                              </div>\n                            </motion.button>\n                          );\n                        })}\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button onClick={prevStep} variant=\"outline\" size=\"lg\" className=\"flex-1 rounded-xl\">\n                          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                          Back\n                        </Button>\n                        <Button onClick={nextStep} size=\"lg\" className=\"flex-1 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 rounded-xl\">\n                          Complete Setup! \n                          <Gift className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Celebration Step */}\n                {currentStep === 'celebration' && (\n                  <div className=\"text-center space-y-8\">\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ type: \"spring\", stiffness: 200, damping: 20 }}\n                    >\n                      <motion.div\n                        animate={{ \n                          rotate: 360,\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{\n                          rotate: { duration: 2, repeat: Infinity, ease: \"linear\" },\n                          scale: { duration: 1, repeat: Infinity, ease: \"easeInOut\" }\n                        }}\n                        className=\"text-8xl mb-6\"\n                      >\n                        🎉\n                      </motion.div>\n                      <h1 className=\"text-4xl font-bold font-['Poppins'] bg-gradient-to-r from-purple-600 via-pink-600 to-orange-600 bg-clip-text text-transparent mb-4\">\n                        Welcome to StudySync, {profile.name}!\n                      </h1>\n                      <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-6\">\n                        Your personalized learning journey is ready! We've prepared everything based on your preferences.\n                      </p>\n                    </motion.div>\n\n                    <motion.div \n                      className=\"grid md:grid-cols-3 gap-4 max-w-3xl mx-auto mb-8\"\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.5 }}\n                    >\n                      <div className=\"bg-gradient-to-br from-purple-100 to-pink-100 p-4 rounded-xl border border-purple-200\">\n                        <div className=\"text-2xl mb-2\">🏆</div>\n                        <div className=\"font-bold text-purple-800\">Welcome Bonus</div>\n                        <div className=\"text-sm text-purple-600\">+100 XP & First Achievement!</div>\n                      </div>\n                      <div className=\"bg-gradient-to-br from-blue-100 to-cyan-100 p-4 rounded-xl border border-blue-200\">\n                        <div className=\"text-2xl mb-2\">⭐</div>\n                        <div className=\"font-bold text-blue-800\">Level 1 Unlocked</div>\n                        <div className=\"text-sm text-blue-600\">Your learning adventure begins!</div>\n                      </div>\n                      <div className=\"bg-gradient-to-br from-green-100 to-emerald-100 p-4 rounded-xl border border-green-200\">\n                        <div className=\"text-2xl mb-2\">🎯</div>\n                        <div className=\"font-bold text-green-800\">Goals Set</div>\n                        <div className=\"text-sm text-green-600\">We'll help you achieve them!</div>\n                      </div>\n                    </motion.div>\n\n                    <motion.div\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.8 }}\n                    >\n                      <Button\n                        onClick={() => onComplete?.(profile)}\n                        size=\"lg\"\n                        className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white text-lg px-8 py-4 rounded-xl shadow-lg\"\n                      >\n                        Start My Learning Journey! \n                        <Zap className=\"w-5 h-5 ml-2\" />\n                      </Button>\n                    </motion.div>\n                  </div>\n                )}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":30255},"client/src/components/ui/animated-button.tsx":{"content":"import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Sparkles, Zap } from \"lucide-react\";\n\nconst animatedButtonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        duolingo: \"bg-gradient-to-r from-green-500 to-green-600 text-white font-bold border-b-4 border-green-700 hover:from-green-600 hover:to-green-700 active:border-b-2 active:translate-y-0.5\",\n        success: \"bg-gradient-to-r from-emerald-500 to-emerald-600 text-white font-bold border-b-4 border-emerald-700 hover:from-emerald-600 hover:to-emerald-700\",\n        warning: \"bg-gradient-to-r from-amber-500 to-amber-600 text-white font-bold border-b-4 border-amber-700 hover:from-amber-600 hover:to-amber-700\",\n        magic: \"bg-gradient-to-r from-purple-500 via-pink-500 to-purple-600 text-white font-bold border-b-4 border-purple-700 hover:from-purple-600 hover:via-pink-600 hover:to-purple-700\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        xl: \"h-14 rounded-lg px-10 text-lg\",\n        icon: \"h-10 w-10\",\n      },\n      animation: {\n        none: \"\",\n        bounce: \"\",\n        pulse: \"\",\n        shake: \"\",\n        wiggle: \"\",\n        sparkle: \"\",\n        glow: \"\",\n        rainbow: \"\",\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      animation: \"none\",\n    },\n  }\n);\n\nconst buttonAnimations = {\n  bounce: {\n    whileHover: { \n      scale: 1.05,\n      y: -2,\n      transition: { type: \"spring\", stiffness: 400, damping: 17 }\n    },\n    whileTap: { \n      scale: 0.95,\n      y: 0,\n      transition: { type: \"spring\", stiffness: 400, damping: 17 }\n    }\n  },\n  pulse: {\n    whileHover: {\n      scale: [1, 1.05, 1],\n      transition: { \n        repeat: Infinity, \n        duration: 1.5,\n        ease: \"easeInOut\"\n      }\n    },\n    whileTap: { scale: 0.95 }\n  },\n  shake: {\n    whileHover: {\n      x: [-1, 1, -1, 1, 0],\n      transition: { \n        repeat: Infinity, \n        duration: 0.5,\n        ease: \"easeInOut\"\n      }\n    },\n    whileTap: { scale: 0.95 }\n  },\n  wiggle: {\n    whileHover: {\n      rotate: [0, -5, 5, -5, 5, 0],\n      transition: { \n        repeat: Infinity, \n        duration: 1,\n        ease: \"easeInOut\"\n      }\n    },\n    whileTap: { scale: 0.95 }\n  },\n  sparkle: {\n    whileHover: { \n      scale: 1.05,\n      boxShadow: \"0 0 20px rgba(255, 215, 0, 0.6)\"\n    },\n    whileTap: { scale: 0.95 }\n  },\n  glow: {\n    whileHover: {\n      boxShadow: [\n        \"0 0 0px rgba(59, 130, 246, 0.5)\",\n        \"0 0 20px rgba(59, 130, 246, 0.8)\",\n        \"0 0 0px rgba(59, 130, 246, 0.5)\"\n      ],\n      transition: { \n        repeat: Infinity, \n        duration: 2,\n        ease: \"easeInOut\"\n      }\n    },\n    whileTap: { scale: 0.95 }\n  },\n  rainbow: {\n    whileHover: {\n      background: [\n        \"linear-gradient(45deg, #ff0000, #ff7f00)\",\n        \"linear-gradient(45deg, #ff7f00, #ffff00)\",\n        \"linear-gradient(45deg, #ffff00, #00ff00)\",\n        \"linear-gradient(45deg, #00ff00, #0000ff)\",\n        \"linear-gradient(45deg, #0000ff, #4b0082)\",\n        \"linear-gradient(45deg, #4b0082, #9400d3)\",\n        \"linear-gradient(45deg, #9400d3, #ff0000)\"\n      ],\n      transition: { \n        repeat: Infinity, \n        duration: 3,\n        ease: \"linear\"\n      }\n    },\n    whileTap: { scale: 0.95 }\n  }\n};\n\nexport interface AnimatedButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof animatedButtonVariants> {\n  asChild?: boolean;\n  showSparkles?: boolean;\n  glowColor?: string;\n}\n\nconst AnimatedButton = React.forwardRef<HTMLButtonElement, AnimatedButtonProps>(\n  ({ className, variant, size, animation = \"bounce\", asChild = false, showSparkles = false, children, ...props }, ref) => {\n    const animationProps = animation && animation !== \"none\" && buttonAnimations[animation] ? buttonAnimations[animation] : {};\n\n    if (asChild) {\n      return (\n        <Slot\n          className={cn(animatedButtonVariants({ variant, size, className }))}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </Slot>\n      );\n    }\n\n    return (\n      <motion.button\n        className={cn(animatedButtonVariants({ variant, size, className }))}\n        ref={ref}\n        {...animationProps}\n        {...props}\n      >\n        {/* Sparkle Effect */}\n        {showSparkles && (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none\"\n            initial={{ opacity: 0 }}\n            whileHover={{ opacity: 1 }}\n          >\n            {[...Array(3)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-1 h-1 bg-yellow-300 rounded-full\"\n                style={{\n                  left: `${20 + i * 30}%`,\n                  top: `${20 + i * 20}%`,\n                }}\n                animate={{\n                  scale: [0, 1, 0],\n                  opacity: [0, 1, 0],\n                }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 2,\n                  delay: i * 0.3,\n                  ease: \"easeInOut\"\n                }}\n              />\n            ))}\n          </motion.div>\n        )}\n\n        {/* Ripple Effect */}\n        <motion.div\n          className=\"absolute inset-0 rounded-md\"\n          whileTap={{\n            background: \"radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%)\",\n          }}\n          transition={{ duration: 0.3 }}\n        />\n\n        {/* Content */}\n        <span className=\"relative z-10 flex items-center gap-2\">\n          {children}\n        </span>\n      </Comp>\n    );\n  }\n);\n\nAnimatedButton.displayName = \"AnimatedButton\";\n\nexport { AnimatedButton, animatedButtonVariants };","size_bytes":6685},"replit.md":{"content":"# StudySync Web - Student Learning Platform\n\n## Overview\n\nStudySync is a comprehensive web application designed for primary school students, providing a distraction-free online environment for solo study, group collaboration, and tutoring sessions. The platform combines gamification elements with educational tools to create an engaging and productive learning experience.\n\nThe application focuses on three core study modes:\n- **Solo Study Sessions**: Private study rooms with customizable environments, timers, and document management\n- **Group Study Rooms**: Collaborative spaces with video/audio chat and real-time messaging\n- **Tutor Connections**: One-on-one tutoring sessions with qualified educators\n\nKey features include achievement systems, study streak tracking, interactive calendars, and customizable study environments that help young students stay focused and motivated in their learning journey.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a **React-based Single Page Application (SPA)** built with TypeScript and Vite for fast development and hot reloading. The UI is constructed using a **component-driven architecture** with shadcn/ui as the primary component library, providing consistent design patterns and accessibility features.\n\n**State Management**: React hooks and context for local state, with TanStack Query for server state management and caching. This approach provides efficient data fetching with automatic background updates and optimistic UI updates.\n\n**Styling System**: Tailwind CSS with a comprehensive design system featuring custom color palettes for light/dark modes, consistent spacing units, and Discord/Notion-inspired layouts. The design emphasizes youth-friendly aesthetics with vibrant colors and engaging animations using Framer Motion.\n\n**Routing**: Single-page application with client-side routing managed through React state, avoiding traditional routing libraries for simplified navigation between dashboard, study rooms, calendar, and achievement views.\n\n### Backend Architecture\nThe backend follows a **RESTful API architecture** using Express.js with TypeScript. The server implements a modular structure with separate route handlers and business logic organized in the storage layer.\n\n**Database Layer**: PostgreSQL with Drizzle ORM for type-safe database operations. The schema includes comprehensive tables for users, study sessions, achievements, calendar events, and group study rooms with proper relationships and constraints.\n\n**Authentication**: Session-based authentication system with secure password handling and user profile management capabilities.\n\n**API Design**: RESTful endpoints following conventional HTTP methods, with consistent error handling and response formatting. All routes are prefixed with `/api` for clear separation from frontend assets.\n\n### Data Storage Solutions\n**Primary Database**: PostgreSQL hosted on Neon serverless platform for scalable, managed database infrastructure. The database schema supports complex relationships between users, study sessions, achievements, and collaborative features.\n\n**File Storage**: Planned integration with cloud storage services for user avatars, study materials, and document uploads during study sessions.\n\n**Session Management**: Server-side session storage using connect-pg-simple for PostgreSQL-backed session persistence.\n\n### Authentication and Authorization\n**User Authentication**: Email/password authentication with secure password hashing and session management. The system supports user profiles with customizable display names, avatars, and study preferences.\n\n**Authorization Model**: Role-based access control distinguishing between students and tutors, with appropriate permissions for creating/joining study rooms and accessing tutoring features.\n\n**Session Security**: HTTP-only cookies for session management with CSRF protection and secure cookie settings in production environments.\n\n### External Dependencies\n**UI Framework**: Extensive use of Radix UI primitives through shadcn/ui for accessible, unstyled components including dialogs, dropdowns, calendars, and form controls.\n\n**Animation Library**: Framer Motion for smooth page transitions, loading states, and interactive feedback that enhances the user experience with Duolingo-inspired animations.\n\n**Form Handling**: React Hook Form with Zod validation for type-safe form validation and error handling across authentication and user input forms.\n\n**Date Management**: date-fns library for calendar functionality, study session scheduling, and time-based features like study streaks and session duration tracking.\n\n**Development Tools**: TypeScript for type safety, Vite for fast development builds, and ESBuild for production bundling with Node.js compatibility.\n\n## Recent Changes\n\n### December 25, 2025 - Replit Environment Setup Complete\n- Successfully imported the StudySync codebase into Replit environment\n- Fixed npm script dependencies (updated to use npx tsx for TypeScript execution)\n- Created and configured PostgreSQL database with DATABASE_URL environment variable\n- Pushed complete database schema with all tables and relationships\n- Updated database configuration from Neon serverless to Replit PostgreSQL\n- Configured development workflow to serve on port 5000 with proper host settings\n- Verified Vite development server configuration with allowedHosts: true for Replit proxy\n- Set up deployment configuration for autoscale deployment target\n- Confirmed application is running successfully with frontend and backend integration working correctly\n- All API endpoints responding properly and Vite hot-reloading functional\n\n### September 27, 2025 - Fresh Import Setup Complete\n- Successfully set up fresh GitHub import in Replit environment\n- Verified all existing configuration was already optimized for Replit\n- Installed tsx dependency for TypeScript execution\n- Created new PostgreSQL database and pushed complete schema\n- Configured workflow with webview output type on port 5000\n- Verified frontend proxy configuration (allowedHosts: true) working correctly\n- Confirmed application loads with login interface and authentication system\n- Set up deployment configuration for autoscale target\n- All systems functional and ready for development\n\n## Setup Instructions\n\n### Development Environment\nThe application is configured to run in the Replit environment with:\n- Frontend served on port 5000 (required for Replit proxy)\n- PostgreSQL database with connection managed through Replit's DATABASE_URL\n- Hot reloading enabled for development\n- All dependencies installed and configured\n\n### Running the Application\n1. The \"Start application\" workflow is configured to run `npm run dev`\n2. This starts both the Express backend server and Vite frontend development server\n3. The application will be accessible through the Replit webview\n\n### Database\n- PostgreSQL database is provisioned and configured\n- Database schema includes tables for users, study sessions, achievements, calendar events, and group study rooms\n- All migrations are handled through Drizzle ORM with `npm run db:push`","size_bytes":7218},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: false // Disable SSL for local Replit database\n});\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":445},"client/src/components/DictionaryLookup.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Search, \n  BookOpen, \n  Volume2, \n  X, \n  AlertCircle,\n  ExternalLink\n} from \"lucide-react\";\n\ninterface DictionaryEntry {\n  word: string;\n  phonetic?: string;\n  meanings: Meaning[];\n  sourceUrls: string[];\n}\n\ninterface Meaning {\n  partOfSpeech: string;\n  definitions: Definition[];\n  synonyms: string[];\n  antonyms: string[];\n}\n\ninterface Definition {\n  definition: string;\n  example?: string;\n  synonyms: string[];\n  antonyms: string[];\n}\n\ninterface DictionaryLookupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialWord?: string;\n}\n\nexport function DictionaryLookup({ isOpen, onClose, initialWord = \"\" }: DictionaryLookupProps) {\n  const [searchWord, setSearchWord] = useState(initialWord);\n  const [result, setResult] = useState<DictionaryEntry | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const searchDictionary = async (word: string) => {\n    if (!word.trim()) return;\n\n    setIsLoading(true);\n    setError(null);\n    setResult(null);\n\n    try {\n      const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(word.trim())}`);\n      \n      if (!response.ok) {\n        throw new Error('Word not found');\n      }\n\n      const data = await response.json();\n      if (data && data.length > 0) {\n        setResult(data[0] as DictionaryEntry);\n      } else {\n        throw new Error('No definition found');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch definition');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSearch = () => {\n    searchDictionary(searchWord);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const playPronunciation = (text: string) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 0.8;\n      utterance.pitch = 1;\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"\n      data-testid=\"dictionary-overlay\"\n    >\n      <motion.div\n        initial={{ scale: 0.9, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        exit={{ scale: 0.9, opacity: 0 }}\n        className=\"w-full max-w-2xl max-h-[90vh] m-4\"\n      >\n        <Card className=\"shadow-2xl\">\n          <CardHeader className=\"border-b\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"w-5 h-5 text-blue-600\" />\n                Dictionary Lookup\n              </CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                data-testid=\"button-close-dictionary\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-6\">\n            {/* Search Input */}\n            <div className=\"flex gap-2 mb-6\">\n              <Input\n                placeholder=\"Enter a word to look up...\"\n                value={searchWord}\n                onChange={(e) => setSearchWord(e.target.value)}\n                onKeyPress={handleKeyPress}\n                className=\"flex-1\"\n                data-testid=\"input-dictionary-search\"\n              />\n              <Button \n                onClick={handleSearch}\n                disabled={!searchWord.trim() || isLoading}\n                data-testid=\"button-search-dictionary\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                {isLoading ? 'Searching...' : 'Search'}\n              </Button>\n            </div>\n\n            {/* Results */}\n            <div className=\"max-h-[60vh] overflow-y-auto\">\n              {isLoading && (\n                <div className=\"space-y-4\">\n                  <Skeleton className=\"h-6 w-48\" />\n                  <Skeleton className=\"h-4 w-32\" />\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-3/4\" />\n                  </div>\n                </div>\n              )}\n\n              {error && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"flex items-center justify-center py-8\"\n                >\n                  <div className=\"text-center\">\n                    <AlertCircle className=\"w-12 h-12 text-orange-500 mx-auto mb-2\" />\n                    <p className=\"text-gray-600 font-medium\">{error}</p>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Try checking the spelling or search for a different word.\n                    </p>\n                  </div>\n                </motion.div>\n              )}\n\n              {result && (\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"space-y-6\"\n                  data-testid=\"dictionary-result\"\n                >\n                  {/* Word Header */}\n                  <div className=\"border-b pb-4\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <h2 className=\"text-3xl font-bold text-gray-800\">\n                        {result.word}\n                      </h2>\n                      {result.phonetic && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => playPronunciation(result.word)}\n                          className=\"flex items-center gap-1 text-blue-600 hover:text-blue-700\"\n                          data-testid=\"button-pronunciation\"\n                        >\n                          <Volume2 className=\"w-4 h-4\" />\n                          <span className=\"text-sm font-mono\">{result.phonetic}</span>\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Meanings */}\n                  <div className=\"space-y-6\">\n                    {result.meanings.map((meaning, meaningIndex) => (\n                      <div key={meaningIndex} className=\"space-y-3\">\n                        <Badge variant=\"outline\" className=\"mb-3\">\n                          {meaning.partOfSpeech}\n                        </Badge>\n\n                        <div className=\"space-y-4\">\n                          {meaning.definitions.map((definition, defIndex) => (\n                            <div key={defIndex} className=\"pl-4 border-l-2 border-gray-200\">\n                              <p className=\"text-gray-800 leading-relaxed\">\n                                <span className=\"font-medium\">{defIndex + 1}.</span> {definition.definition}\n                              </p>\n                              \n                              {definition.example && (\n                                <p className=\"text-gray-600 italic mt-2 text-sm\">\n                                  <strong>Example:</strong> \"{definition.example}\"\n                                </p>\n                              )}\n                              \n                              {(definition.synonyms.length > 0 || meaning.synonyms.length > 0) && (\n                                <div className=\"mt-2\">\n                                  <span className=\"text-sm font-medium text-green-700\">Synonyms: </span>\n                                  <span className=\"text-sm text-green-600\">\n                                    {[...definition.synonyms, ...meaning.synonyms]\n                                      .slice(0, 5)\n                                      .join(', ')}\n                                  </span>\n                                </div>\n                              )}\n                              \n                              {(definition.antonyms.length > 0 || meaning.antonyms.length > 0) && (\n                                <div className=\"mt-1\">\n                                  <span className=\"text-sm font-medium text-red-700\">Antonyms: </span>\n                                  <span className=\"text-sm text-red-600\">\n                                    {[...definition.antonyms, ...meaning.antonyms]\n                                      .slice(0, 5)\n                                      .join(', ')}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Source */}\n                  {result.sourceUrls && result.sourceUrls.length > 0 && (\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                        <ExternalLink className=\"w-4 h-4\" />\n                        <span>Source: </span>\n                        <a\n                          href={result.sourceUrls[0]}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:text-blue-700 underline\"\n                        >\n                          Free Dictionary API\n                        </a>\n                      </div>\n                    </div>\n                  )}\n                </motion.div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </motion.div>\n  );\n}","size_bytes":10366},"client/src/components/PDFViewer.tsx":{"content":"import { useState } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  ZoomIn, \n  ZoomOut, \n  RotateCw, \n  Download,\n  Maximize2,\n  FileText\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\n// Set up PDF.js worker with locked version for security\n// Using specific version to prevent supply-chain attacks\nconst PDF_JS_VERSION = \"3.11.174\"; // Lock to specific version\npdfjs.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${PDF_JS_VERSION}/pdf.worker.min.js`;\n\ninterface PDFViewerProps {\n  file: File;\n  onClose?: () => void;\n  className?: string;\n}\n\ninterface PDFViewerState {\n  numPages: number | null;\n  pageNumber: number;\n  scale: number;\n  rotation: number;\n}\n\nexport function PDFViewer({ file, onClose, className = \"\" }: PDFViewerProps) {\n  const [state, setState] = useState<PDFViewerState>({\n    numPages: null,\n    pageNumber: 1,\n    scale: 1.2,\n    rotation: 0\n  });\n  const [pageInputValue, setPageInputValue] = useState(\"1\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {\n    setState(prev => ({ ...prev, numPages }));\n    setIsLoading(false);\n    setError(null);\n  };\n\n  const onDocumentLoadError = () => {\n    setError(\"Failed to load PDF. Please try another file.\");\n    setIsLoading(false);\n  };\n\n  const changePage = (offset: number) => {\n    setState(prev => ({\n      ...prev,\n      pageNumber: Math.max(1, Math.min(prev.pageNumber + offset, prev.numPages || 1))\n    }));\n  };\n\n  const goToPage = () => {\n    const page = parseInt(pageInputValue);\n    if (page && page > 0 && page <= (state.numPages || 1)) {\n      setState(prev => ({ ...prev, pageNumber: page }));\n    }\n    setPageInputValue(state.pageNumber.toString());\n  };\n\n  const changeScale = (scaleDelta: number) => {\n    setState(prev => ({\n      ...prev,\n      scale: Math.max(0.5, Math.min(prev.scale + scaleDelta, 3.0))\n    }));\n  };\n\n  const rotate = () => {\n    setState(prev => ({\n      ...prev,\n      rotation: (prev.rotation + 90) % 360\n    }));\n  };\n\n  const downloadFile = () => {\n    const url = URL.createObjectURL(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Card className={`flex flex-col h-full ${className}`} data-testid=\"pdf-viewer\">\n      <CardHeader className=\"py-3 border-b\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5 text-blue-600\" />\n            <CardTitle className=\"text-lg truncate max-w-[200px]\" title={file.name}>\n              {file.name}\n            </CardTitle>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\">\n              {(file.size / 1024 / 1024).toFixed(1)} MB\n            </Badge>\n            {onClose && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-pdf\">\n                ✕\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        {/* Controls */}\n        <div className=\"flex items-center justify-between p-3 border-b bg-gray-50\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => changePage(-1)}\n              disabled={state.pageNumber <= 1}\n              data-testid=\"button-prev-page\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            \n            <div className=\"flex items-center gap-2\">\n              <Input\n                type=\"number\"\n                value={pageInputValue}\n                onChange={(e) => setPageInputValue(e.target.value)}\n                onBlur={goToPage}\n                onKeyDown={(e) => e.key === 'Enter' && goToPage()}\n                className=\"w-16 h-8 text-center\"\n                min=\"1\"\n                max={state.numPages || 1}\n                data-testid=\"input-page-number\"\n              />\n              <span className=\"text-sm text-gray-600\">\n                / {state.numPages || 0}\n              </span>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => changePage(1)}\n              disabled={state.pageNumber >= (state.numPages || 1)}\n              data-testid=\"button-next-page\"\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          <div className=\"flex items-center gap-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => changeScale(-0.2)}\n              disabled={state.scale <= 0.5}\n              data-testid=\"button-zoom-out\"\n            >\n              <ZoomOut className=\"w-4 h-4\" />\n            </Button>\n            \n            <Badge variant=\"outline\" className=\"mx-1\">\n              {Math.round(state.scale * 100)}%\n            </Badge>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => changeScale(0.2)}\n              disabled={state.scale >= 3.0}\n              data-testid=\"button-zoom-in\"\n            >\n              <ZoomIn className=\"w-4 h-4\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={rotate}\n              data-testid=\"button-rotate\"\n            >\n              <RotateCw className=\"w-4 h-4\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={downloadFile}\n              data-testid=\"button-download-pdf\"\n            >\n              <Download className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* PDF Content */}\n        <div className=\"flex-1 overflow-auto bg-gray-100\">\n          {isLoading && (\n            <div className=\"flex items-center justify-center h-full\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full\"\n              />\n              <span className=\"ml-3 text-gray-600\">Loading PDF...</span>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <FileText className=\"w-12 h-12 text-red-500 mx-auto mb-2\" />\n                <p className=\"text-red-600 font-medium\">{error}</p>\n              </div>\n            </div>\n          )}\n\n          {!isLoading && !error && (\n            <div className=\"flex justify-center p-4\">\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"shadow-lg\"\n              >\n                <Document\n                  file={file}\n                  onLoadSuccess={onDocumentLoadSuccess}\n                  onLoadError={onDocumentLoadError}\n                  loading=\"\"\n                >\n                  <Page\n                    pageNumber={state.pageNumber}\n                    scale={state.scale}\n                    rotate={state.rotation}\n                    renderTextLayer={false}\n                    renderAnnotationLayer={false}\n                  />\n                </Document>\n              </motion.div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8166},"client/src/utils/security.ts":{"content":"// Security utilities for URL validation and iframe safety\n\nconst ALLOWED_YOUTUBE_DOMAINS = [\n  'www.youtube.com',\n  'youtube.com',\n  'youtu.be',\n  'www.youtube-nocookie.com',\n  'youtube-nocookie.com'\n];\n\nconst ALLOWED_SPOTIFY_DOMAINS = [\n  'open.spotify.com',\n  'embed.spotify.com'\n];\n\n/**\n * Validates and normalizes YouTube URLs to ensure they're safe for embedding\n */\nexport function validateYouTubeURL(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    \n    // Check if domain is allowed\n    if (!ALLOWED_YOUTUBE_DOMAINS.includes(urlObj.hostname)) {\n      console.warn('Invalid YouTube domain:', urlObj.hostname);\n      return null;\n    }\n    \n    // Convert to embed format if it's a watch URL\n    if (urlObj.pathname === '/watch' && urlObj.searchParams.get('v')) {\n      const videoId = urlObj.searchParams.get('v');\n      return `https://www.youtube-nocookie.com/embed/${videoId}?enablejsapi=0&modestbranding=1&rel=0`;\n    }\n    \n    // If it's already an embed URL, ensure it uses the secure domain\n    if (urlObj.pathname.startsWith('/embed/')) {\n      const videoId = urlObj.pathname.split('/embed/')[1];\n      return `https://www.youtube-nocookie.com/embed/${videoId}?enablejsapi=0&modestbranding=1&rel=0`;\n    }\n    \n    // Handle youtu.be short URLs\n    if (urlObj.hostname === 'youtu.be') {\n      const videoId = urlObj.pathname.substring(1);\n      return `https://www.youtube-nocookie.com/embed/${videoId}?enablejsapi=0&modestbranding=1&rel=0`;\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn('Invalid YouTube URL format:', url);\n    return null;\n  }\n}\n\n/**\n * Validates and normalizes Spotify URLs to ensure they're safe for embedding\n */\nexport function validateSpotifyURL(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    \n    // Check if domain is allowed\n    if (!ALLOWED_SPOTIFY_DOMAINS.includes(urlObj.hostname)) {\n      console.warn('Invalid Spotify domain:', urlObj.hostname);\n      return null;\n    }\n    \n    // Convert open.spotify.com URLs to embed format if needed\n    if (urlObj.hostname === 'open.spotify.com') {\n      // Extract the resource type and ID from the URL\n      const pathMatch = urlObj.pathname.match(/\\/(track|album|playlist|show|episode)\\/([a-zA-Z0-9]+)/);\n      if (pathMatch) {\n        const [, type, id] = pathMatch;\n        return `https://open.spotify.com/embed/${type}/${id}?utm_source=generator&theme=0`;\n      }\n    }\n    \n    // If it's already an embed URL, keep it as is\n    if (urlObj.hostname === 'embed.spotify.com' || urlObj.pathname.startsWith('/embed/')) {\n      return url;\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn('Invalid Spotify URL format:', url);\n    return null;\n  }\n}\n\n/**\n * Get minimal sandbox and allow attributes for media iframes\n */\nexport function getSecureIframeProps() {\n  return {\n    sandbox: 'allow-scripts allow-same-origin allow-presentation',\n    allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n    referrerPolicy: 'strict-origin-when-cross-origin' as const\n  };\n}","size_bytes":3093},"client/src/components/TutorMarketplace.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTutorBookingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon, Star, Clock, DollarSign, BookOpen, Users, MapPin } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { TutorProfile } from \"@shared/schema\";\n\nconst bookingFormSchema = insertTutorBookingSchema.extend({\n  session_date: z.date(),\n  duration_minutes: z.number().min(30).max(180),\n});\n\ntype BookingFormData = z.infer<typeof bookingFormSchema>;\n\nconst subjects = [\n  \"Mathematics\", \"Science\", \"English\", \"History\", \"Geography\", \n  \"Physics\", \"Chemistry\", \"Biology\", \"Computer Science\", \"Languages\",\n  \"Art\", \"Music\", \"Economics\", \"Psychology\", \"Philosophy\"\n];\n\nexport function TutorMarketplace() {\n  const { toast } = useToast();\n  const [selectedSubject, setSelectedSubject] = useState<string>(\"\");\n  const [maxRate, setMaxRate] = useState<string>(\"\");\n  const [minRating, setMinRating] = useState<string>(\"\");\n  const [selectedTutor, setSelectedTutor] = useState<TutorProfile | null>(null);\n\n  // Search tutors with filters\n  const { data: tutors, isLoading } = useQuery({\n    queryKey: ['/api/tutors/search', selectedSubject, minRating, maxRate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedSubject) params.append('subject', selectedSubject);\n      if (minRating) params.append('minRating', minRating);\n      if (maxRate) params.append('maxRate', maxRate);\n      \n      const response = await fetch(`/api/tutors/search?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch tutors');\n      return response.json() as Promise<TutorProfile[]>;\n    }\n  });\n\n  // Get tutor reviews\n  const { data: reviews } = useQuery({\n    queryKey: ['/api/tutors', selectedTutor?.id, 'reviews'],\n    queryFn: async () => {\n      if (!selectedTutor) return [];\n      const response = await fetch(`/api/tutors/${selectedTutor.id}/reviews`);\n      if (!response.ok) throw new Error('Failed to fetch reviews');\n      return response.json();\n    },\n    enabled: !!selectedTutor\n  });\n\n  // Booking form\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      tutor_id: \"\",\n      subject: \"\",\n      duration_minutes: 60,\n      session_notes: \"\",\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      const response = await fetch('/api/tutors/bookings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          session_date: data.session_date.toISOString(),\n        }),\n      });\n      if (!response.ok) throw new Error('Failed to create booking');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Booking request sent successfully!\" });\n      form.reset();\n      setSelectedTutor(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/tutors/bookings'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    if (!selectedTutor) return;\n    bookingMutation.mutate({\n      ...data,\n      tutor_id: selectedTutor.id,\n    });\n  };\n\n  const formatPrice = (cents: number) => `$${(cents / 100).toFixed(2)}`;\n  const formatRating = (rating: number) => (rating / 100).toFixed(1);\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          Find Your Perfect Tutor\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Connect with experienced tutors for personalized learning sessions\n        </p>\n      </div>\n\n      {/* Search Filters */}\n      <Card className=\"border-2 border-blue-100 dark:border-blue-900\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5 text-blue-600\" />\n            Filter Tutors\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Subject</label>\n              <Select value={selectedSubject} onValueChange={setSelectedSubject}>\n                <SelectTrigger data-testid=\"select-subject\">\n                  <SelectValue placeholder=\"All subjects\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All subjects</SelectItem>\n                  {subjects.map((subject) => (\n                    <SelectItem key={subject} value={subject}>\n                      {subject}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Max Hourly Rate</label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g. 50\"\n                value={maxRate}\n                onChange={(e) => setMaxRate(e.target.value)}\n                data-testid=\"input-max-rate\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Min Rating</label>\n              <Select value={minRating} onValueChange={setMinRating}>\n                <SelectTrigger data-testid=\"select-min-rating\">\n                  <SelectValue placeholder=\"Any rating\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Any rating</SelectItem>\n                  <SelectItem value=\"4.0\">4.0+ stars</SelectItem>\n                  <SelectItem value=\"4.5\">4.5+ stars</SelectItem>\n                  <SelectItem value=\"4.8\">4.8+ stars</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tutors Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"h-16 w-16 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {tutors?.map((tutor) => (\n            <Card key={tutor.id} className=\"group hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200 dark:hover:border-blue-800\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-start space-x-4\">\n                  <Avatar className=\"h-16 w-16\">\n                    <AvatarImage src={`/api/avatars/${tutor.user_id}`} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold\">\n                      {tutor.user_id.slice(0, 2).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-semibold text-lg\" data-testid={`text-tutor-name-${tutor.id}`}>\n                        Tutor #{tutor.user_id.slice(0, 8)}\n                      </h3>\n                      {tutor.average_rating && tutor.average_rating > 0 && (\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm font-medium\" data-testid={`text-rating-${tutor.id}`}>\n                            {formatRating(tutor.average_rating)}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                      <DollarSign className=\"h-4 w-4\" />\n                      <span data-testid={`text-rate-${tutor.id}`}>\n                        {formatPrice(tutor.hourly_rate)}/hour\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>Responds in ~{tutor.response_time_hours}h</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                      <BookOpen className=\"h-4 w-4\" />\n                      <span>{tutor.experience_years} years experience</span>\n                    </div>\n\n                    {tutor.languages && tutor.languages.length > 0 && (\n                      <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                        <Users className=\"h-4 w-4\" />\n                        <span>Speaks {tutor.languages.join(', ')}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <p className=\"text-sm text-gray-700 dark:text-gray-300 line-clamp-2\">\n                  {tutor.bio}\n                </p>\n\n                <div className=\"flex flex-wrap gap-1\">\n                  {tutor.subjects.slice(0, 3).map((subject) => (\n                    <Badge key={subject} variant=\"secondary\" className=\"text-xs\">\n                      {subject}\n                    </Badge>\n                  ))}\n                  {tutor.subjects.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{tutor.subjects.length - 3} more\n                    </Badge>\n                  )}\n                </div>\n\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                      onClick={() => setSelectedTutor(tutor)}\n                      data-testid={`button-book-${tutor.id}`}\n                    >\n                      Book Session\n                    </Button>\n                  </DialogTrigger>\n                  \n                  <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-3\">\n                        <Avatar className=\"h-12 w-12\">\n                          <AvatarImage src={`/api/avatars/${tutor.user_id}`} />\n                          <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold\">\n                            {tutor.user_id.slice(0, 2).toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <h3 className=\"text-xl font-bold\">Book with Tutor #{tutor.user_id.slice(0, 8)}</h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {formatPrice(tutor.hourly_rate)}/hour • {tutor.average_rating ? formatRating(tutor.average_rating) : 'No rating'} ⭐ • {tutor.total_reviews} reviews\n                          </p>\n                        </div>\n                      </DialogTitle>\n                      <DialogDescription>\n                        {tutor.bio}\n                      </DialogDescription>\n                    </DialogHeader>\n\n                    {/* Tutor Details */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Subjects</h4>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {tutor.subjects.map((subject) => (\n                            <Badge key={subject} variant=\"secondary\">\n                              {subject}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Education & Experience</h4>\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">{tutor.education}</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                          {tutor.experience_years} years of teaching experience\n                        </p>\n                      </div>\n\n                      {reviews && reviews.length > 0 && (\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Recent Reviews</h4>\n                          <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                            {reviews.slice(0, 3).map((review: any) => (\n                              <div key={review.id} className=\"border rounded-lg p-3 bg-gray-50 dark:bg-gray-800\">\n                                <div className=\"flex items-center gap-2 mb-1\">\n                                  <div className=\"flex items-center\">\n                                    {[...Array(5)].map((_, i) => (\n                                      <Star\n                                        key={i}\n                                        className={cn(\n                                          \"h-3 w-3\",\n                                          i < review.rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n                                        )}\n                                      />\n                                    ))}\n                                  </div>\n                                  <span className=\"text-xs text-gray-500\">\n                                    {format(new Date(review.created_at), 'MMM dd, yyyy')}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                                  {review.review_text}\n                                </p>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Booking Form */}\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 border-t pt-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"subject\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Subject</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-booking-subject\">\n                                      <SelectValue placeholder=\"Select subject\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {tutor.subjects.map((subject) => (\n                                      <SelectItem key={subject} value={subject}>\n                                        {subject}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"duration_minutes\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Duration</FormLabel>\n                                <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString()}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-duration\">\n                                      <SelectValue placeholder=\"Select duration\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"30\">30 minutes</SelectItem>\n                                    <SelectItem value=\"60\">1 hour</SelectItem>\n                                    <SelectItem value=\"90\">1.5 hours</SelectItem>\n                                    <SelectItem value=\"120\">2 hours</SelectItem>\n                                    <SelectItem value=\"180\">3 hours</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"session_date\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                              <FormLabel>Session Date & Time</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className={cn(\n                                        \"w-full pl-3 text-left font-normal\",\n                                        !field.value && \"text-muted-foreground\"\n                                      )}\n                                      data-testid=\"button-select-date\"\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) =>\n                                      date < new Date() || date < new Date(\"1900-01-01\")\n                                    }\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"session_notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Session Notes (Optional)</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"What would you like to focus on in this session?\"\n                                  className=\"resize-none\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"textarea-session-notes\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-between items-center pt-4 border-t\">\n                          <div className=\"text-lg font-semibold\">\n                            Total: {form.watch('duration_minutes') ? \n                              formatPrice(Math.round((form.watch('duration_minutes') / 60) * tutor.hourly_rate)) : \n                              '$0.00'\n                            }\n                          </div>\n                          <Button\n                            type=\"submit\"\n                            disabled={bookingMutation.isPending}\n                            className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                            data-testid=\"button-submit-booking\"\n                          >\n                            {bookingMutation.isPending ? \"Booking...\" : \"Book Session\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoading && (!tutors || tutors.length === 0) && (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <BookOpen className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2\">\n              No tutors found\n            </h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">\n              Try adjusting your search filters to find more tutors.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":24051},"client/src/components/TutorProfileManager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTutorProfileSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { GraduationCap, Star, DollarSign, Clock, Plus, X, Calendar, BookOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { TutorProfile, TutorBooking } from \"@shared/schema\";\n\nconst profileFormSchema = insertTutorProfileSchema.extend({\n  hourly_rate: z.number().min(10).max(500),\n  experience_years: z.number().min(0).max(50),\n  response_time_hours: z.number().min(1).max(72),\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\n\nconst availableSubjects = [\n  \"Mathematics\", \"Science\", \"English\", \"History\", \"Geography\", \n  \"Physics\", \"Chemistry\", \"Biology\", \"Computer Science\", \"Languages\",\n  \"Art\", \"Music\", \"Economics\", \"Psychology\", \"Philosophy\", \"Statistics\",\n  \"Calculus\", \"Algebra\", \"Literature\", \"Writing\", \"Spanish\", \"French\",\n  \"German\", \"Chinese\", \"Japanese\", \"Programming\", \"Web Development\"\n];\n\nconst availableLanguages = [\n  \"English\", \"Spanish\", \"French\", \"German\", \"Chinese\", \"Japanese\", \n  \"Korean\", \"Italian\", \"Portuguese\", \"Russian\", \"Arabic\", \"Hindi\"\n];\n\nconst timezones = [\n  \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\",\n  \"Europe/London\", \"Europe/Paris\", \"Europe/Berlin\", \"Europe/Rome\",\n  \"Asia/Tokyo\", \"Asia/Seoul\", \"Asia/Shanghai\", \"Asia/Mumbai\",\n  \"Australia/Sydney\", \"Australia/Melbourne\"\n];\n\nconst availabilityOptions = [\n  \"Weekday mornings\", \"Weekday afternoons\", \"Weekday evenings\",\n  \"Weekend mornings\", \"Weekend afternoons\", \"Weekend evenings\",\n  \"Flexible schedule\", \"24/7 available\"\n];\n\nexport function TutorProfileManager() {\n  const { toast } = useToast();\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const [selectedLanguages, setSelectedLanguages] = useState<string[]>([]);\n  const [selectedAvailability, setSelectedAvailability] = useState<string[]>([]);\n\n  // Get existing tutor profile\n  const { data: tutorProfile, isLoading: profileLoading } = useQuery({\n    queryKey: ['/api/tutors/profile/me'],\n    queryFn: async () => {\n      const response = await fetch('/api/tutors/profile/me');\n      if (!response.ok) throw new Error('Failed to fetch profile');\n      const data = await response.json();\n      return data as TutorProfile | null;\n    }\n  });\n\n  // Get tutor bookings\n  const { data: bookings } = useQuery({\n    queryKey: ['/api/tutors/bookings/tutor'],\n    queryFn: async () => {\n      const response = await fetch('/api/tutors/bookings/tutor');\n      if (!response.ok) throw new Error('Failed to fetch bookings');\n      return response.json() as Promise<TutorBooking[]>;\n    },\n    enabled: !!tutorProfile\n  });\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      bio: \"\",\n      hourly_rate: 25,\n      subjects: [],\n      languages: [],\n      education: \"\",\n      experience_years: 0,\n      availability: [],\n      timezone: \"America/New_York\",\n      response_time_hours: 24,\n    },\n  });\n\n  // Load existing profile data when available\n  useEffect(() => {\n    if (tutorProfile) {\n      form.reset({\n        bio: tutorProfile.bio || \"\",\n        hourly_rate: tutorProfile.hourly_rate / 100, // Convert from cents\n        subjects: tutorProfile.subjects || [],\n        languages: tutorProfile.languages || [],\n        education: tutorProfile.education || \"\",\n        experience_years: tutorProfile.experience_years || 0,\n        availability: tutorProfile.availability || [],\n        timezone: tutorProfile.timezone || \"America/New_York\",\n        response_time_hours: tutorProfile.response_time_hours || 24,\n      });\n      setSelectedSubjects(tutorProfile.subjects || []);\n      setSelectedLanguages(tutorProfile.languages || []);\n      setSelectedAvailability(tutorProfile.availability || []);\n    }\n  }, [tutorProfile, form]);\n\n  const profileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      const method = tutorProfile ? 'PATCH' : 'POST';\n      const url = '/api/tutors/profile';\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          hourly_rate: Math.round(data.hourly_rate * 100), // Convert to cents\n          subjects: selectedSubjects,\n          languages: selectedLanguages,\n          availability: selectedAvailability,\n        }),\n      });\n      if (!response.ok) throw new Error('Failed to save profile');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ \n        title: \"Success\", \n        description: tutorProfile ? \"Profile updated successfully!\" : \"Tutor profile created successfully!\" \n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tutors/profile/me'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to save profile\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const bookingStatusMutation = useMutation({\n    mutationFn: async ({ bookingId, status }: { bookingId: string, status: string }) => {\n      const response = await fetch(`/api/tutors/bookings/${bookingId}/status`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) throw new Error('Failed to update booking status');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Booking status updated!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/tutors/bookings/tutor'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update booking status\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    if (selectedSubjects.length === 0) {\n      toast({ title: \"Error\", description: \"Please select at least one subject\", variant: \"destructive\" });\n      return;\n    }\n    if (selectedLanguages.length === 0) {\n      toast({ title: \"Error\", description: \"Please select at least one language\", variant: \"destructive\" });\n      return;\n    }\n    profileMutation.mutate(data);\n  };\n\n  const addSubject = (subject: string) => {\n    if (!selectedSubjects.includes(subject)) {\n      setSelectedSubjects([...selectedSubjects, subject]);\n    }\n  };\n\n  const removeSubject = (subject: string) => {\n    setSelectedSubjects(selectedSubjects.filter(s => s !== subject));\n  };\n\n  const addLanguage = (language: string) => {\n    if (!selectedLanguages.includes(language)) {\n      setSelectedLanguages([...selectedLanguages, language]);\n    }\n  };\n\n  const removeLanguage = (language: string) => {\n    setSelectedLanguages(selectedLanguages.filter(l => l !== language));\n  };\n\n  const addAvailability = (availability: string) => {\n    if (!selectedAvailability.includes(availability)) {\n      setSelectedAvailability([...selectedAvailability, availability]);\n    }\n  };\n\n  const removeAvailability = (availability: string) => {\n    setSelectedAvailability(selectedAvailability.filter(a => a !== availability));\n  };\n\n  const formatPrice = (cents: number) => `$${(cents / 100).toFixed(2)}`;\n  const formatRating = (rating: number) => (rating / 100).toFixed(1);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'completed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  if (profileLoading) {\n    return (\n      <div className=\"space-y-6 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n          <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n          {tutorProfile ? \"Manage Your Tutor Profile\" : \"Become a Tutor\"}\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          {tutorProfile ? \"Update your profile and manage bookings\" : \"Share your knowledge and earn by teaching others\"}\n        </p>\n      </div>\n\n      {tutorProfile && (\n        <Card className=\"border-2 border-green-100 dark:border-green-900\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <GraduationCap className=\"h-5 w-5 text-green-600\" />\n                Profile Overview\n              </div>\n              {tutorProfile.average_rating && tutorProfile.average_rating > 0 && (\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"font-semibold\" data-testid=\"text-tutor-rating\">\n                    {formatRating(tutorProfile.average_rating)} ({tutorProfile.total_reviews} reviews)\n                  </span>\n                </div>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-4 w-4 text-green-600\" />\n                <span data-testid=\"text-hourly-rate\">\n                  {formatPrice(tutorProfile.hourly_rate)}/hour\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-blue-600\" />\n                <span>Responds in ~{tutorProfile.response_time_hours}h</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-4 w-4 text-purple-600\" />\n                <span>{tutorProfile.experience_years} years experience</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            {tutorProfile ? \"Update Profile\" : \"Create Tutor Profile\"}\n          </CardTitle>\n          <CardDescription>\n            Fill out your information to {tutorProfile ? \"update your\" : \"create a\"} tutor profile\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"bio\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bio *</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Tell students about yourself, your teaching style, and what makes you a great tutor...\"\n                        className=\"min-h-[100px]\"\n                        {...field}\n                        data-testid=\"textarea-bio\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"hourly_rate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Hourly Rate (USD) *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"10\"\n                          max=\"500\"\n                          step=\"5\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                          data-testid=\"input-hourly-rate\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"experience_years\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Years of Experience *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"50\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          data-testid=\"input-experience-years\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Subjects */}\n              <div className=\"space-y-3\">\n                <FormLabel>Subjects You Teach *</FormLabel>\n                <div className=\"flex flex-wrap gap-2 mb-3\">\n                  {selectedSubjects.map((subject) => (\n                    <Badge key={subject} variant=\"default\" className=\"flex items-center gap-1\">\n                      {subject}\n                      <X \n                        className=\"h-3 w-3 cursor-pointer\" \n                        onClick={() => removeSubject(subject)}\n                        data-testid={`button-remove-subject-${subject}`}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n                <Select onValueChange={addSubject}>\n                  <SelectTrigger data-testid=\"select-add-subject\">\n                    <SelectValue placeholder=\"Add a subject\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableSubjects\n                      .filter(subject => !selectedSubjects.includes(subject))\n                      .map((subject) => (\n                        <SelectItem key={subject} value={subject}>\n                          {subject}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Languages */}\n              <div className=\"space-y-3\">\n                <FormLabel>Languages You Speak *</FormLabel>\n                <div className=\"flex flex-wrap gap-2 mb-3\">\n                  {selectedLanguages.map((language) => (\n                    <Badge key={language} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      {language}\n                      <X \n                        className=\"h-3 w-3 cursor-pointer\" \n                        onClick={() => removeLanguage(language)}\n                        data-testid={`button-remove-language-${language}`}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n                <Select onValueChange={addLanguage}>\n                  <SelectTrigger data-testid=\"select-add-language\">\n                    <SelectValue placeholder=\"Add a language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableLanguages\n                      .filter(language => !selectedLanguages.includes(language))\n                      .map((language) => (\n                        <SelectItem key={language} value={language}>\n                          {language}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"education\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Education *</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe your educational background, degrees, certifications...\"\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"textarea-education\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Availability */}\n              <div className=\"space-y-3\">\n                <FormLabel>Availability</FormLabel>\n                <div className=\"flex flex-wrap gap-2 mb-3\">\n                  {selectedAvailability.map((availability) => (\n                    <Badge key={availability} variant=\"outline\" className=\"flex items-center gap-1\">\n                      {availability}\n                      <X \n                        className=\"h-3 w-3 cursor-pointer\" \n                        onClick={() => removeAvailability(availability)}\n                        data-testid={`button-remove-availability-${availability}`}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n                <Select onValueChange={addAvailability}>\n                  <SelectTrigger data-testid=\"select-add-availability\">\n                    <SelectValue placeholder=\"Add availability\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availabilityOptions\n                      .filter(availability => !selectedAvailability.includes(availability))\n                      .map((availability) => (\n                        <SelectItem key={availability} value={availability}>\n                          {availability}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"timezone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Timezone *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-timezone\">\n                            <SelectValue placeholder=\"Select timezone\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {timezones.map((timezone) => (\n                            <SelectItem key={timezone} value={timezone}>\n                              {timezone.replace('_', ' ')}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"response_time_hours\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Response Time (hours) *</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString() || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-response-time\">\n                            <SelectValue placeholder=\"Select response time\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"1\">Within 1 hour</SelectItem>\n                          <SelectItem value=\"2\">Within 2 hours</SelectItem>\n                          <SelectItem value=\"4\">Within 4 hours</SelectItem>\n                          <SelectItem value=\"8\">Within 8 hours</SelectItem>\n                          <SelectItem value=\"24\">Within 24 hours</SelectItem>\n                          <SelectItem value=\"48\">Within 48 hours</SelectItem>\n                          <SelectItem value=\"72\">Within 72 hours</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={profileMutation.isPending}\n                className=\"w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700\"\n                data-testid=\"button-save-profile\"\n              >\n                {profileMutation.isPending ? \"Saving...\" : (tutorProfile ? \"Update Profile\" : \"Create Profile\")}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {/* Bookings Management */}\n      {tutorProfile && bookings && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5 text-blue-600\" />\n              Manage Bookings\n            </CardTitle>\n            <CardDescription>\n              View and manage your upcoming and past sessions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {bookings.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                <p className=\"text-gray-500 dark:text-gray-400\">No bookings yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {bookings.map((booking) => (\n                  <div key={booking.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h4 className=\"font-semibold\" data-testid={`text-booking-subject-${booking.id}`}>\n                          {booking.subject}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(booking.session_date).toLocaleDateString()} • {booking.duration_minutes} minutes\n                        </p>\n                        <p className=\"text-sm font-medium\" data-testid={`text-booking-total-${booking.id}`}>\n                          {formatPrice(booking.total_cost)}\n                        </p>\n                      </div>\n                      <div className=\"text-right space-y-2\">\n                        <Badge className={getStatusColor(booking.status || 'pending')} data-testid={`badge-status-${booking.id}`}>\n                          {booking.status || 'pending'}\n                        </Badge>\n                        {booking.status === 'pending' && (\n                          <div className=\"space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => bookingStatusMutation.mutate({ bookingId: booking.id, status: 'confirmed' })}\n                              disabled={bookingStatusMutation.isPending}\n                              data-testid={`button-confirm-${booking.id}`}\n                            >\n                              Confirm\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => bookingStatusMutation.mutate({ bookingId: booking.id, status: 'cancelled' })}\n                              disabled={bookingStatusMutation.isPending}\n                              data-testid={`button-cancel-${booking.id}`}\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        )}\n                        {booking.status === 'confirmed' && new Date(booking.session_date) < new Date() && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => bookingStatusMutation.mutate({ bookingId: booking.id, status: 'completed' })}\n                            disabled={bookingStatusMutation.isPending}\n                            data-testid={`button-complete-${booking.id}`}\n                          >\n                            Mark Complete\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    {booking.session_notes && (\n                      <div className=\"bg-gray-50 dark:bg-gray-800 rounded p-3\">\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                          <strong>Notes:</strong> {booking.session_notes}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":26288}},"version":1}