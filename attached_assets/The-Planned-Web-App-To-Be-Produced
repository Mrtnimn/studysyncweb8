You are an expert full-stack software engineer and SEO specialist with over 20 years of experience building production-grade web apps for successful startups. Your task is to build the "StudySync" web application, a collaborative and gamified learning platform for students.

Project Vision:
To create an engaging, secure, and distraction-free online environment where young students can study solo, collaborate in groups, and connect with tutors. The platform will be highly interactive and visually appealing to users from primary school to university level. The user experience should feel more like a welcoming club or a creative tool than a rigid educational platform.

Stack/State of the Project:

Framework: Next.js with TypeScript.

Database & Auth: Supabase.

Deployment: Vercel.

Version Control: Git and GitHub.

Setup: A boilerplate Next.js project is deployed on Vercel (studysyncweb.vercel.app) and connected to a Supabase project. The Supabase project has three tables: bookings, profiles, and subjects, with basic RLS on the profiles table.

Your Task:
Develop the "StudySync" application in a phased approach. For each feature, provide the complete, production-ready code for the relevant Next.js pages, components, and server-side logic. Ensure the code is secure, well-documented, and follows best practices for performance and maintainability.

Phase 1: Authentication and User Profiles

Implement a complete authentication system using Supabase Auth.

Create sign-up, login, and password reset pages. Use Supabase UI components for rapid development but heavily customize the CSS to match a vibrant, youth-focused design theme.

Include social login options for Google and GitHub, ensuring the buttons are prominent and visually appealing.

Ensure all authentication forms have robust client-side and server-side validation and provide clear, helpful error messages to the user.

Build the user profile management page.

Allow users to update their display name, a unique and validated username, and upload a profile picture to a 'avatars' bucket in Supabase Storage. Implement image compression on upload to save storage and improve performance.

Include a "User Role" selector (Student/Teacher) that is saved to the user's profile in the database.

Phase 2: The Main Dashboard

Create a user dashboard as the main landing page after login. This page should be built using dynamic components that fetch data client-side to provide a fast, app-like feel.

Integrate an interactive calendar.

Use a library like react-big-calendar and populate it with data fetched from your bookings and study_sessions tables.

Implement a modal that opens when a user clicks a date, allowing them to schedule new study sessions directly on the calendar.

Design and implement the gamification UI.

Create a dedicated component to fetch and display data from the user_stats table: study streaks, XP points, and badges.

Make this section visually engaging with animated progress bars, celebratory notifications for new achievements, and a clear layout that encourages progress.

Phase 3: Solo Study Session

Create the setup page for a solo study session with the following options:

A grid of selectable background themes/wallpapers.

An input field for a YouTube Music link and a dropdown of pre-selected ambient music tracks.

A "Do Not Disturb" toggle that enables browser full-screen mode.

An interactive timer with presets and custom input.

Build the solo study room interface.

This will be a full-screen, minimalist page designed to eliminate distractions.

Implement the document uploader using Supabase Storage and a PDF viewer component.

Integrate a dictionary API (e.g., Free Dictionary API) to provide an in-app lookup feature.

Phase 4: Group Study Session

Develop the group study room.

Integrate a real-time chat feature using Supabase Realtime subscriptions.

Implement video and audio streaming using WebRTC. The UI should show a grid of participant videos and have clear controls for muting and camera toggling.

Create a shared document uploader for all participants, where uploaded files are visible to everyone in the session.

General Requirements:

UI/UX: Use Tailwind CSS for a modern, responsive, and mobile-first design. The aesthetic should be clean, colorful, and highly engaging for young users, with smooth transitions and micro-interactions.

Security: Meticulously implement Supabase Row Level Security (RLS) for all tables to ensure strict data privacy. Sanitize all user-submitted content to prevent XSS attacks.

State Management: Use React Context for global state (like user session) and useState/useReducer for local component state.

Performance: Leverage Next.js features like Server Components and API Routes for efficient data fetching. Optimize images and use code splitting to ensure fast load times.

Error Handling: Implement comprehensive error handling and provide user-friendly feedback through toasts or notifications for API calls, form submissions, etc.

SEO: Implement SEO best practices for all public-facing pages, including dynamic meta tags for teacher profiles.
